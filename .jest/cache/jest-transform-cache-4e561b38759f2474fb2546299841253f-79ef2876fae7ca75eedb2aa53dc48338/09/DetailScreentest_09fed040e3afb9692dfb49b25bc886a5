f8dbf8660e3097c1cd8fa1c14828970d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
var _react = _interopRequireDefault(require("react"));
var _screen = require("../src/screen");
var _jsxRuntime = require("react/jsx-runtime");
describe('DetailScreen', function () {
  var mockRoute = {
    params: {
      uri: 'https://example.com/photo.jpg',
      date: '16/09/2025',
      coords: {
        latitude: 10,
        longitude: 20
      }
    }
  };
  it('renders image and information correctly', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_screen.DetailScreen, {
        route: mockRoute,
        navigation: {}
      })),
      getByText = _render.getByText,
      getByTestId = _render.getByTestId;
    expect(getByText(/16\/09\/2025/)).toBeTruthy();
    expect(getByText(/10.000000, 20.000000/)).toBeTruthy();
  });
  it('renders correctly without coordinates', function () {
    var routeWithoutCoords = {
      params: {
        uri: 'https://example.com/photo.jpg',
        date: '16/09/2025'
      }
    };
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_screen.DetailScreen, {
        route: routeWithoutCoords,
        navigation: {}
      })),
      queryByText = _render2.queryByText;
    expect(queryByText(/Coordenadas:/)).toBeNull();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zY3JlZW4iLCJfanN4UnVudGltZSIsImRlc2NyaWJlIiwibW9ja1JvdXRlIiwicGFyYW1zIiwidXJpIiwiZGF0ZSIsImNvb3JkcyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwiaXQiLCJfcmVuZGVyIiwicmVuZGVyIiwianN4IiwiRGV0YWlsU2NyZWVuIiwicm91dGUiLCJuYXZpZ2F0aW9uIiwiZ2V0QnlUZXh0IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5Iiwicm91dGVXaXRob3V0Q29vcmRzIiwiX3JlbmRlcjIiLCJxdWVyeUJ5VGV4dCIsInRvQmVOdWxsIl0sInNvdXJjZXMiOlsiRGV0YWlsU2NyZWVuLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEZXRhaWxTY3JlZW4gfSBmcm9tICcuLi9zcmMvc2NyZWVuJztcblxuZGVzY3JpYmUoJ0RldGFpbFNjcmVlbicsICgpID0+IHtcbiAgY29uc3QgbW9ja1JvdXRlID0ge1xuICAgIHBhcmFtczoge1xuICAgICAgdXJpOiAnaHR0cHM6Ly9leGFtcGxlLmNvbS9waG90by5qcGcnLFxuICAgICAgZGF0ZTogJzE2LzA5LzIwMjUnLFxuICAgICAgY29vcmRzOiB7IGxhdGl0dWRlOiAxMCwgbG9uZ2l0dWRlOiAyMCB9LFxuICAgIH0sXG4gIH07XG5cbiAgaXQoJ3JlbmRlcnMgaW1hZ2UgYW5kIGluZm9ybWF0aW9uIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGV4dCwgZ2V0QnlUZXN0SWQgfSA9IHJlbmRlcihcbiAgICAgIDxEZXRhaWxTY3JlZW4gcm91dGU9e21vY2tSb3V0ZSBhcyBhbnl9IG5hdmlnYXRpb249e3t9IGFzIGFueX0gLz4sXG4gICAgKTtcblxuICAgIC8vIFZlcmlmaWNhIHNlIGEgZGF0YSBhcGFyZWNlXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgvMTZcXC8wOVxcLzIwMjUvKSkudG9CZVRydXRoeSgpO1xuXG4gICAgLy8gVmVyaWZpY2Egc2UgYXMgY29vcmRlbmFkYXMgYXBhcmVjZW1cbiAgICBleHBlY3QoZ2V0QnlUZXh0KC8xMC4wMDAwMDAsIDIwLjAwMDAwMC8pKS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRob3V0IGNvb3JkaW5hdGVzJywgKCkgPT4ge1xuICAgIGNvbnN0IHJvdXRlV2l0aG91dENvb3JkcyA9IHtcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB1cmk6ICdodHRwczovL2V4YW1wbGUuY29tL3Bob3RvLmpwZycsXG4gICAgICAgIGRhdGU6ICcxNi8wOS8yMDI1JyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IHsgcXVlcnlCeVRleHQgfSA9IHJlbmRlcihcbiAgICAgIDxEZXRhaWxTY3JlZW4gcm91dGU9e3JvdXRlV2l0aG91dENvb3JkcyBhcyBhbnl9IG5hdmlnYXRpb249e3t9IGFzIGFueX0gLz4sXG4gICAgKTtcblxuICAgIC8vIENvb3JkZW5hZGFzIG7Do28gZGV2ZW0gYXBhcmVjZXJcbiAgICBleHBlY3QocXVlcnlCeVRleHQoL0Nvb3JkZW5hZGFzOi8pKS50b0JlTnVsbCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQTZDLElBQUFJLFdBQUEsR0FBQUosT0FBQTtBQUU3Q0ssUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0VBQzdCLElBQU1DLFNBQVMsR0FBRztJQUNoQkMsTUFBTSxFQUFFO01BQ05DLEdBQUcsRUFBRSwrQkFBK0I7TUFDcENDLElBQUksRUFBRSxZQUFZO01BQ2xCQyxNQUFNLEVBQUU7UUFBRUMsUUFBUSxFQUFFLEVBQUU7UUFBRUMsU0FBUyxFQUFFO01BQUc7SUFDeEM7RUFDRixDQUFDO0VBRURDLEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxZQUFNO0lBQ2xELElBQUFDLE9BQUEsR0FBbUMsSUFBQUMsbUJBQU0sRUFDdkMsSUFBQVgsV0FBQSxDQUFBWSxHQUFBLEVBQUNiLE9BQUEsQ0FBQWMsWUFBWTtRQUFDQyxLQUFLLEVBQUVaLFNBQWlCO1FBQUNhLFVBQVUsRUFBRSxDQUFDO01BQVMsQ0FBRSxDQUNqRSxDQUFDO01BRk9DLFNBQVMsR0FBQU4sT0FBQSxDQUFUTSxTQUFTO01BQUVDLFdBQVcsR0FBQVAsT0FBQSxDQUFYTyxXQUFXO0lBSzlCQyxNQUFNLENBQUNGLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztJQUc5Q0QsTUFBTSxDQUFDRixTQUFTLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDRyxVQUFVLENBQUMsQ0FBQztFQUN4RCxDQUFDLENBQUM7RUFFRlYsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLFlBQU07SUFDaEQsSUFBTVcsa0JBQWtCLEdBQUc7TUFDekJqQixNQUFNLEVBQUU7UUFDTkMsR0FBRyxFQUFFLCtCQUErQjtRQUNwQ0MsSUFBSSxFQUFFO01BQ1I7SUFDRixDQUFDO0lBRUQsSUFBQWdCLFFBQUEsR0FBd0IsSUFBQVYsbUJBQU0sRUFDNUIsSUFBQVgsV0FBQSxDQUFBWSxHQUFBLEVBQUNiLE9BQUEsQ0FBQWMsWUFBWTtRQUFDQyxLQUFLLEVBQUVNLGtCQUEwQjtRQUFDTCxVQUFVLEVBQUUsQ0FBQztNQUFTLENBQUUsQ0FDMUUsQ0FBQztNQUZPTyxXQUFXLEdBQUFELFFBQUEsQ0FBWEMsV0FBVztJQUtuQkosTUFBTSxDQUFDSSxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDLENBQUM7RUFDaEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119