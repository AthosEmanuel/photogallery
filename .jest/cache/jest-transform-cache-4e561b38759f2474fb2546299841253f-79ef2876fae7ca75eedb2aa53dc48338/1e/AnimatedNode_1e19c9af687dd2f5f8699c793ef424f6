6c791c8e1f1d8e1806ec9a1132b3c2fd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));
var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));
var _NativeAnimatedHelper = _interopRequireDefault(require("../../../src/private/animated/NativeAnimatedHelper"));
var _invariant = _interopRequireDefault(require("invariant"));
var _uniqueId = 1;
var _assertNativeAnimatedModule2 = function _assertNativeAnimatedModule() {
  _NativeAnimatedHelper.default.assertNativeAnimatedModule();
  _assertNativeAnimatedModule2 = null;
};
var _listeners = (0, _classPrivateFieldLooseKey2.default)("listeners");
var AnimatedNode = exports.default = function () {
  function AnimatedNode(config) {
    (0, _classCallCheck2.default)(this, AnimatedNode);
    Object.defineProperty(this, _listeners, {
      writable: true,
      value: void 0
    });
    this._platformConfig = undefined;
    this.__isNative = false;
    this.__nativeTag = undefined;
    this.__debugID = undefined;
    (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners] = new Map();
    if (__DEV__) {
      this.__debugID = config == null ? void 0 : config.debugID;
    }
  }
  return (0, _createClass2.default)(AnimatedNode, [{
    key: "__attach",
    value: function __attach() {}
  }, {
    key: "__detach",
    value: function __detach() {
      this.removeAllListeners();
      if (this.__isNative && this.__nativeTag != null) {
        _NativeAnimatedHelper.default.API.dropAnimatedNode(this.__nativeTag);
        this.__nativeTag = undefined;
      }
    }
  }, {
    key: "__getValue",
    value: function __getValue() {}
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      return this.__getValue();
    }
  }, {
    key: "__addChild",
    value: function __addChild(child) {}
  }, {
    key: "__removeChild",
    value: function __removeChild(child) {}
  }, {
    key: "__getChildren",
    value: function __getChildren() {
      return [];
    }
  }, {
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      (0, _invariant.default)(this.__isNative, 'This node cannot be made a "native" animated node');
      this._platformConfig = platformConfig;
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var id = String(_uniqueId++);
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].set(id, callback);
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].delete(id);
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].clear();
    }
  }, {
    key: "hasListeners",
    value: function hasListeners() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].size > 0;
    }
  }, {
    key: "__onAnimatedValueUpdateReceived",
    value: function __onAnimatedValueUpdateReceived(value, offset) {
      this.__callListeners(value + offset);
    }
  }, {
    key: "__callListeners",
    value: function __callListeners(value) {
      var event = {
        value: value
      };
      (0, _classPrivateFieldLooseBase2.default)(this, _listeners)[_listeners].forEach(function (listener) {
        listener(event);
      });
    }
  }, {
    key: "__getNativeTag",
    value: function __getNativeTag() {
      var nativeTag = this.__nativeTag;
      if (nativeTag == null) {
        _assertNativeAnimatedModule2 == null || _assertNativeAnimatedModule2();
        (0, _invariant.default)(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
        nativeTag = _NativeAnimatedHelper.default.generateNewNodeTag();
        this.__nativeTag = nativeTag;
        var config = this.__getNativeConfig();
        if (this._platformConfig) {
          config.platformConfig = this._platformConfig;
        }
        _NativeAnimatedHelper.default.API.createAnimatedNode(nativeTag, config);
      }
      return nativeTag;
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      throw new Error('This JS animated node type cannot be used as native animated node');
    }
  }, {
    key: "__getPlatformConfig",
    value: function __getPlatformConfig() {
      return this._platformConfig;
    }
  }, {
    key: "__setPlatformConfig",
    value: function __setPlatformConfig(platformConfig) {
      this._platformConfig = platformConfig;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.__getValue();
    }
  }, {
    key: "__getDebugID",
    value: function __getDebugID() {
      if (__DEV__) {
        return this.__debugID;
      }
      return undefined;
    }
  }]);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,