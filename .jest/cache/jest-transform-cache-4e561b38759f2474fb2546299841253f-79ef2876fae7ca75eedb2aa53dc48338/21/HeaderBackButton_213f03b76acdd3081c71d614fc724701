966caa99a7fa80c07f64d62cb4de597b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderBackButton = HeaderBackButton;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _backIcon = _interopRequireDefault(require("../assets/back-icon.png"));
var _backIconMask = _interopRequireDefault(require("../assets/back-icon-mask.png"));
var _MaskedView = require("../MaskedView");
var _HeaderButton = require("./HeaderButton.js");
var _HeaderIcon = require("./HeaderIcon.js");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function HeaderBackButton(_ref) {
  var disabled = _ref.disabled,
    allowFontScaling = _ref.allowFontScaling,
    backImage = _ref.backImage,
    label = _ref.label,
    labelStyle = _ref.labelStyle,
    _ref$displayMode = _ref.displayMode,
    displayMode = _ref$displayMode === void 0 ? _reactNative.Platform.OS === 'ios' ? 'default' : 'minimal' : _ref$displayMode,
    onLabelLayout = _ref.onLabelLayout,
    onPress = _ref.onPress,
    pressColor = _ref.pressColor,
    pressOpacity = _ref.pressOpacity,
    screenLayout = _ref.screenLayout,
    tintColor = _ref.tintColor,
    titleLayout = _ref.titleLayout,
    _ref$truncatedLabel = _ref.truncatedLabel,
    truncatedLabel = _ref$truncatedLabel === void 0 ? 'Back' : _ref$truncatedLabel,
    _ref$accessibilityLab = _ref.accessibilityLabel,
    accessibilityLabel = _ref$accessibilityLab === void 0 ? label && label !== 'Back' ? `${label}, back` : 'Go back' : _ref$accessibilityLab,
    testID = _ref.testID,
    style = _ref.style,
    href = _ref.href;
  var _useTheme = (0, _native.useTheme)(),
    colors = _useTheme.colors,
    fonts = _useTheme.fonts;
  var _useLocale = (0, _native.useLocale)(),
    direction = _useLocale.direction;
  var _React$useState = React.useState(null),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    labelWidth = _React$useState2[0],
    setLabelWidth = _React$useState2[1];
  var _React$useState3 = React.useState(null),
    _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
    truncatedLabelWidth = _React$useState4[0],
    setTruncatedLabelWidth = _React$useState4[1];
  var renderBackImage = function renderBackImage() {
    if (backImage) {
      return backImage({
        tintColor: tintColor != null ? tintColor : colors.text
      });
    } else {
      return (0, _jsxRuntime.jsx)(_HeaderIcon.HeaderIcon, {
        source: _backIcon.default,
        tintColor: tintColor,
        style: [styles.icon, displayMode !== 'minimal' && styles.iconWithLabel]
      });
    }
  };
  var renderLabel = function renderLabel() {
    if (displayMode === 'minimal') {
      return null;
    }
    var availableSpace = titleLayout && screenLayout ? (screenLayout.width - titleLayout.width) / 2 - (ICON_WIDTH + _HeaderIcon.ICON_MARGIN) : null;
    var potentialLabelText = displayMode === 'default' ? label : truncatedLabel;
    var finalLabelText = availableSpace && labelWidth && truncatedLabelWidth ? availableSpace > labelWidth ? potentialLabelText : availableSpace > truncatedLabelWidth ? truncatedLabel : null : potentialLabelText;
    var commonStyle = [fonts.regular, styles.label, labelStyle];
    var hiddenStyle = [commonStyle, {
      position: 'absolute',
      top: 0,
      left: 0,
      opacity: 0
    }];
    var labelElement = (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.labelWrapper,
      children: [label && displayMode === 'default' ? (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
        style: hiddenStyle,
        numberOfLines: 1,
        onLayout: function onLayout(e) {
          return setLabelWidth(e.nativeEvent.layout.width);
        },
        children: label
      }) : null, truncatedLabel ? (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
        style: hiddenStyle,
        numberOfLines: 1,
        onLayout: function onLayout(e) {
          return setTruncatedLabelWidth(e.nativeEvent.layout.width);
        },
        children: truncatedLabel
      }) : null, finalLabelText ? (0, _jsxRuntime.jsx)(_reactNative.Animated.Text, {
        accessible: false,
        onLayout: onLabelLayout,
        style: [tintColor ? {
          color: tintColor
        } : null, commonStyle],
        numberOfLines: 1,
        allowFontScaling: !!allowFontScaling,
        children: finalLabelText
      }) : null]
    });
    if (backImage || _reactNative.Platform.OS !== 'ios') {
      return labelElement;
    }
    return (0, _jsxRuntime.jsx)(_MaskedView.MaskedView, {
      maskElement: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: [styles.iconMaskContainer, screenLayout ? {
          minWidth: screenLayout.width / 2 - 27
        } : null],
        children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: _backIconMask.default,
          resizeMode: "contain",
          style: [styles.iconMask, direction === 'rtl' && styles.flip]
        }), (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.iconMaskFillerRect
        })]
      }),
      children: labelElement
    });
  };
  var handlePress = function handlePress() {
    if (onPress) {
      requestAnimationFrame(function () {
        return onPress();
      });
    }
  };
  return (0, _jsxRuntime.jsx)(_HeaderButton.HeaderButton, {
    disabled: disabled,
    href: href,
    accessibilityLabel: accessibilityLabel,
    testID: testID,
    onPress: handlePress,
    pressColor: pressColor,
    pressOpacity: pressOpacity,
    style: [styles.container, style],
    children: (0, _jsxRuntime.jsxs)(React.Fragment, {
      children: [renderBackImage(), renderLabel()]
    })
  });
}
var ICON_WIDTH = _reactNative.Platform.OS === 'ios' ? 13 : 24;
var ICON_MARGIN_END = _reactNative.Platform.OS === 'ios' ? 22 : 3;
var styles = _reactNative.StyleSheet.create({
  container: Object.assign({
    paddingHorizontal: 0,
    minWidth: _reactNative.StyleSheet.hairlineWidth
  }, _reactNative.Platform.select({
    ios: null,
    default: {
      marginVertical: 3,
      marginHorizontal: 11
    }
  })),
  label: {
    fontSize: 17,
    letterSpacing: 0.35
  },
  labelWrapper: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginEnd: _HeaderIcon.ICON_MARGIN
  },
  icon: {
    width: ICON_WIDTH,
    marginEnd: ICON_MARGIN_END
  },
  iconWithLabel: _reactNative.Platform.OS === 'ios' ? {
    marginEnd: 6
  } : {},
  iconMaskContainer: {
    flex: 1,
    flexDirection: 'row',
    justifyContent: 'center'
  },
  iconMaskFillerRect: {
    flex: 1,
    backgroundColor: '#000'
  },
  iconMask: {
    height: 21,
    width: 13,
    marginStart: -14.5,
    marginVertical: 12,
    alignSelf: 'center'
  },
  flip: {
    transform: 'scaleX(-1)'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,