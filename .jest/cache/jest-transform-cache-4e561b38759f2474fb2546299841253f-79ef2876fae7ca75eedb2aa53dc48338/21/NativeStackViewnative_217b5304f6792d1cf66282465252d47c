7594e55f31a6ca5846f917105d41c34c
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeStackView = NativeStackView;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _elements = require("@react-navigation/elements");
var _native = require("@react-navigation/native");
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _reactNativeScreens = require("react-native-screens");
var _debounce = require("../utils/debounce.js");
var _getModalRoutesKeys = require("../utils/getModalRoutesKeys.js");
var _useAnimatedHeaderHeight = require("../utils/useAnimatedHeaderHeight.js");
var _useDismissedRouteError = require("../utils/useDismissedRouteError.js");
var _useInvalidPreventRemoveError = require("../utils/useInvalidPreventRemoveError.js");
var _useHeaderConfigProps = require("./useHeaderConfigProps.js");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ANDROID_DEFAULT_HEADER_HEIGHT = 56;
function isFabric() {
  return 'nativeFabricUIManager' in global;
}
var useNativeDriver = _reactNative.Platform.OS !== 'web';
var SceneView = function SceneView(_ref) {
  var _preventedRoutes$rout;
  var index = _ref.index,
    focused = _ref.focused,
    shouldFreeze = _ref.shouldFreeze,
    descriptor = _ref.descriptor,
    previousDescriptor = _ref.previousDescriptor,
    nextDescriptor = _ref.nextDescriptor,
    isPresentationModal = _ref.isPresentationModal,
    isPreloaded = _ref.isPreloaded,
    onWillDisappear = _ref.onWillDisappear,
    onWillAppear = _ref.onWillAppear,
    onAppear = _ref.onAppear,
    onDisappear = _ref.onDisappear,
    onDismissed = _ref.onDismissed,
    onHeaderBackButtonClicked = _ref.onHeaderBackButtonClicked,
    onNativeDismissCancelled = _ref.onNativeDismissCancelled,
    onGestureCancel = _ref.onGestureCancel,
    onSheetDetentChanged = _ref.onSheetDetentChanged;
  var route = descriptor.route,
    navigation = descriptor.navigation,
    options = descriptor.options,
    render = descriptor.render;
  var animation = options.animation,
    animationMatchesGesture = options.animationMatchesGesture,
    _options$presentation = options.presentation,
    presentation = _options$presentation === void 0 ? isPresentationModal ? 'modal' : 'card' : _options$presentation,
    fullScreenGestureEnabled = options.fullScreenGestureEnabled;
  var animationDuration = options.animationDuration,
    _options$animationTyp = options.animationTypeForReplace,
    animationTypeForReplace = _options$animationTyp === void 0 ? 'push' : _options$animationTyp,
    _options$fullScreenGe = options.fullScreenGestureShadowEnabled,
    fullScreenGestureShadowEnabled = _options$fullScreenGe === void 0 ? true : _options$fullScreenGe,
    gestureEnabled = options.gestureEnabled,
    _options$gestureDirec = options.gestureDirection,
    gestureDirection = _options$gestureDirec === void 0 ? presentation === 'card' ? 'horizontal' : 'vertical' : _options$gestureDirec,
    gestureResponseDistance = options.gestureResponseDistance,
    header = options.header,
    headerBackButtonMenuEnabled = options.headerBackButtonMenuEnabled,
    headerShown = options.headerShown,
    headerBackground = options.headerBackground,
    headerTransparent = options.headerTransparent,
    autoHideHomeIndicator = options.autoHideHomeIndicator,
    keyboardHandlingEnabled = options.keyboardHandlingEnabled,
    navigationBarColor = options.navigationBarColor,
    navigationBarTranslucent = options.navigationBarTranslucent,
    navigationBarHidden = options.navigationBarHidden,
    orientation = options.orientation,
    _options$sheetAllowed = options.sheetAllowedDetents,
    sheetAllowedDetents = _options$sheetAllowed === void 0 ? [1.0] : _options$sheetAllowed,
    _options$sheetLargest = options.sheetLargestUndimmedDetentIndex,
    sheetLargestUndimmedDetentIndex = _options$sheetLargest === void 0 ? -1 : _options$sheetLargest,
    _options$sheetGrabber = options.sheetGrabberVisible,
    sheetGrabberVisible = _options$sheetGrabber === void 0 ? false : _options$sheetGrabber,
    _options$sheetCornerR = options.sheetCornerRadius,
    sheetCornerRadius = _options$sheetCornerR === void 0 ? -1.0 : _options$sheetCornerR,
    _options$sheetElevati = options.sheetElevation,
    sheetElevation = _options$sheetElevati === void 0 ? 24 : _options$sheetElevati,
    _options$sheetExpands = options.sheetExpandsWhenScrolledToEdge,
    sheetExpandsWhenScrolledToEdge = _options$sheetExpands === void 0 ? true : _options$sheetExpands,
    _options$sheetInitial = options.sheetInitialDetentIndex,
    sheetInitialDetentIndex = _options$sheetInitial === void 0 ? 0 : _options$sheetInitial,
    statusBarAnimation = options.statusBarAnimation,
    statusBarHidden = options.statusBarHidden,
    statusBarStyle = options.statusBarStyle,
    statusBarTranslucent = options.statusBarTranslucent,
    statusBarBackgroundColor = options.statusBarBackgroundColor,
    unstable_sheetFooter = options.unstable_sheetFooter,
    freezeOnBlur = options.freezeOnBlur,
    contentStyle = options.contentStyle;
  if (gestureDirection === 'vertical' && _reactNative.Platform.OS === 'ios') {
    if (fullScreenGestureEnabled === undefined) {
      fullScreenGestureEnabled = true;
    }
    if (animationMatchesGesture === undefined) {
      animationMatchesGesture = true;
    }
    if (animation === undefined) {
      animation = 'slide_from_bottom';
    }
  }
  var nextGestureDirection = nextDescriptor == null ? void 0 : nextDescriptor.options.gestureDirection;
  var gestureDirectionOverride = nextGestureDirection != null ? nextGestureDirection : gestureDirection;
  if (index === 0) {
    presentation = 'card';
  }
  var _useTheme = (0, _native.useTheme)(),
    colors = _useTheme.colors;
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var isModal = presentation === 'modal' || presentation === 'formSheet';
  var isIPhone = _reactNative.Platform.OS === 'ios' && !(_reactNative.Platform.isPad || _reactNative.Platform.isTV);
  var isParentHeaderShown = React.useContext(_elements.HeaderShownContext);
  var parentHeaderHeight = React.useContext(_elements.HeaderHeightContext);
  var parentHeaderBack = React.useContext(_elements.HeaderBackContext);
  var isLandscape = (0, _elements.useFrameSize)(function (frame) {
    return frame.width > frame.height;
  });
  var topInset = isParentHeaderShown || _reactNative.Platform.OS === 'ios' && isModal || isIPhone && isLandscape ? 0 : insets.top;
  var defaultHeaderHeight = (0, _elements.useFrameSize)(function (frame) {
    return _reactNative.Platform.select({
      android: ANDROID_DEFAULT_HEADER_HEIGHT + topInset,
      default: (0, _elements.getDefaultHeaderHeight)(frame, isModal, topInset)
    });
  });
  var _usePreventRemoveCont = (0, _native.usePreventRemoveContext)(),
    preventedRoutes = _usePreventRemoveCont.preventedRoutes;
  var _React$useState = React.useState(defaultHeaderHeight),
    _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
    headerHeight = _React$useState2[0],
    setHeaderHeight = _React$useState2[1];
  var setHeaderHeightDebounced = React.useCallback((0, _debounce.debounce)(setHeaderHeight, 100), []);
  var hasCustomHeader = header != null;
  var headerHeightCorrectionOffset = 0;
  if (_reactNative.Platform.OS === 'android' && !hasCustomHeader) {
    var _StatusBar$currentHei;
    var statusBarHeight = (_StatusBar$currentHei = _reactNative.StatusBar.currentHeight) != null ? _StatusBar$currentHei : 0;
    headerHeightCorrectionOffset = -statusBarHeight + topInset;
  }
  var rawAnimatedHeaderHeight = (0, _reactNative.useAnimatedValue)(defaultHeaderHeight);
  var animatedHeaderHeight = React.useMemo(function () {
    return _reactNative.Animated.add(rawAnimatedHeaderHeight, headerHeightCorrectionOffset);
  }, [headerHeightCorrectionOffset, rawAnimatedHeaderHeight]);
  var headerTopInsetEnabled = typeof statusBarTranslucent === 'boolean' ? statusBarTranslucent : topInset !== 0;
  var canGoBack = previousDescriptor != null || parentHeaderBack != null;
  var backTitle = previousDescriptor ? (0, _elements.getHeaderTitle)(previousDescriptor.options, previousDescriptor.route.name) : parentHeaderBack == null ? void 0 : parentHeaderBack.title;
  var headerBack = React.useMemo(function () {
    if (canGoBack) {
      return {
        href: undefined,
        title: backTitle
      };
    }
    return undefined;
  }, [canGoBack, backTitle]);
  var isRemovePrevented = (_preventedRoutes$rout = preventedRoutes[route.key]) == null ? void 0 : _preventedRoutes$rout.preventRemove;
  var headerConfig = (0, _useHeaderConfigProps.useHeaderConfigProps)(Object.assign({}, options, {
    route: route,
    headerBackButtonMenuEnabled: isRemovePrevented !== undefined ? !isRemovePrevented : headerBackButtonMenuEnabled,
    headerBackTitle: options.headerBackTitle !== undefined ? options.headerBackTitle : undefined,
    headerHeight: headerHeight,
    headerShown: header !== undefined ? false : headerShown,
    headerTopInsetEnabled: headerTopInsetEnabled,
    headerBack: headerBack
  }));
  return (0, _jsxRuntime.jsx)(_native.NavigationContext.Provider, {
    value: navigation,
    children: (0, _jsxRuntime.jsx)(_native.NavigationRouteContext.Provider, {
      value: route,
      children: (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStackItem, {
        screenId: route.key,
        activityState: isPreloaded ? 0 : 2,
        style: _reactNative.StyleSheet.absoluteFill,
        "aria-hidden": !focused,
        customAnimationOnSwipe: animationMatchesGesture,
        fullScreenSwipeEnabled: fullScreenGestureEnabled,
        fullScreenSwipeShadowEnabled: fullScreenGestureShadowEnabled,
        freezeOnBlur: freezeOnBlur,
        gestureEnabled: _reactNative.Platform.OS === 'android' ? false : gestureEnabled,
        homeIndicatorHidden: autoHideHomeIndicator,
        hideKeyboardOnSwipe: keyboardHandlingEnabled,
        navigationBarColor: navigationBarColor,
        navigationBarTranslucent: navigationBarTranslucent,
        navigationBarHidden: navigationBarHidden,
        replaceAnimation: animationTypeForReplace,
        stackPresentation: presentation === 'card' ? 'push' : presentation,
        stackAnimation: animation,
        screenOrientation: orientation,
        sheetAllowedDetents: sheetAllowedDetents,
        sheetLargestUndimmedDetentIndex: sheetLargestUndimmedDetentIndex,
        sheetGrabberVisible: sheetGrabberVisible,
        sheetInitialDetentIndex: sheetInitialDetentIndex,
        sheetCornerRadius: sheetCornerRadius,
        sheetElevation: sheetElevation,
        sheetExpandsWhenScrolledToEdge: sheetExpandsWhenScrolledToEdge,
        statusBarAnimation: statusBarAnimation,
        statusBarHidden: statusBarHidden,
        statusBarStyle: statusBarStyle,
        statusBarColor: statusBarBackgroundColor,
        statusBarTranslucent: statusBarTranslucent,
        swipeDirection: gestureDirectionOverride,
        transitionDuration: animationDuration,
        onWillAppear: onWillAppear,
        onWillDisappear: onWillDisappear,
        onAppear: onAppear,
        onDisappear: onDisappear,
        onDismissed: onDismissed,
        onGestureCancel: onGestureCancel,
        onSheetDetentChanged: onSheetDetentChanged,
        gestureResponseDistance: gestureResponseDistance,
        nativeBackButtonDismissalEnabled: false,
        onHeaderBackButtonClicked: onHeaderBackButtonClicked,
        preventNativeDismiss: isRemovePrevented,
        onNativeDismissCancelled: onNativeDismissCancelled,
        onHeaderHeightChange: _reactNative.Animated.event([{
          nativeEvent: {
            headerHeight: rawAnimatedHeaderHeight
          }
        }], {
          useNativeDriver: useNativeDriver,
          listener: function listener(e) {
            if (hasCustomHeader) {
              return;
            }
            if (_reactNative.Platform.OS === 'android' && (options.headerBackground != null || options.headerTransparent)) {
              setHeaderHeight(ANDROID_DEFAULT_HEADER_HEIGHT + topInset);
              return;
            }
            if (e.nativeEvent && typeof e.nativeEvent === 'object' && 'headerHeight' in e.nativeEvent && typeof e.nativeEvent.headerHeight === 'number') {
              var _headerHeight = e.nativeEvent.headerHeight + headerHeightCorrectionOffset;
              var doesHeaderAnimate = _reactNative.Platform.OS === 'ios' && (options.headerLargeTitle || options.headerSearchBarOptions);
              if (doesHeaderAnimate) {
                setHeaderHeightDebounced(_headerHeight);
              } else {
                setHeaderHeight(_headerHeight);
              }
            }
          }
        }),
        contentStyle: [presentation !== 'transparentModal' && presentation !== 'containedTransparentModal' && {
          backgroundColor: colors.background
        }, contentStyle],
        headerConfig: headerConfig,
        unstable_sheetFooter: unstable_sheetFooter,
        shouldFreeze: shouldFreeze,
        children: (0, _jsxRuntime.jsx)(_useAnimatedHeaderHeight.AnimatedHeaderHeightContext.Provider, {
          value: animatedHeaderHeight,
          children: (0, _jsxRuntime.jsxs)(_elements.HeaderHeightContext.Provider, {
            value: headerShown !== false ? headerHeight : parentHeaderHeight != null ? parentHeaderHeight : 0,
            children: [headerBackground != null ? (0, _jsxRuntime.jsx)(_reactNative.View, {
              style: [styles.background, headerTransparent ? styles.translucent : null, {
                height: headerHeight
              }],
              children: headerBackground()
            }) : null, header != null && headerShown !== false ? (0, _jsxRuntime.jsx)(_reactNative.View, {
              onLayout: function onLayout(e) {
                var headerHeight = e.nativeEvent.layout.height;
                setHeaderHeight(headerHeight);
                rawAnimatedHeaderHeight.setValue(headerHeight);
              },
              style: [styles.header, headerTransparent ? styles.absolute : null],
              children: header({
                back: headerBack,
                options: options,
                route: route,
                navigation: navigation
              })
            }) : null, (0, _jsxRuntime.jsx)(_elements.HeaderShownContext.Provider, {
              value: isParentHeaderShown || headerShown !== false,
              children: (0, _jsxRuntime.jsx)(_elements.HeaderBackContext.Provider, {
                value: headerBack,
                children: render()
              })
            })]
          })
        })
      }, route.key)
    })
  });
};
function NativeStackView(_ref2) {
  var state = _ref2.state,
    navigation = _ref2.navigation,
    descriptors = _ref2.descriptors,
    describe = _ref2.describe;
  var _useDismissedRouteErr = (0, _useDismissedRouteError.useDismissedRouteError)(state),
    setNextDismissedKey = _useDismissedRouteErr.setNextDismissedKey;
  (0, _useInvalidPreventRemoveError.useInvalidPreventRemoveError)(descriptors);
  var modalRouteKeys = (0, _getModalRoutesKeys.getModalRouteKeys)(state.routes, descriptors);
  var preloadedDescriptors = state.preloadedRoutes.reduce(function (acc, route) {
    acc[route.key] = acc[route.key] || describe(route, true);
    return acc;
  }, {});
  return (0, _jsxRuntime.jsx)(_elements.SafeAreaProviderCompat, {
    children: (0, _jsxRuntime.jsx)(_reactNativeScreens.ScreenStack, {
      style: styles.container,
      children: state.routes.concat(state.preloadedRoutes).map(function (route, index) {
        var _descriptors$route$ke, _state$routes, _state$routes2;
        var descriptor = (_descriptors$route$ke = descriptors[route.key]) != null ? _descriptors$route$ke : preloadedDescriptors[route.key];
        var isFocused = state.index === index;
        var isBelowFocused = state.index - 1 === index;
        var previousKey = (_state$routes = state.routes[index - 1]) == null ? void 0 : _state$routes.key;
        var nextKey = (_state$routes2 = state.routes[index + 1]) == null ? void 0 : _state$routes2.key;
        var previousDescriptor = previousKey ? descriptors[previousKey] : undefined;
        var nextDescriptor = nextKey ? descriptors[nextKey] : undefined;
        var isModal = modalRouteKeys.includes(route.key);
        var isPreloaded = preloadedDescriptors[route.key] !== undefined && descriptors[route.key] === undefined;
        var shouldFreeze = isFabric() ? !isPreloaded && !isFocused && !isBelowFocused : !isPreloaded && !isFocused;
        return (0, _jsxRuntime.jsx)(SceneView, {
          index: index,
          focused: isFocused,
          shouldFreeze: shouldFreeze,
          descriptor: descriptor,
          previousDescriptor: previousDescriptor,
          nextDescriptor: nextDescriptor,
          isPresentationModal: isModal,
          isPreloaded: isPreloaded,
          onWillDisappear: function onWillDisappear() {
            navigation.emit({
              type: 'transitionStart',
              data: {
                closing: true
              },
              target: route.key
            });
          },
          onWillAppear: function onWillAppear() {
            navigation.emit({
              type: 'transitionStart',
              data: {
                closing: false
              },
              target: route.key
            });
          },
          onAppear: function onAppear() {
            navigation.emit({
              type: 'transitionEnd',
              data: {
                closing: false
              },
              target: route.key
            });
          },
          onDisappear: function onDisappear() {
            navigation.emit({
              type: 'transitionEnd',
              data: {
                closing: true
              },
              target: route.key
            });
          },
          onDismissed: function onDismissed(event) {
            navigation.dispatch(Object.assign({}, _native.StackActions.pop(event.nativeEvent.dismissCount), {
              source: route.key,
              target: state.key
            }));
            setNextDismissedKey(route.key);
          },
          onHeaderBackButtonClicked: function onHeaderBackButtonClicked() {
            navigation.dispatch(Object.assign({}, _native.StackActions.pop(), {
              source: route.key,
              target: state.key
            }));
          },
          onNativeDismissCancelled: function onNativeDismissCancelled(event) {
            navigation.dispatch(Object.assign({}, _native.StackActions.pop(event.nativeEvent.dismissCount), {
              source: route.key,
              target: state.key
            }));
          },
          onGestureCancel: function onGestureCancel() {
            navigation.emit({
              type: 'gestureCancel',
              target: route.key
            });
          },
          onSheetDetentChanged: function onSheetDetentChanged(event) {
            navigation.emit({
              type: 'sheetDetentChange',
              target: route.key,
              data: {
                index: event.nativeEvent.index,
                stable: event.nativeEvent.isStable
              }
            });
          }
        }, route.key);
      })
    })
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  header: {
    zIndex: 1
  },
  absolute: {
    position: 'absolute',
    top: 0,
    start: 0,
    end: 0
  },
  translucent: {
    position: 'absolute',
    top: 0,
    start: 0,
    end: 0,
    zIndex: 1,
    elevation: 1
  },
  background: {
    overflow: 'hidden'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,