b998e16bb7db577cb7e35d0af409813f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeImagePicker = require("react-native-image-picker");
var _geolocation = _interopRequireDefault(require("@react-native-community/geolocation"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var CameraComponent = function CameraComponent(_ref) {
  var onPhotoTaken = _ref.onPhotoTaken,
    onClose = _ref.onClose;
  (0, _react.useEffect)(function () {
    var openCamera = function () {
      var _ref2 = (0, _asyncToGenerator2.default)(function* () {
        if (_reactNative.Platform.OS === 'android') {
          var granted = yield _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA);
          if (granted !== _reactNative.PermissionsAndroid.RESULTS.GRANTED) {
            _reactNative.Alert.alert('Permissão negada', 'Não será possível usar a câmera');
            onClose && onClose();
            return;
          }
        }
        var coords;
        if (_reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios') {
          var locationGranted = _reactNative.Platform.OS === 'android' ? yield _reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION) : true;
          if (locationGranted === _reactNative.PermissionsAndroid.RESULTS.GRANTED || _reactNative.Platform.OS === 'ios') {
            yield new Promise(function (resolve) {
              _geolocation.default.getCurrentPosition(function (position) {
                coords = {
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude
                };
                resolve();
              }, function (error) {
                console.log('Erro ao pegar localização:', error.message);
                resolve();
              }, {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 1000
              });
            });
          }
        }
        var options = {
          mediaType: 'photo',
          saveToPhotos: true,
          cameraType: 'back'
        };
        (0, _reactNativeImagePicker.launchCamera)(options, function (response) {
          if (response.didCancel) {
            console.log('Usuário cancelou a câmera');
          } else if (response.errorCode) {
            _reactNative.Alert.alert('Erro', response.errorMessage || 'Erro ao acessar a câmera');
          } else if (response.assets && response.assets.length > 0) {
            var asset = response.assets[0];
            if (asset.uri) {
              onPhotoTaken && onPhotoTaken(asset.uri, coords);
            }
          }
          onClose && onClose();
        });
      });
      return function openCamera() {
        return _ref2.apply(this, arguments);
      };
    }();
    openCamera();
  }, []);
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: styles.container
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'transparent'
  }
});
var _default = exports.default = CameraComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,