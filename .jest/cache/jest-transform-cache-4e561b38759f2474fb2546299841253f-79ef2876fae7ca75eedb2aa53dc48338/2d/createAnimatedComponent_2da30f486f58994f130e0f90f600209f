330ea13157bbd35871ec1cb255748788
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
exports.unstable_createAnimatedComponentWithAllowlist = unstable_createAnimatedComponentWithAllowlist;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _createAnimatedPropsHook = _interopRequireDefault(require("../../src/private/animated/createAnimatedPropsHook"));
var _composeStyles = _interopRequireDefault(require("../../src/private/styles/composeStyles"));
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["ref"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function createAnimatedComponent(Component) {
  return unstable_createAnimatedComponentWithAllowlist(Component, null);
}
function unstable_createAnimatedComponentWithAllowlist(Component, allowlist) {
  var useAnimatedProps = (0, _createAnimatedPropsHook.default)(allowlist);
  var AnimatedComponent = function AnimatedComponent(_ref) {
    var forwardedRef = _ref.ref,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
    var _useAnimatedProps = useAnimatedProps(props),
      _useAnimatedProps2 = (0, _slicedToArray2.default)(_useAnimatedProps, 2),
      reducedProps = _useAnimatedProps2[0],
      callbackRef = _useAnimatedProps2[1];
    var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
    var passthroughAnimatedPropExplicitValues = reducedProps.passthroughAnimatedPropExplicitValues,
      style = reducedProps.style;
    var passthroughStyle = passthroughAnimatedPropExplicitValues == null ? void 0 : passthroughAnimatedPropExplicitValues.style;
    var mergedStyle = (0, _react.useMemo)(function () {
      return (0, _composeStyles.default)(style, passthroughStyle);
    }, [passthroughStyle, style]);
    return (0, _jsxRuntime.jsx)(Component, Object.assign({}, reducedProps, passthroughAnimatedPropExplicitValues, {
      style: mergedStyle,
      ref: ref
    }));
  };
  AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;
  return AnimatedComponent;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,