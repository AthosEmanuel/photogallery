{"version":3,"names":["_createAnimatedPropsHook","_interopRequireDefault","require","_composeStyles","_useMergeRefs","_react","_interopRequireWildcard","React","_jsxRuntime","_excluded","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","default","has","get","set","_t","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","createAnimatedComponent","Component","unstable_createAnimatedComponentWithAllowlist","allowlist","useAnimatedProps","createAnimatedPropsHook","AnimatedComponent","_ref","forwardedRef","ref","props","_objectWithoutProperties2","_useAnimatedProps","_useAnimatedProps2","_slicedToArray2","reducedProps","callbackRef","useMergeRefs","passthroughAnimatedPropExplicitValues","style","passthroughStyle","mergedStyle","useMemo","composeStyles","jsx","assign","displayName"],"sources":["createAnimatedComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type AnimatedAddition from './nodes/AnimatedAddition';\nimport type AnimatedDiffClamp from './nodes/AnimatedDiffClamp';\nimport type AnimatedDivision from './nodes/AnimatedDivision';\nimport type AnimatedInterpolation from './nodes/AnimatedInterpolation';\nimport type AnimatedModulo from './nodes/AnimatedModulo';\nimport type AnimatedMultiplication from './nodes/AnimatedMultiplication';\nimport type AnimatedNode from './nodes/AnimatedNode';\nimport type {AnimatedPropsAllowlist} from './nodes/AnimatedProps';\nimport type AnimatedSubtraction from './nodes/AnimatedSubtraction';\nimport type AnimatedValue from './nodes/AnimatedValue';\n\nimport createAnimatedPropsHook from '../../src/private/animated/createAnimatedPropsHook';\nimport composeStyles from '../../src/private/styles/composeStyles';\nimport {type ViewProps} from '../Components/View/ViewPropTypes';\nimport useMergeRefs from '../Utilities/useMergeRefs';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype Nullable = void | null;\ntype Primitive = string | number | boolean | symbol | void;\ntype Builtin = (...$ReadOnlyArray<empty>) => mixed | Date | Error | RegExp;\n\nexport type WithAnimatedValue<+T> = T extends Builtin | Nullable\n  ? T\n  : T extends Primitive\n    ?\n        | T\n        | AnimatedNode\n        | AnimatedAddition\n        | AnimatedSubtraction\n        | AnimatedDivision\n        | AnimatedMultiplication\n        | AnimatedModulo\n        | AnimatedDiffClamp\n        | AnimatedValue\n        | AnimatedInterpolation<number | string>\n        | AnimatedInterpolation<number>\n        | AnimatedInterpolation<string>\n    : T extends $ReadOnlyArray<infer P>\n      ? $ReadOnlyArray<WithAnimatedValue<P>>\n      : T extends {...}\n        ? {+[K in keyof T]: WithAnimatedValue<T[K]>}\n        : T;\n\ntype NonAnimatedProps =\n  | 'ref'\n  | 'innerViewRef'\n  | 'scrollViewRef'\n  | 'testID'\n  | 'disabled'\n  | 'accessibilityLabel';\ntype PassThroughProps = $ReadOnly<{\n  passthroughAnimatedPropExplicitValues?: ViewProps | null,\n}>;\n\nexport type AnimatedProps<Props: {...}> = {\n  [K in keyof Props]: K extends NonAnimatedProps\n    ? Props[K]\n    : WithAnimatedValue<Props[K]>,\n} & PassThroughProps;\n\nexport type AnimatedBaseProps<Props: {...}> = {\n  [K in keyof Props]: K extends NonAnimatedProps\n    ? Props[K]\n    : WithAnimatedValue<Props[K]>,\n};\n\nexport type AnimatedComponentType<Props: {...}, +Instance = mixed> = component(\n  ref?: React.RefSetter<Instance>,\n  ...AnimatedProps<Props>\n);\n\nexport default function createAnimatedComponent<\n  TInstance: React.ComponentType<any>,\n>(\n  Component: TInstance,\n): AnimatedComponentType<\n  $ReadOnly<React.ElementProps<TInstance>>,\n  React.ElementRef<TInstance>,\n> {\n  return unstable_createAnimatedComponentWithAllowlist(Component, null);\n}\n\nexport function unstable_createAnimatedComponentWithAllowlist<\n  TProps: {...},\n  TInstance: React.ComponentType<TProps>,\n>(\n  Component: TInstance,\n  allowlist: ?AnimatedPropsAllowlist,\n): AnimatedComponentType<TProps, React.ElementRef<TInstance>> {\n  const useAnimatedProps = createAnimatedPropsHook(allowlist);\n\n  const AnimatedComponent: AnimatedComponentType<\n    TProps,\n    React.ElementRef<TInstance>,\n  > = ({\n    ref: forwardedRef,\n    ...props\n  }: {\n    ref?: React.RefSetter<React.ElementRef<TInstance>>,\n    ...AnimatedProps<TProps>,\n  }) => {\n    const [reducedProps, callbackRef] = useAnimatedProps<\n      TProps,\n      React.ElementRef<TInstance>,\n    >(props);\n    const ref = useMergeRefs<React.ElementRef<TInstance>>(\n      callbackRef,\n      forwardedRef,\n    );\n\n    // Some components require explicit passthrough values for animation\n    // to work properly. For example, if an animated component is\n    // transformed and Pressable, onPress will not work after transform\n    // without these passthrough values.\n    // $FlowFixMe[prop-missing]\n    const {passthroughAnimatedPropExplicitValues, style} = reducedProps;\n    const passthroughStyle = passthroughAnimatedPropExplicitValues?.style;\n    const mergedStyle = useMemo(\n      () => composeStyles(style, passthroughStyle),\n      [passthroughStyle, style],\n    );\n\n    // NOTE: It is important that `passthroughAnimatedPropExplicitValues` is\n    // spread after `reducedProps` but before `style`.\n    return (\n      <Component\n        {...reducedProps}\n        {...passthroughAnimatedPropExplicitValues}\n        style={mergedStyle}\n        ref={ref}\n      />\n    );\n  };\n\n  AnimatedComponent.displayName = `Animated(${\n    Component.displayName || 'Anonymous'\n  })`;\n\n  return AnimatedComponent;\n}\n"],"mappings":"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","ignoreList":[]}