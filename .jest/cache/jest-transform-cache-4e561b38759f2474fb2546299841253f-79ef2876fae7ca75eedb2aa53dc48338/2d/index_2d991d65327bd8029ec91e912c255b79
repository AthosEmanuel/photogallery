100a16a62e04705c0a605a8ad1607d84
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _native = require("@react-navigation/native");
var _Ionicons = _interopRequireDefault(require("react-native-vector-icons/Ionicons"));
var _components = require("../../components/");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var STORAGE_KEY = '@photos';
var HomeScreen = function HomeScreen() {
  var systemColorScheme = (0, _reactNative.useColorScheme)();
  var _useState = (0, _react.useState)(systemColorScheme === 'dark'),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isDarkMode = _useState2[0],
    setIsDarkMode = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    showCamera = _useState4[0],
    setShowCamera = _useState4[1];
  var _useState5 = (0, _react.useState)([]),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    photos = _useState6[0],
    setPhotos = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    searchText = _useState8[0],
    setSearchText = _useState8[1];
  var navigation = (0, _native.useNavigation)();
  var scaleAnim = (0, _react.useRef)(new _reactNative.Animated.Value(1)).current;
  var animateCameraButton = function animateCameraButton() {
    _reactNative.Animated.sequence([_reactNative.Animated.timing(scaleAnim, {
      toValue: 0.8,
      duration: 100,
      useNativeDriver: true
    }), _reactNative.Animated.timing(scaleAnim, {
      toValue: 1,
      duration: 100,
      useNativeDriver: true
    })]).start();
  };
  var handleCameraPress = function handleCameraPress() {
    animateCameraButton();
    setShowCamera(true);
  };
  (0, _react.useEffect)(function () {
    var loadPhotos = function () {
      var _ref = (0, _asyncToGenerator2.default)(function* () {
        try {
          var json = yield _asyncStorage.default.getItem(STORAGE_KEY);
          if (json) setPhotos(JSON.parse(json));
        } catch (error) {
          console.error('Erro ao carregar fotos do AsyncStorage:', error);
        }
      });
      return function loadPhotos() {
        return _ref.apply(this, arguments);
      };
    }();
    loadPhotos();
  }, []);
  var savePhotos = function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (newPhotos) {
      try {
        yield _asyncStorage.default.setItem(STORAGE_KEY, JSON.stringify(newPhotos));
      } catch (error) {
        console.error('Erro ao salvar fotos no AsyncStorage:', error);
      }
    });
    return function savePhotos(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  var handlePhotoTaken = function handlePhotoTaken(uri, coords) {
    var now = new Date();
    var day = String(now.getDate()).padStart(2, '0');
    var month = String(now.getMonth() + 1).padStart(2, '0');
    var year = now.getFullYear();
    var formattedDate = `${day}/${month}/${year}`;
    var newPhoto = {
      uri: uri,
      date: formattedDate,
      coords: coords
    };
    var updatedPhotos = [newPhoto].concat((0, _toConsumableArray2.default)(photos));
    setPhotos(updatedPhotos);
    savePhotos(updatedPhotos);
    setShowCamera(false);
  };
  var filteredPhotos = (0, _react.useMemo)(function () {
    return photos.filter(function (photo) {
      return photo.date.toLowerCase().includes(searchText.toLowerCase());
    });
  }, [photos, searchText]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: [styles.container, {
      backgroundColor: isDarkMode ? '#050A30' : '#fff'
    }],
    children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.topBar,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Animated.View, {
        style: {
          transform: [{
            scale: scaleAnim
          }]
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          testID: "camera-button",
          onPress: handleCameraPress,
          children: (0, _jsxRuntime.jsx)(_Ionicons.default, {
            name: "camera",
            size: 40,
            color: isDarkMode ? 'white' : 'black'
          })
        })
      }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
        testID: "theme-button",
        onPress: function onPress() {
          return setIsDarkMode(function (prev) {
            return !prev;
          });
        },
        style: styles.themeButton,
        children: (0, _jsxRuntime.jsx)(_Ionicons.default, {
          name: isDarkMode ? 'sunny' : 'moon',
          size: 35,
          color: isDarkMode ? 'yellow' : 'black'
        })
      })]
    }), showCamera && (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _reactNative.StyleSheet.absoluteFill,
      children: (0, _jsxRuntime.jsx)(_components.CameraComponent, {
        onPhotoTaken: handlePhotoTaken,
        onClose: function onClose() {
          return setShowCamera(false);
        }
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        width: '90%',
        marginVertical: 30
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        placeholder: "Buscar por data...",
        placeholderTextColor: isDarkMode ? '#ccc' : '#888',
        style: {
          backgroundColor: isDarkMode ? '#1A1A40' : '#f0f0f0',
          color: isDarkMode ? '#fff' : '#000',
          padding: 10,
          borderRadius: 8
        },
        value: searchText,
        onChangeText: setSearchText
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
      data: filteredPhotos,
      keyExtractor: function keyExtractor(item, index) {
        return index.toString();
      },
      numColumns: 2,
      contentContainerStyle: {
        paddingHorizontal: 2
      },
      renderItem: function renderItem(_ref3) {
        var item = _ref3.item;
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: styles.photoContainer,
          children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
            onPress: function onPress() {
              return navigation.navigate('Detalhes', {
                uri: item.uri,
                date: item.date,
                coords: item.coords
              });
            },
            children: (0, _jsxRuntime.jsx)(_reactNative.Image, {
              source: {
                uri: item.uri
              },
              style: styles.image
            })
          })
        });
      }
    })]
  });
};
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'flex-start',
    paddingTop: 50
  },
  topBar: {
    flexDirection: 'row',
    alignItems: 'center',
    width: '100%',
    paddingHorizontal: 20,
    justifyContent: 'space-between'
  },
  themeButton: {},
  photoContainer: {
    flexBasis: '48%',
    margin: 2,
    alignItems: 'center'
  },
  image: {
    width: '100%',
    aspectRatio: 1,
    borderRadius: 10
  },
  absoluteFill: {
    position: 'absolute',
    top: 0,
    left: 0,
    bottom: 0,
    right: 0
  }
});
var _default = exports.default = HomeScreen;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfYXN5bmNTdG9yYWdlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9uYXRpdmUiLCJfSW9uaWNvbnMiLCJfY29tcG9uZW50cyIsIl9qc3hSdW50aW1lIiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJTVE9SQUdFX0tFWSIsIkhvbWVTY3JlZW4iLCJzeXN0ZW1Db2xvclNjaGVtZSIsInVzZUNvbG9yU2NoZW1lIiwiX3VzZVN0YXRlIiwidXNlU3RhdGUiLCJfdXNlU3RhdGUyIiwiX3NsaWNlZFRvQXJyYXkyIiwiaXNEYXJrTW9kZSIsInNldElzRGFya01vZGUiLCJfdXNlU3RhdGUzIiwiX3VzZVN0YXRlNCIsInNob3dDYW1lcmEiLCJzZXRTaG93Q2FtZXJhIiwiX3VzZVN0YXRlNSIsIl91c2VTdGF0ZTYiLCJwaG90b3MiLCJzZXRQaG90b3MiLCJfdXNlU3RhdGU3IiwiX3VzZVN0YXRlOCIsInNlYXJjaFRleHQiLCJzZXRTZWFyY2hUZXh0IiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRpb24iLCJzY2FsZUFuaW0iLCJ1c2VSZWYiLCJBbmltYXRlZCIsIlZhbHVlIiwiY3VycmVudCIsImFuaW1hdGVDYW1lcmFCdXR0b24iLCJzZXF1ZW5jZSIsInRpbWluZyIsInRvVmFsdWUiLCJkdXJhdGlvbiIsInVzZU5hdGl2ZURyaXZlciIsInN0YXJ0IiwiaGFuZGxlQ2FtZXJhUHJlc3MiLCJ1c2VFZmZlY3QiLCJsb2FkUGhvdG9zIiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImpzb24iLCJBc3luY1N0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJjb25zb2xlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzYXZlUGhvdG9zIiwiX3JlZjIiLCJuZXdQaG90b3MiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiX3giLCJoYW5kbGVQaG90b1Rha2VuIiwidXJpIiwiY29vcmRzIiwibm93IiwiRGF0ZSIsImRheSIsIlN0cmluZyIsImdldERhdGUiLCJwYWRTdGFydCIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJmb3JtYXR0ZWREYXRlIiwibmV3UGhvdG8iLCJkYXRlIiwidXBkYXRlZFBob3RvcyIsImNvbmNhdCIsIl90b0NvbnN1bWFibGVBcnJheTIiLCJmaWx0ZXJlZFBob3RvcyIsInVzZU1lbW8iLCJmaWx0ZXIiLCJwaG90byIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJqc3hzIiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiYmFja2dyb3VuZENvbG9yIiwiY2hpbGRyZW4iLCJ0b3BCYXIiLCJqc3giLCJ0cmFuc2Zvcm0iLCJzY2FsZSIsIlRvdWNoYWJsZU9wYWNpdHkiLCJ0ZXN0SUQiLCJvblByZXNzIiwibmFtZSIsInNpemUiLCJjb2xvciIsInByZXYiLCJ0aGVtZUJ1dHRvbiIsIlN0eWxlU2hlZXQiLCJhYnNvbHV0ZUZpbGwiLCJDYW1lcmFDb21wb25lbnQiLCJvblBob3RvVGFrZW4iLCJvbkNsb3NlIiwid2lkdGgiLCJtYXJnaW5WZXJ0aWNhbCIsIlRleHRJbnB1dCIsInBsYWNlaG9sZGVyIiwicGxhY2Vob2xkZXJUZXh0Q29sb3IiLCJwYWRkaW5nIiwiYm9yZGVyUmFkaXVzIiwidmFsdWUiLCJvbkNoYW5nZVRleHQiLCJGbGF0TGlzdCIsImRhdGEiLCJrZXlFeHRyYWN0b3IiLCJpdGVtIiwiaW5kZXgiLCJ0b1N0cmluZyIsIm51bUNvbHVtbnMiLCJjb250ZW50Q29udGFpbmVyU3R5bGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInJlbmRlckl0ZW0iLCJfcmVmMyIsInBob3RvQ29udGFpbmVyIiwibmF2aWdhdGUiLCJJbWFnZSIsInNvdXJjZSIsImltYWdlIiwiY3JlYXRlIiwiZmxleCIsImFsaWduSXRlbXMiLCJqdXN0aWZ5Q29udGVudCIsInBhZGRpbmdUb3AiLCJmbGV4RGlyZWN0aW9uIiwiZmxleEJhc2lzIiwibWFyZ2luIiwiYXNwZWN0UmF0aW8iLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJib3R0b20iLCJyaWdodCIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImluZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgQW5pbWF0ZWQsXG4gIEZsYXRMaXN0LFxuICBJbWFnZSxcbiAgU3R5bGVTaGVldCxcbiAgVGV4dElucHV0LFxuICBUb3VjaGFibGVPcGFjaXR5LFxuICBWaWV3LFxuICB1c2VDb2xvclNjaGVtZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IEFzeW5jU3RvcmFnZSBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZSc7XG5pbXBvcnQgeyB1c2VOYXZpZ2F0aW9uIH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcbmltcG9ydCB7IE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3AgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xuaW1wb3J0IElvbmljb25zIGZyb20gJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvSW9uaWNvbnMnO1xuaW1wb3J0IHsgUm9vdFN0YWNrUGFyYW1MaXN0IH0gZnJvbSAnLi4vLi4vLi4vQXBwJztcbmltcG9ydCB7IENhbWVyYUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvJztcblxudHlwZSBIb21lU2NyZWVuUHJvcCA9IE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8Um9vdFN0YWNrUGFyYW1MaXN0LCAnR2FsZXJpYSc+O1xuXG5pbnRlcmZhY2UgUGhvdG9EYXRhIHtcbiAgdXJpOiBzdHJpbmc7XG4gIGRhdGU6IHN0cmluZztcbiAgY29vcmRzPzogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9O1xufVxuXG5jb25zdCBTVE9SQUdFX0tFWSA9ICdAcGhvdG9zJztcblxuY29uc3QgSG9tZVNjcmVlbjogUmVhY3QuRkMgPSAoKSA9PiB7XG4gIGNvbnN0IHN5c3RlbUNvbG9yU2NoZW1lID0gdXNlQ29sb3JTY2hlbWUoKTtcbiAgY29uc3QgW2lzRGFya01vZGUsIHNldElzRGFya01vZGVdID0gdXNlU3RhdGUoc3lzdGVtQ29sb3JTY2hlbWUgPT09ICdkYXJrJyk7XG5cbiAgY29uc3QgW3Nob3dDYW1lcmEsIHNldFNob3dDYW1lcmFdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcGhvdG9zLCBzZXRQaG90b3NdID0gdXNlU3RhdGU8UGhvdG9EYXRhW10+KFtdKTtcbiAgY29uc3QgW3NlYXJjaFRleHQsIHNldFNlYXJjaFRleHRdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPEhvbWVTY3JlZW5Qcm9wPigpO1xuXG4gIC8vIEFuaW1hY2FvIGRvIGJvdMOjbyBkZSBjYW1lcmFcbiAgY29uc3Qgc2NhbGVBbmltID0gdXNlUmVmKG5ldyBBbmltYXRlZC5WYWx1ZSgxKSkuY3VycmVudDtcblxuICBjb25zdCBhbmltYXRlQ2FtZXJhQnV0dG9uID0gKCkgPT4ge1xuICAgIEFuaW1hdGVkLnNlcXVlbmNlKFtcbiAgICAgIEFuaW1hdGVkLnRpbWluZyhzY2FsZUFuaW0sIHtcbiAgICAgICAgdG9WYWx1ZTogMC44LFxuICAgICAgICBkdXJhdGlvbjogMTAwLFxuICAgICAgICB1c2VOYXRpdmVEcml2ZXI6IHRydWUsXG4gICAgICB9KSxcbiAgICAgIEFuaW1hdGVkLnRpbWluZyhzY2FsZUFuaW0sIHtcbiAgICAgICAgdG9WYWx1ZTogMSxcbiAgICAgICAgZHVyYXRpb246IDEwMCxcbiAgICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgICAgfSksXG4gICAgXSkuc3RhcnQoKTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVDYW1lcmFQcmVzcyA9ICgpID0+IHtcbiAgICBhbmltYXRlQ2FtZXJhQnV0dG9uKCk7XG4gICAgc2V0U2hvd0NhbWVyYSh0cnVlKTtcbiAgfTtcblxuICAvLyBDYXJyZWdhIGZvdG9zIGRvIEFzeW5jU3RvcmFnZVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGxvYWRQaG90b3MgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgQXN5bmNTdG9yYWdlLmdldEl0ZW0oU1RPUkFHRV9LRVkpO1xuICAgICAgICBpZiAoanNvbikgc2V0UGhvdG9zKEpTT04ucGFyc2UoanNvbikpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJybyBhbyBjYXJyZWdhciBmb3RvcyBkbyBBc3luY1N0b3JhZ2U6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH07XG4gICAgbG9hZFBob3RvcygpO1xuICB9LCBbXSk7XG5cbiAgLy8gU2FsdmEgZm90b3Mgbm8gQXN5bmNTdG9yYWdlXG4gIGNvbnN0IHNhdmVQaG90b3MgPSBhc3luYyAobmV3UGhvdG9zOiBQaG90b0RhdGFbXSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBBc3luY1N0b3JhZ2Uuc2V0SXRlbShTVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkobmV3UGhvdG9zKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm8gYW8gc2FsdmFyIGZvdG9zIG5vIEFzeW5jU3RvcmFnZTonLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVBob3RvVGFrZW4gPSAoXG4gICAgdXJpOiBzdHJpbmcsXG4gICAgY29vcmRzPzogeyBsYXRpdHVkZTogbnVtYmVyOyBsb25naXR1ZGU6IG51bWJlciB9LFxuICApID0+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4gICAgLy8gRm9ybWF0YSBjb21vIEREL01NL0FBQUFcbiAgICBjb25zdCBkYXkgPSBTdHJpbmcobm93LmdldERhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbiAgICBjb25zdCBtb250aCA9IFN0cmluZyhub3cuZ2V0TW9udGgoKSArIDEpLnBhZFN0YXJ0KDIsICcwJyk7IC8vIEphbmVpcm8gw6kgMFxuICAgIGNvbnN0IHllYXIgPSBub3cuZ2V0RnVsbFllYXIoKTtcblxuICAgIGNvbnN0IGZvcm1hdHRlZERhdGUgPSBgJHtkYXl9LyR7bW9udGh9LyR7eWVhcn1gO1xuXG4gICAgY29uc3QgbmV3UGhvdG86IFBob3RvRGF0YSA9IHsgdXJpLCBkYXRlOiBmb3JtYXR0ZWREYXRlLCBjb29yZHMgfTtcbiAgICBjb25zdCB1cGRhdGVkUGhvdG9zID0gW25ld1Bob3RvLCAuLi5waG90b3NdO1xuICAgIHNldFBob3Rvcyh1cGRhdGVkUGhvdG9zKTtcbiAgICBzYXZlUGhvdG9zKHVwZGF0ZWRQaG90b3MpO1xuICAgIHNldFNob3dDYW1lcmEoZmFsc2UpO1xuICB9O1xuXG4gIC8vIEZpbHRyYSBmb3RvcyBkZSBhY29yZG8gY29tIG8gdGV4dG8gZGEgYnVzY2FcbiAgY29uc3QgZmlsdGVyZWRQaG90b3MgPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gcGhvdG9zLmZpbHRlcihwaG90byA9PlxuICAgICAgcGhvdG8uZGF0ZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKSksXG4gICAgKTtcbiAgfSwgW3Bob3Rvcywgc2VhcmNoVGV4dF0pO1xuXG4gIHJldHVybiAoXG4gICAgPFZpZXdcbiAgICAgIHN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgIHsgYmFja2dyb3VuZENvbG9yOiBpc0RhcmtNb2RlID8gJyMwNTBBMzAnIDogJyNmZmYnIH0sXG4gICAgICBdfVxuICAgID5cbiAgICAgIHsvKiBUb3AgYmFyICovfVxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy50b3BCYXJ9PlxuICAgICAgICA8QW5pbWF0ZWQuVmlldyBzdHlsZT17eyB0cmFuc2Zvcm06IFt7IHNjYWxlOiBzY2FsZUFuaW0gfV0gfX0+XG4gICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHkgdGVzdElEPVwiY2FtZXJhLWJ1dHRvblwiIG9uUHJlc3M9e2hhbmRsZUNhbWVyYVByZXNzfT5cbiAgICAgICAgICAgIDxJb25pY29uc1xuICAgICAgICAgICAgICBuYW1lPVwiY2FtZXJhXCJcbiAgICAgICAgICAgICAgc2l6ZT17NDB9XG4gICAgICAgICAgICAgIGNvbG9yPXtpc0RhcmtNb2RlID8gJ3doaXRlJyA6ICdibGFjayd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvVG91Y2hhYmxlT3BhY2l0eT5cbiAgICAgICAgPC9BbmltYXRlZC5WaWV3PlxuXG4gICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgdGVzdElEPVwidGhlbWUtYnV0dG9uXCJcbiAgICAgICAgICBvblByZXNzPXsoKSA9PiBzZXRJc0RhcmtNb2RlKHByZXYgPT4gIXByZXYpfVxuICAgICAgICAgIHN0eWxlPXtzdHlsZXMudGhlbWVCdXR0b259XG4gICAgICAgID5cbiAgICAgICAgICA8SW9uaWNvbnNcbiAgICAgICAgICAgIG5hbWU9e2lzRGFya01vZGUgPyAnc3VubnknIDogJ21vb24nfVxuICAgICAgICAgICAgc2l6ZT17MzV9XG4gICAgICAgICAgICBjb2xvcj17aXNEYXJrTW9kZSA/ICd5ZWxsb3cnIDogJ2JsYWNrJ31cbiAgICAgICAgICAvPlxuICAgICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gICAgICA8L1ZpZXc+XG5cbiAgICAgIHsvKiBDb21wb25lbnRlIGRhIGPDom1lcmEgKi99XG4gICAgICB7c2hvd0NhbWVyYSAmJiAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXtTdHlsZVNoZWV0LmFic29sdXRlRmlsbH0+XG4gICAgICAgICAgPENhbWVyYUNvbXBvbmVudFxuICAgICAgICAgICAgb25QaG90b1Rha2VuPXtoYW5kbGVQaG90b1Rha2VufVxuICAgICAgICAgICAgb25DbG9zZT17KCkgPT4gc2V0U2hvd0NhbWVyYShmYWxzZSl9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKX1cblxuICAgICAgPFZpZXcgc3R5bGU9e3sgd2lkdGg6ICc5MCUnLCBtYXJnaW5WZXJ0aWNhbDogMzAgfX0+XG4gICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIkJ1c2NhciBwb3IgZGF0YS4uLlwiXG4gICAgICAgICAgcGxhY2Vob2xkZXJUZXh0Q29sb3I9e2lzRGFya01vZGUgPyAnI2NjYycgOiAnIzg4OCd9XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNEYXJrTW9kZSA/ICcjMUExQTQwJyA6ICcjZjBmMGYwJyxcbiAgICAgICAgICAgIGNvbG9yOiBpc0RhcmtNb2RlID8gJyNmZmYnIDogJyMwMDAnLFxuICAgICAgICAgICAgcGFkZGluZzogMTAsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6IDgsXG4gICAgICAgICAgfX1cbiAgICAgICAgICB2YWx1ZT17c2VhcmNoVGV4dH1cbiAgICAgICAgICBvbkNoYW5nZVRleHQ9e3NldFNlYXJjaFRleHR9XG4gICAgICAgIC8+XG4gICAgICA8L1ZpZXc+XG5cbiAgICAgIHsvKiBMaXN0YSBkZSBmb3RvcyAqL31cbiAgICAgIDxGbGF0TGlzdFxuICAgICAgICBkYXRhPXtmaWx0ZXJlZFBob3Rvc31cbiAgICAgICAga2V5RXh0cmFjdG9yPXsoaXRlbSwgaW5kZXgpID0+IGluZGV4LnRvU3RyaW5nKCl9XG4gICAgICAgIG51bUNvbHVtbnM9ezJ9XG4gICAgICAgIGNvbnRlbnRDb250YWluZXJTdHlsZT17eyBwYWRkaW5nSG9yaXpvbnRhbDogMiB9fVxuICAgICAgICByZW5kZXJJdGVtPXsoeyBpdGVtIH0pID0+IChcbiAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnBob3RvQ29udGFpbmVyfT5cbiAgICAgICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICAgICAgICAgIG9uUHJlc3M9eygpID0+XG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbi5uYXZpZ2F0ZSgnRGV0YWxoZXMnLCB7XG4gICAgICAgICAgICAgICAgICB1cmk6IGl0ZW0udXJpLFxuICAgICAgICAgICAgICAgICAgZGF0ZTogaXRlbS5kYXRlLFxuICAgICAgICAgICAgICAgICAgY29vcmRzOiBpdGVtLmNvb3JkcyxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxJbWFnZSBzb3VyY2U9e3sgdXJpOiBpdGVtLnVyaSB9fSBzdHlsZT17c3R5bGVzLmltYWdlfSAvPlxuICAgICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgKX1cbiAgICAgIC8+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4OiAxLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnZmxleC1zdGFydCcsXG4gICAgcGFkZGluZ1RvcDogNTAsXG4gIH0sXG4gIHRvcEJhcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIHdpZHRoOiAnMTAwJScsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDIwLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gIH0sXG4gIHRoZW1lQnV0dG9uOiB7XG4gICAgLy8gYm90w6NvIG5vIGNhbnRvIGRpcmVpdG9cbiAgfSxcbiAgcGhvdG9Db250YWluZXI6IHtcbiAgICBmbGV4QmFzaXM6ICc0OCUnLFxuICAgIG1hcmdpbjogMixcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgfSxcbiAgaW1hZ2U6IHtcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgIGJvcmRlclJhZGl1czogMTAsXG4gIH0sXG4gIGFic29sdXRlRmlsbDogeyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDAsIHJpZ2h0OiAwIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZVNjcmVlbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFXQSxJQUFBRSxhQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxTQUFBLEdBQUFGLHNCQUFBLENBQUFILE9BQUE7QUFFQSxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBb0QsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQUQsd0JBQUFTLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFYLHVCQUFBLFlBQUFBLHdCQUFBUyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFB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