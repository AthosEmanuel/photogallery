40b48cbf1262455844d27925ec13b7fc
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrameSizeProvider = FrameSizeProvider;
exports.useFrameSize = useFrameSize;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeSafeAreaContext = require("react-native-safe-area-context");
var _useLatestCallback = _interopRequireDefault(require("use-latest-callback"));
var _withSelector = require("use-sync-external-store/with-selector");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var SafeAreaListener = require('react-native-safe-area-context').SafeAreaListener;
var FrameContext = React.createContext(undefined);
function useFrameSize(selector, throttle) {
  var context = React.useContext(FrameContext);
  if (context == null) {
    throw new Error('useFrameSize must be used within a FrameSizeProvider');
  }
  var value = (0, _withSelector.useSyncExternalStoreWithSelector)(throttle ? context.subscribeThrottled : context.subscribe, context.getCurrent, context.getCurrent, selector);
  return value;
}
function FrameSizeProvider(_ref) {
  var initialFrame = _ref.initialFrame,
    children = _ref.children;
  var context = React.useContext(FrameContext);
  if (context != null) {
    return children;
  }
  return (0, _jsxRuntime.jsx)(FrameSizeProviderInner, {
    initialFrame: initialFrame,
    children: children
  });
}
function FrameSizeProviderInner(_ref2) {
  var initialFrame = _ref2.initialFrame,
    children = _ref2.children;
  var frameRef = React.useRef({
    width: initialFrame.width,
    height: initialFrame.height
  });
  var listeners = React.useRef(new Set());
  var getCurrent = (0, _useLatestCallback.default)(function () {
    return frameRef.current;
  });
  var subscribe = (0, _useLatestCallback.default)(function (listener) {
    listeners.current.add(listener);
    return function () {
      listeners.current.delete(listener);
    };
  });
  var subscribeThrottled = (0, _useLatestCallback.default)(function (listener) {
    var delay = 100;
    var timer;
    var updated = false;
    var waiting = false;
    var throttledListener = function throttledListener() {
      clearTimeout(timer);
      updated = true;
      if (waiting) {
        timer = setTimeout(function () {
          if (updated) {
            updated = false;
            listener();
          }
        }, delay);
      } else {
        waiting = true;
        setTimeout(function () {
          waiting = false;
        }, delay);
        updated = false;
        listener();
      }
    };
    var unsubscribe = subscribe(throttledListener);
    return function () {
      unsubscribe();
      clearTimeout(timer);
    };
  });
  var context = React.useMemo(function () {
    return {
      getCurrent: getCurrent,
      subscribe: subscribe,
      subscribeThrottled: subscribeThrottled
    };
  }, [subscribe, subscribeThrottled, getCurrent]);
  var _onChange = (0, _useLatestCallback.default)(function (frame) {
    if (frameRef.current.height === frame.height && frameRef.current.width === frame.width) {
      return;
    }
    frameRef.current = {
      width: frame.width,
      height: frame.height
    };
    listeners.current.forEach(function (listener) {
      return listener();
    });
  });
  return (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
    children: [_reactNative.Platform.OS === 'web' ? (0, _jsxRuntime.jsx)(FrameSizeListenerWeb, {
      onChange: _onChange
    }) : typeof SafeAreaListener === 'undefined' ? (0, _jsxRuntime.jsx)(FrameSizeListenerNativeFallback, {
      onChange: _onChange
    }) : (0, _jsxRuntime.jsx)(SafeAreaListener, {
      onChange: function onChange(_ref3) {
        var frame = _ref3.frame;
        return _onChange(frame);
      },
      style: _reactNative.StyleSheet.absoluteFill
    }), (0, _jsxRuntime.jsx)(FrameContext.Provider, {
      value: context,
      children: children
    })]
  });
}
function FrameSizeListenerNativeFallback(_ref4) {
  var onChange = _ref4.onChange;
  var frame = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
  React.useLayoutEffect(function () {
    onChange(frame);
  }, [frame, onChange]);
  return null;
}
function FrameSizeListenerWeb(_ref5) {
  var onChange = _ref5.onChange;
  var elementRef = React.useRef(null);
  React.useEffect(function () {
    if (elementRef.current == null) {
      return;
    }
    var rect = elementRef.current.getBoundingClientRect();
    onChange({
      width: rect.width,
      height: rect.height
    });
    var observer = new ResizeObserver(function (entries) {
      var entry = entries[0];
      if (entry) {
        var _entry$contentRect = entry.contentRect,
          width = _entry$contentRect.width,
          height = _entry$contentRect.height;
        onChange({
          width: width,
          height: height
        });
      }
    });
    observer.observe(elementRef.current);
    return function () {
      observer.disconnect();
    };
  }, [onChange]);
  return (0, _jsxRuntime.jsx)("div", {
    ref: elementRef,
    style: {
      position: 'absolute',
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
      pointerEvents: 'none',
      visibility: 'hidden'
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,