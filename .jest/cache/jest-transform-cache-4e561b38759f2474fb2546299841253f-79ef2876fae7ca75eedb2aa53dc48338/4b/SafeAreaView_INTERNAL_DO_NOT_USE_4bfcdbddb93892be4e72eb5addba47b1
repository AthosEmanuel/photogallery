162695634629d50a3510306fd1ecddb3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _View = _interopRequireDefault(require("../../../../Libraries/Components/View/View"));
var _UIManager = _interopRequireDefault(require("../../../../Libraries/ReactNative/UIManager"));
var _Platform = _interopRequireDefault(require("../../../../Libraries/Utilities/Platform"));
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var exported = _Platform.default.select({
  ios: require('../../../../src/private/specs_DEPRECATED/components/RCTSafeAreaViewNativeComponent').default,
  android: _UIManager.default.hasViewManagerConfig('RCTSafeAreaView') ? require('../../../../src/private/specs_DEPRECATED/components/RCTSafeAreaViewNativeComponent').default : _View.default,
  default: _View.default
});
var _default = exports.default = exported;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsIl9QbGF0Zm9ybSIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImV4cG9ydGVkIiwiUGxhdGZvcm0iLCJzZWxlY3QiLCJpb3MiLCJhbmRyb2lkIiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciLCJWaWV3IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiU2FmZUFyZWFWaWV3X0lOVEVSTkFMX0RPX05PVF9VU0UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5cbmltcG9ydCBWaWV3IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgVUlNYW5hZ2VyIGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBleHBvcnRlZDogY29tcG9uZW50KFxuICByZWY/OiBSZWFjdC5SZWZTZXR0ZXI8UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgVmlldz4+LFxuICAuLi5WaWV3UHJvcHNcbikgPSBQbGF0Zm9ybS5zZWxlY3Qoe1xuICBpb3M6IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3NyYy9wcml2YXRlL3NwZWNzX0RFUFJFQ0FURUQvY29tcG9uZW50cy9SQ1RTYWZlQXJlYVZpZXdOYXRpdmVDb21wb25lbnQnKVxuICAgIC5kZWZhdWx0LFxuICBhbmRyb2lkOiBVSU1hbmFnZXIuaGFzVmlld01hbmFnZXJDb25maWcoJ1JDVFNhZmVBcmVhVmlldycpXG4gICAgPyByZXF1aXJlKCcuLi8uLi8uLi8uLi9zcmMvcHJpdmF0ZS9zcGVjc19ERVBSRUNBVEVEL2NvbXBvbmVudHMvUkNUU2FmZUFyZWFWaWV3TmF0aXZlQ29tcG9uZW50JylcbiAgICAgICAgLmRlZmF1bHRcbiAgICA6IFZpZXcsXG4gIGRlZmF1bHQ6IFZpZXcsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZXhwb3J0ZWQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBWUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsS0FBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBQStCLFNBQUFJLHdCQUFBQyxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSCx1QkFBQSxZQUFBQSx3QkFBQUMsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFFL0IsSUFBTW1CLFFBR0wsR0FBR0MsaUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO0VBQ2xCQyxHQUFHLEVBQUU1QixPQUFPLENBQUMsb0ZBQW9GLENBQUMsQ0FDL0ZlLE9BQU87RUFDVmMsT0FBTyxFQUFFQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxHQUN0RC9CLE9BQU8sQ0FBQyxvRkFBb0YsQ0FBQyxDQUMxRmUsT0FBTyxHQUNWaUIsYUFBSTtFQUNSakIsT0FBTyxFQUFFaUI7QUFDWCxDQUFDLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQW5CLE9BQUEsR0FFWVUsUUFBUSIsImlnbm9yZUxpc3QiOltdfQ==