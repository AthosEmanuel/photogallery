71c97ebda453a6480b6fe466b4963fc6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _View = _interopRequireDefault(require("../../Libraries/Components/View/View"));
var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var mockComponent = jest.requireActual('../mockComponent').default;
var MockNativeMethods = jest.requireActual('../MockNativeMethods').default;
var RCTScrollView = (0, _requireNativeComponent.default)('RCTScrollView');
var BaseComponent = mockComponent('../Libraries/Components/ScrollView/ScrollView', Object.assign({}, MockNativeMethods, {
  getScrollResponder: jest.fn(),
  getScrollableNode: jest.fn(),
  getInnerViewNode: jest.fn(),
  getInnerViewRef: jest.fn(),
  getNativeScrollRef: jest.fn(),
  scrollTo: jest.fn(),
  scrollToEnd: jest.fn(),
  flashScrollIndicators: jest.fn(),
  scrollResponderZoomTo: jest.fn(),
  scrollResponderScrollNativeHandleToKeyboard: jest.fn()
}), true);
var ScrollViewMock = exports.default = function (_BaseComponent) {
  function ScrollViewMock() {
    (0, _classCallCheck2.default)(this, ScrollViewMock);
    return _callSuper(this, ScrollViewMock, arguments);
  }
  (0, _inherits2.default)(ScrollViewMock, _BaseComponent);
  return (0, _createClass2.default)(ScrollViewMock, [{
    key: "render",
    value: function render() {
      return (0, _jsxRuntime.jsxs)(RCTScrollView, Object.assign({}, this.props, {
        children: [this.props.refreshControl, (0, _jsxRuntime.jsx)(_View.default, {
          children: this.props.children
        })]
      }));
    }
  }]);
}(BaseComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlldyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3JlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9jYWxsU3VwZXIiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJjb25zdHJ1Y3RvciIsImFwcGx5IiwiQm9vbGVhbiIsInByb3RvdHlwZSIsInZhbHVlT2YiLCJtb2NrQ29tcG9uZW50IiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJNb2NrTmF0aXZlTWV0aG9kcyIsIlJDVFNjcm9sbFZpZXciLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiQmFzZUNvbXBvbmVudCIsImFzc2lnbiIsImdldFNjcm9sbFJlc3BvbmRlciIsImZuIiwiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJnZXRJbm5lclZpZXdOb2RlIiwiZ2V0SW5uZXJWaWV3UmVmIiwiZ2V0TmF0aXZlU2Nyb2xsUmVmIiwic2Nyb2xsVG8iLCJzY3JvbGxUb0VuZCIsImZsYXNoU2Nyb2xsSW5kaWNhdG9ycyIsInNjcm9sbFJlc3BvbmRlclpvb21UbyIsInNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQiLCJTY3JvbGxWaWV3TW9jayIsImV4cG9ydHMiLCJfQmFzZUNvbXBvbmVudCIsIl9jbGFzc0NhbGxDaGVjazIiLCJhcmd1bWVudHMiLCJfaW5oZXJpdHMyIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwicmVuZGVyIiwianN4cyIsInByb3BzIiwiY2hpbGRyZW4iLCJyZWZyZXNoQ29udHJvbCIsImpzeCJdLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlb2YgVFNjcm9sbFZpZXcgZnJvbSAnLi4vLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3JztcbmltcG9ydCB0eXBlIHtTY3JvbGxWaWV3TmF0aXZlUHJvcHN9IGZyb20gJy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlld05hdGl2ZUNvbXBvbmVudFR5cGUnO1xuaW1wb3J0IHR5cGVvZiAqIGFzIFRtb2NrQ29tcG9uZW50IGZyb20gJy4uL21vY2tDb21wb25lbnQnO1xuaW1wb3J0IHR5cGVvZiAqIGFzIFRNb2NrTmF0aXZlTWV0aG9kcyBmcm9tICcuLi9Nb2NrTmF0aXZlTWV0aG9kcyc7XG5cbmltcG9ydCBWaWV3IGZyb20gJy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldyc7XG5pbXBvcnQgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IG1vY2tDb21wb25lbnQgPVxuICBqZXN0LnJlcXVpcmVBY3R1YWw8VG1vY2tDb21wb25lbnQ+KCcuLi9tb2NrQ29tcG9uZW50JykuZGVmYXVsdDtcbmNvbnN0IE1vY2tOYXRpdmVNZXRob2RzID0gamVzdC5yZXF1aXJlQWN0dWFsPFRNb2NrTmF0aXZlTWV0aG9kcz4oXG4gICcuLi9Nb2NrTmF0aXZlTWV0aG9kcycsXG4pLmRlZmF1bHQ7XG5cbmNvbnN0IFJDVFNjcm9sbFZpZXcgPVxuICByZXF1aXJlTmF0aXZlQ29tcG9uZW50PFNjcm9sbFZpZXdOYXRpdmVQcm9wcz4oJ1JDVFNjcm9sbFZpZXcnKTtcblxuY29uc3QgQmFzZUNvbXBvbmVudCA9IG1vY2tDb21wb25lbnQoXG4gICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnLFxuICB7XG4gICAgLi4uTW9ja05hdGl2ZU1ldGhvZHMsXG4gICAgZ2V0U2Nyb2xsUmVzcG9uZGVyOiBqZXN0LmZuKCksXG4gICAgZ2V0U2Nyb2xsYWJsZU5vZGU6IGplc3QuZm4oKSxcbiAgICBnZXRJbm5lclZpZXdOb2RlOiBqZXN0LmZuKCksXG4gICAgZ2V0SW5uZXJWaWV3UmVmOiBqZXN0LmZuKCksXG4gICAgZ2V0TmF0aXZlU2Nyb2xsUmVmOiBqZXN0LmZuKCksXG4gICAgc2Nyb2xsVG86IGplc3QuZm4oKSxcbiAgICBzY3JvbGxUb0VuZDogamVzdC5mbigpLFxuICAgIGZsYXNoU2Nyb2xsSW5kaWNhdG9yczogamVzdC5mbigpLFxuICAgIHNjcm9sbFJlc3BvbmRlclpvb21UbzogamVzdC5mbigpLFxuICAgIHNjcm9sbFJlc3BvbmRlclNjcm9sbE5hdGl2ZUhhbmRsZVRvS2V5Ym9hcmQ6IGplc3QuZm4oKSxcbiAgfSwgLy8gaW5zdGFuY2VNZXRob2RzXG4gIHRydWUsIC8vIGlzRVNNb2R1bGVcbikgYXMgVFNjcm9sbFZpZXc7XG5cbi8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWV4dGVuZF1cbi8vICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRlZC1hbm5vdGF0aW9uXVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2Nyb2xsVmlld01vY2sgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xuICAgIHJldHVybiAoXG4gICAgICA8UkNUU2Nyb2xsVmlldyB7Li4udGhpcy5wcm9wc30+XG4gICAgICAgIHt0aGlzLnByb3BzLnJlZnJlc2hDb250cm9sfVxuICAgICAgICA8Vmlldz57dGhpcy5wcm9wcy5jaGlsZHJlbn08L1ZpZXc+XG4gICAgICA8L1JDVFNjcm9sbFZpZXc+XG4gICAgKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBZUEsSUFBQUEsS0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsdUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUErQixJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBRyx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLDZCQUFBQyxPQUFBLE1BQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUosdUJBQUEsWUFBQUEsd0JBQUFFLENBQUEsRUFBQUMsQ0FBQSxTQUFBQSxDQUFBLElBQUFELENBQUEsSUFBQUEsQ0FBQSxDQUFBSyxVQUFBLFNBQUFMLENBQUEsTUFBQU0sQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsS0FBQUMsU0FBQSxRQUFBQyxPQUFBLEVBQUFWLENBQUEsaUJBQUFBLENBQUEsdUJBQUFBLENBQUEseUJBQUFBLENBQUEsU0FBQVEsQ0FBQSxNQUFBRixDQUFBLEdBQUFMLENBQUEsR0FBQUcsQ0FBQSxHQUFBRCxDQUFBLFFBQUFHLENBQUEsQ0FBQUssR0FBQSxDQUFBWCxDQUFBLFVBQUFNLENBQUEsQ0FBQU0sR0FBQSxDQUFBWixDQUFBLEdBQUFNLENBQUEsQ0FBQU8sR0FBQSxDQUFBYixDQUFB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