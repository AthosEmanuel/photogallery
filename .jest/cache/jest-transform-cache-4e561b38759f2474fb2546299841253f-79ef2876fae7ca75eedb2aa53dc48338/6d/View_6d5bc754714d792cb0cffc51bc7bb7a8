8434bcf1d1aae4a72eb1bc69befd216f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectDestructuringEmpty2 = _interopRequireDefault(require("@babel/runtime/helpers/objectDestructuringEmpty"));
var ReactNativeFeatureFlags = _interopRequireWildcard(require("../../../src/private/featureflags/ReactNativeFeatureFlags"));
var _TextAncestorContext = _interopRequireDefault(require("../../Text/TextAncestorContext"));
var _ViewNativeComponent = _interopRequireDefault(require("./ViewNativeComponent"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "id", "tabIndex"],
  _excluded2 = ["accessibilityElementsHidden", "accessibilityLabel", "accessibilityLabelledBy", "accessibilityLiveRegion", "accessibilityState", "accessibilityValue", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-hidden", "aria-label", "aria-labelledby", "aria-live", "aria-selected", "aria-valuemax", "aria-valuemin", "aria-valuenow", "aria-valuetext", "focusable", "id", "importantForAccessibility", "nativeID", "tabIndex"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var View = React.forwardRef(View_withRef);
function View_withRef(_ref, ref) {
  var props = Object.assign({}, ((0, _objectDestructuringEmpty2.default)(_ref), _ref));
  var hasTextAncestor = (0, _react.use)(_TextAncestorContext.default);
  var actualView;
  if (ReactNativeFeatureFlags.reduceDefaultPropsInView()) {
    var accessibilityState = props.accessibilityState,
      accessibilityValue = props.accessibilityValue,
      ariaBusy = props['aria-busy'],
      ariaChecked = props['aria-checked'],
      ariaDisabled = props['aria-disabled'],
      ariaExpanded = props['aria-expanded'],
      ariaHidden = props['aria-hidden'],
      ariaLabel = props['aria-label'],
      ariaLabelledBy = props['aria-labelledby'],
      ariaLive = props['aria-live'],
      ariaSelected = props['aria-selected'],
      ariaValueMax = props['aria-valuemax'],
      ariaValueMin = props['aria-valuemin'],
      ariaValueNow = props['aria-valuenow'],
      ariaValueText = props['aria-valuetext'],
      id = props.id,
      tabIndex = props.tabIndex,
      otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
    var processedProps = otherProps;
    var parsedAriaLabelledBy = ariaLabelledBy == null ? void 0 : ariaLabelledBy.split(/\s*,\s*/g);
    if (parsedAriaLabelledBy !== undefined) {
      processedProps.accessibilityLabelledBy = parsedAriaLabelledBy;
    }
    if (ariaLabel !== undefined) {
      processedProps.accessibilityLabel = ariaLabel;
    }
    if (ariaLive !== undefined) {
      processedProps.accessibilityLiveRegion = ariaLive === 'off' ? 'none' : ariaLive;
    }
    if (ariaHidden !== undefined) {
      processedProps.accessibilityElementsHidden = ariaHidden;
      if (ariaHidden === true) {
        processedProps.importantForAccessibility = 'no-hide-descendants';
      }
    }
    if (id !== undefined) {
      processedProps.nativeID = id;
    }
    if (tabIndex !== undefined) {
      processedProps.focusable = !tabIndex;
    }
    if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
      processedProps.accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
      };
    }
    if (accessibilityValue != null || ariaValueMax != null || ariaValueMin != null || ariaValueNow != null || ariaValueText != null) {
      processedProps.accessibilityValue = {
        max: ariaValueMax != null ? ariaValueMax : accessibilityValue == null ? void 0 : accessibilityValue.max,
        min: ariaValueMin != null ? ariaValueMin : accessibilityValue == null ? void 0 : accessibilityValue.min,
        now: ariaValueNow != null ? ariaValueNow : accessibilityValue == null ? void 0 : accessibilityValue.now,
        text: ariaValueText != null ? ariaValueText : accessibilityValue == null ? void 0 : accessibilityValue.text
      };
    }
    actualView = ref == null ? (0, _jsxRuntime.jsx)(_ViewNativeComponent.default, Object.assign({}, processedProps)) : (0, _jsxRuntime.jsx)(_ViewNativeComponent.default, Object.assign({}, processedProps, {
      ref: ref
    }));
  } else {
    var _ariaLabelledBy$split;
    var accessibilityElementsHidden = props.accessibilityElementsHidden,
      accessibilityLabel = props.accessibilityLabel,
      accessibilityLabelledBy = props.accessibilityLabelledBy,
      accessibilityLiveRegion = props.accessibilityLiveRegion,
      _accessibilityState2 = props.accessibilityState,
      _accessibilityValue2 = props.accessibilityValue,
      _ariaBusy = props['aria-busy'],
      _ariaChecked = props['aria-checked'],
      _ariaDisabled = props['aria-disabled'],
      _ariaExpanded = props['aria-expanded'],
      _ariaHidden = props['aria-hidden'],
      _ariaLabel = props['aria-label'],
      _ariaLabelledBy = props['aria-labelledby'],
      _ariaLive = props['aria-live'],
      _ariaSelected = props['aria-selected'],
      _ariaValueMax = props['aria-valuemax'],
      _ariaValueMin = props['aria-valuemin'],
      _ariaValueNow = props['aria-valuenow'],
      _ariaValueText = props['aria-valuetext'],
      focusable = props.focusable,
      _id = props.id,
      importantForAccessibility = props.importantForAccessibility,
      nativeID = props.nativeID,
      _tabIndex = props.tabIndex,
      _otherProps = (0, _objectWithoutProperties2.default)(props, _excluded2);
    var _accessibilityLabelledBy = (_ariaLabelledBy$split = _ariaLabelledBy == null ? void 0 : _ariaLabelledBy.split(/\s*,\s*/g)) != null ? _ariaLabelledBy$split : accessibilityLabelledBy;
    var _accessibilityState = _accessibilityState2 != null || _ariaBusy != null || _ariaChecked != null || _ariaDisabled != null || _ariaExpanded != null || _ariaSelected != null ? {
      busy: _ariaBusy != null ? _ariaBusy : _accessibilityState2 == null ? void 0 : _accessibilityState2.busy,
      checked: _ariaChecked != null ? _ariaChecked : _accessibilityState2 == null ? void 0 : _accessibilityState2.checked,
      disabled: _ariaDisabled != null ? _ariaDisabled : _accessibilityState2 == null ? void 0 : _accessibilityState2.disabled,
      expanded: _ariaExpanded != null ? _ariaExpanded : _accessibilityState2 == null ? void 0 : _accessibilityState2.expanded,
      selected: _ariaSelected != null ? _ariaSelected : _accessibilityState2 == null ? void 0 : _accessibilityState2.selected
    } : undefined;
    var _accessibilityValue = _accessibilityValue2 != null || _ariaValueMax != null || _ariaValueMin != null || _ariaValueNow != null || _ariaValueText != null ? {
      max: _ariaValueMax != null ? _ariaValueMax : _accessibilityValue2 == null ? void 0 : _accessibilityValue2.max,
      min: _ariaValueMin != null ? _ariaValueMin : _accessibilityValue2 == null ? void 0 : _accessibilityValue2.min,
      now: _ariaValueNow != null ? _ariaValueNow : _accessibilityValue2 == null ? void 0 : _accessibilityValue2.now,
      text: _ariaValueText != null ? _ariaValueText : _accessibilityValue2 == null ? void 0 : _accessibilityValue2.text
    } : undefined;
    actualView = (0, _jsxRuntime.jsx)(_ViewNativeComponent.default, Object.assign({}, _otherProps, {
      accessibilityLiveRegion: _ariaLive === 'off' ? 'none' : _ariaLive != null ? _ariaLive : accessibilityLiveRegion,
      accessibilityLabel: _ariaLabel != null ? _ariaLabel : accessibilityLabel,
      focusable: _tabIndex !== undefined ? !_tabIndex : focusable,
      accessibilityState: _accessibilityState,
      accessibilityElementsHidden: _ariaHidden != null ? _ariaHidden : accessibilityElementsHidden,
      accessibilityLabelledBy: _accessibilityLabelledBy,
      accessibilityValue: _accessibilityValue,
      importantForAccessibility: _ariaHidden === true ? 'no-hide-descendants' : importantForAccessibility,
      nativeID: _id != null ? _id : nativeID,
      ref: ref
    }));
  }
  if (hasTextAncestor) {
    return (0, _jsxRuntime.jsx)(_TextAncestorContext.default, {
      value: false,
      children: actualView
    });
  }
  return actualView;
}
View.displayName = 'View';
var _default = exports.default = View;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,