d0bf792452316e403ae1386f3beb91b2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DebuggingOverlayNativeComponent = _interopRequireWildcard(require("../../src/private/specs_DEPRECATED/components/DebuggingOverlayNativeComponent"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var useRef = React.useRef,
  useImperativeHandle = React.useImperativeHandle;
var isNativeComponentReady = _UIManager.default.hasViewManagerConfig('DebuggingOverlay');
function DebuggingOverlay(_ref) {
  var ref = _ref.ref;
  useImperativeHandle(ref, function () {
    return {
      highlightTraceUpdates: function highlightTraceUpdates(updates) {
        if (!isNativeComponentReady) {
          return;
        }
        var nonEmptyRectangles = updates.filter(function (_ref2) {
          var rectangle = _ref2.rectangle,
            color = _ref2.color;
          return rectangle.width >= 0 && rectangle.height >= 0;
        });
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.highlightTraceUpdates(nativeComponentRef.current, nonEmptyRectangles);
        }
      },
      highlightElements: function highlightElements(elements) {
        if (!isNativeComponentReady) {
          return;
        }
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.highlightElements(nativeComponentRef.current, elements);
        }
      },
      clearElementsHighlight: function clearElementsHighlight() {
        if (!isNativeComponentReady) {
          return;
        }
        if (nativeComponentRef.current != null) {
          _DebuggingOverlayNativeComponent.Commands.clearElementsHighlights(nativeComponentRef.current);
        }
      }
    };
  }, []);
  var nativeComponentRef = useRef(null);
  return isNativeComponentReady && (0, _jsxRuntime.jsx)(_View.default, {
    pointerEvents: "none",
    style: styles.overlay,
    children: (0, _jsxRuntime.jsx)(_DebuggingOverlayNativeComponent.default, {
      ref: nativeComponentRef,
      style: styles.overlay
    })
  });
}
var styles = _StyleSheet.default.create({
  overlay: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  }
});
var _default = exports.default = DebuggingOverlay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9WaWV3IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9VSU1hbmFnZXIiLCJfU3R5bGVTaGVldCIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInVzZVJlZiIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJpc05hdGl2ZUNvbXBvbmVudFJlYWR5IiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciLCJEZWJ1Z2dpbmdPdmVybGF5IiwiX3JlZiIsInJlZiIsImhpZ2hsaWdodFRyYWNlVXBkYXRlcyIsInVwZGF0ZXMiLCJub25FbXB0eVJlY3RhbmdsZXMiLCJmaWx0ZXIiLCJfcmVmMiIsInJlY3RhbmdsZSIsImNvbG9yIiwid2lkdGgiLCJoZWlnaHQiLCJuYXRpdmVDb21wb25lbnRSZWYiLCJjdXJyZW50IiwiQ29tbWFuZHMiLCJoaWdobGlnaHRFbGVtZW50cyIsImVsZW1lbnRzIiwiY2xlYXJFbGVtZW50c0hpZ2hsaWdodCIsImNsZWFyRWxlbWVudHNIaWdobGlnaHRzIiwianN4IiwicG9pbnRlckV2ZW50cyIsInN0eWxlIiwic3R5bGVzIiwib3ZlcmxheSIsImNoaWxkcmVuIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInBvc2l0aW9uIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiRGVidWdnaW5nT3ZlcmxheS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1xuICBFbGVtZW50UmVjdGFuZ2xlLFxuICBUcmFjZVVwZGF0ZSxcbn0gZnJvbSAnLi4vLi4vc3JjL3ByaXZhdGUvc3BlY3NfREVQUkVDQVRFRC9jb21wb25lbnRzL0RlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnQnO1xuXG5pbXBvcnQgRGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudCwge1xuICBDb21tYW5kcyxcbn0gZnJvbSAnLi4vLi4vc3JjL3ByaXZhdGUvc3BlY3NfREVQUkVDQVRFRC9jb21wb25lbnRzL0RlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0IFZpZXcgZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IFN0eWxlU2hlZXQgZnJvbSAnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3Qge3VzZVJlZiwgdXNlSW1wZXJhdGl2ZUhhbmRsZX0gPSBSZWFjdDtcbmNvbnN0IGlzTmF0aXZlQ29tcG9uZW50UmVhZHkgPVxuICBVSU1hbmFnZXIuaGFzVmlld01hbmFnZXJDb25maWcoJ0RlYnVnZ2luZ092ZXJsYXknKTtcblxudHlwZSBEZWJ1Z2dpbmdPdmVybGF5SGFuZGxlID0ge1xuICBoaWdobGlnaHRUcmFjZVVwZGF0ZXModXBkYXRlczogJFJlYWRPbmx5QXJyYXk8VHJhY2VVcGRhdGU+KTogdm9pZCxcbiAgaGlnaGxpZ2h0RWxlbWVudHMoZWxlbWVudHM6ICRSZWFkT25seUFycmF5PEVsZW1lbnRSZWN0YW5nbGU+KTogdm9pZCxcbiAgY2xlYXJFbGVtZW50c0hpZ2hsaWdodCgpOiB2b2lkLFxufTtcblxuZnVuY3Rpb24gRGVidWdnaW5nT3ZlcmxheSh7XG4gIHJlZixcbn06IHtcbiAgcmVmOiBSZWFjdC5SZWZTZXR0ZXI8RGVidWdnaW5nT3ZlcmxheUhhbmRsZT4sXG59KTogUmVhY3QuTm9kZSB7XG4gIHVzZUltcGVyYXRpdmVIYW5kbGUoXG4gICAgcmVmLFxuICAgICgpID0+ICh7XG4gICAgICBoaWdobGlnaHRUcmFjZVVwZGF0ZXModXBkYXRlcykge1xuICAgICAgICBpZiAoIWlzTmF0aXZlQ29tcG9uZW50UmVhZHkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBub25FbXB0eVJlY3RhbmdsZXMgPSB1cGRhdGVzLmZpbHRlcihcbiAgICAgICAgICAoe3JlY3RhbmdsZSwgY29sb3J9KSA9PiByZWN0YW5nbGUud2lkdGggPj0gMCAmJiByZWN0YW5nbGUuaGVpZ2h0ID49IDAsXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG5hdGl2ZUNvbXBvbmVudFJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBDb21tYW5kcy5oaWdobGlnaHRUcmFjZVVwZGF0ZXMoXG4gICAgICAgICAgICBuYXRpdmVDb21wb25lbnRSZWYuY3VycmVudCxcbiAgICAgICAgICAgIG5vbkVtcHR5UmVjdGFuZ2xlcyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaGlnaGxpZ2h0RWxlbWVudHMoZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKCFpc05hdGl2ZUNvbXBvbmVudFJlYWR5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hdGl2ZUNvbXBvbmVudFJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBDb21tYW5kcy5oaWdobGlnaHRFbGVtZW50cyhuYXRpdmVDb21wb25lbnRSZWYuY3VycmVudCwgZWxlbWVudHMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xlYXJFbGVtZW50c0hpZ2hsaWdodCgpIHtcbiAgICAgICAgaWYgKCFpc05hdGl2ZUNvbXBvbmVudFJlYWR5KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hdGl2ZUNvbXBvbmVudFJlZi5jdXJyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBDb21tYW5kcy5jbGVhckVsZW1lbnRzSGlnaGxpZ2h0cyhuYXRpdmVDb21wb25lbnRSZWYuY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSksXG4gICAgW10sXG4gICk7XG5cbiAgY29uc3QgbmF0aXZlQ29tcG9uZW50UmVmID0gdXNlUmVmPFJlYWN0LkVsZW1lbnRSZWY8XG4gICAgdHlwZW9mIERlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnQsXG4gID4gfCBudWxsPihudWxsKTtcblxuICByZXR1cm4gKFxuICAgIGlzTmF0aXZlQ29tcG9uZW50UmVhZHkgJiYgKFxuICAgICAgPFZpZXcgcG9pbnRlckV2ZW50cz1cIm5vbmVcIiBzdHlsZT17c3R5bGVzLm92ZXJsYXl9PlxuICAgICAgICA8RGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudFxuICAgICAgICAgIHJlZj17bmF0aXZlQ29tcG9uZW50UmVmfVxuICAgICAgICAgIHN0eWxlPXtzdHlsZXMub3ZlcmxheX1cbiAgICAgICAgLz5cbiAgICAgIDwvVmlldz5cbiAgICApXG4gICk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgb3ZlcmxheToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBEZWJ1Z2dpbmdPdmVybGF5IGFzIGNvbXBvbmVudChcbiAgcmVmOiBSZWFjdC5SZWZTZXR0ZXI8RGVidWdnaW5nT3ZlcmxheUhhbmRsZT4sXG4pO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQWVBLElBQUFBLGdDQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFHQSxJQUFBQyxLQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxVQUFBLEdBQUFELHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSSxXQUFBLEdBQUFGLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBSyxLQUFBLEdBQUFOLHVCQUFBLENBQUFDLE9BQUE7QUFBK0IsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQUQsd0JBQUFRLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFWLHVCQUFBLFlBQUFBLHdCQUFBUSxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUUvQixJQUFPbUIsTUFBTSxHQUF5QnRCLEtBQUssQ0FBcENzQixNQUFNO0VBQUVDLG1CQUFtQixHQUFJdkIsS0FBSyxDQUE1QnVCLG1CQUFtQjtBQUNsQyxJQUFNQyxzQkFBc0IsR0FDMUJDLGtCQUFTLENBQUNDLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDO0FBUXBELFNBQVNDLGdCQUFnQkEsQ0FBQUMsSUFBQSxFQUlWO0VBQUEsSUFIYkMsR0FBRyxHQUFBRCxJQUFBLENBQUhDLEdBQUc7RUFJSE4sbUJBQW1CLENBQ2pCTSxHQUFHLEVBQ0g7SUFBQSxPQUFPO01BQ0xDLHFCQUFxQixXQUFyQkEscUJBQXFCQSxDQUFDQyxPQUFPLEVBQUU7UUFDN0IsSUFBSSxDQUFDUCxzQkFBc0IsRUFBRTtVQUMzQjtRQUNGO1FBRUEsSUFBTVEsa0JBQWtCLEdBQUdELE9BQU8sQ0FBQ0UsTUFBTSxDQUN2QyxVQUFBQyxLQUFBO1VBQUEsSUFBRUMsU0FBUyxHQUFBRCxLQUFBLENBQVRDLFNBQVM7WUFBRUMsS0FBSyxHQUFBRixLQUFBLENBQUxFLEtBQUs7VUFBQSxPQUFNRCxTQUFTLENBQUNFLEtBQUssSUFBSSxDQUFDLElBQUlGLFNBQVMsQ0FBQ0csTUFBTSxJQUFJLENBQUM7UUFBQSxDQUN2RSxDQUFDO1FBRUQsSUFBSUMsa0JBQWtCLENBQUNDLE9BQU8sSUFBSSxJQUFJLEVBQUU7VUFDdENDLHlDQUFRLENBQUNYLHFCQUFxQixDQUM1QlMsa0JBQWtCLENBQUNDLE9BQU8sRUFDMUJSLGtCQUNGLENBQUM7UUFDSDtNQUNGLENBQUM7TUFDRFUsaUJBQWlCLFdBQWpCQSxpQkFBaUJBLENBQUNDLFFBQVEsRUFBRTtRQUMxQixJQUFJLENBQUNuQixzQkFBc0IsRUFBRTtVQUMzQjtRQUNGO1FBRUEsSUFBSWUsa0JBQWtCLENBQUNDLE9BQU8sSUFBSSxJQUFJLEVBQUU7VUFDdENDLHlDQUFRLENBQUNDLGlCQUFpQixDQUFDSCxrQkFBa0IsQ0FBQ0MsT0FBTyxFQUFFRyxRQUFRLENBQUM7UUFDbEU7TUFDRixDQUFDO01BQ0RDLHNCQUFzQixXQUF0QkEsc0JBQXNCQSxDQUFBLEVBQUc7UUFDdkIsSUFBSSxDQUFDcEIsc0JBQXNCLEVBQUU7VUFDM0I7UUFDRjtRQUVBLElBQUllLGtCQUFrQixDQUFDQyxPQUFPLElBQUksSUFBSSxFQUFFO1VBQ3RDQyx5Q0FBUSxDQUFDSSx1QkFBdUIsQ0FBQ04sa0JBQWtCLENBQUNDLE9BQU8sQ0FBQztRQUM5RDtNQUNGO0lBQ0YsQ0FBQztFQUFBLENBQUMsRUFDRixFQUNGLENBQUM7RUFFRCxJQUFNRCxrQkFBa0IsR0FBR2pCLE1BQU0sQ0FFdkIsSUFBSSxDQUFDO0VBRWYsT0FDRUUsc0JBQXNCLElBQ3BCLElBQUF2QixXQUFBLENBQUE2QyxHQUFBLEVBQUNsRCxLQUFBLENBQUFnQixPQUFJO0lBQUNtQyxhQUFhLEVBQUMsTUFBTTtJQUFDQyxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0MsT0FBUTtJQUFBQyxRQUFBLEVBQy9DLElBQUFsRCxXQUFBLENBQUE2QyxHQUFBLEVBQUNyRCxnQ0FBQSxDQUFBbUIsT0FBK0I7TUFDOUJpQixHQUFHLEVBQUVVLGtCQUFtQjtNQUN4QlMsS0FBSyxFQUFFQyxNQUFNLENBQUNDO0lBQVEsQ0FDdkI7RUFBQyxDQUNFLENBQ1A7QUFFTDtBQUVBLElBQU1ELE1BQU0sR0FBR0csbUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBQy9CSCxPQUFPLEVBQUU7SUFDUEksUUFBUSxFQUFFLFVBQVU7SUFDcEJDLEdBQUcsRUFBRSxDQUFDO0lBQ05DLE1BQU0sRUFBRSxDQUFDO0lBQ1RDLElBQUksRUFBRSxDQUFDO0lBQ1BDLEtBQUssRUFBRTtFQUNUO0FBQ0YsQ0FBQyxDQUFDO0FBQUMsSUFBQUMsUUFBQSxHQUFBQyxPQUFBLENBQUFoRCxPQUFBLEdBRVllLGdCQUFnQiIsImlnbm9yZUxpc3QiOltdfQ==