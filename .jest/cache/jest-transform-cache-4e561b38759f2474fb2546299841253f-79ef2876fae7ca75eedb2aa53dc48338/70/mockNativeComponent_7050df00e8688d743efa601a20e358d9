7a438715790840524e9b9fee90942208
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mockNativeComponent;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var nativeTag = 1;
function mockNativeComponent(viewName) {
  var Component = function (_React$Component) {
    function Component() {
      var _this;
      (0, _classCallCheck2.default)(this, Component);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper(this, Component, [].concat(args));
      _this._nativeTag = nativeTag++;
      _this.blur = jest.fn();
      _this.focus = jest.fn();
      _this.measure = jest.fn();
      _this.measureInWindow = jest.fn();
      _this.measureLayout = jest.fn();
      _this.setNativeProps = jest.fn();
      return _this;
    }
    (0, _inherits2.default)(Component, _React$Component);
    return (0, _createClass2.default)(Component, [{
      key: "render",
      value: function render() {
        return (0, _react.createElement)(viewName, this.props, this.props.children);
      }
    }]);
  }(React.Component);
  if (viewName === 'RCTView') {
    Component.displayName = 'View';
  } else {
    Component.displayName = viewName;
  }
  return Component;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJSZWFjdCIsImUiLCJ0IiwiV2Vha01hcCIsInIiLCJuIiwiX19lc01vZHVsZSIsIm8iLCJpIiwiZiIsIl9fcHJvdG9fXyIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJzZXQiLCJfdCIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX2NhbGxTdXBlciIsIl9nZXRQcm90b3R5cGVPZjIiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImNvbnN0cnVjdG9yIiwiYXBwbHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsIm5hdGl2ZVRhZyIsIm1vY2tOYXRpdmVDb21wb25lbnQiLCJ2aWV3TmFtZSIsIkNvbXBvbmVudCIsIl9SZWFjdCRDb21wb25lbnQiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjazIiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNvbmNhdCIsIl9uYXRpdmVUYWciLCJibHVyIiwiamVzdCIsImZuIiwiZm9jdXMiLCJtZWFzdXJlIiwibWVhc3VyZUluV2luZG93IiwibWVhc3VyZUxheW91dCIsInNldE5hdGl2ZVByb3BzIiwiX2luaGVyaXRzMiIsIl9jcmVhdGVDbGFzczIiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlciIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wcyIsImNoaWxkcmVuIiwiZGlzcGxheU5hbWUiXSwic291cmNlcyI6WyJtb2NrTmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3RcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7SG9zdEluc3RhbmNlfSBmcm9tICcuLi9zcmMvcHJpdmF0ZS90eXBlcy9Ib3N0SW5zdGFuY2UnO1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gJ3JlYWN0JztcblxubGV0IG5hdGl2ZVRhZyA9IDE7XG5cbnR5cGUgTW9ja05hdGl2ZUNvbXBvbmVudDxUUHJvcHM6IHsuLi59PiA9IGNvbXBvbmVudChcbiAgcmVmPzogP1JlYWN0LlJlZlNldHRlcjxIb3N0SW5zdGFuY2U+LFxuICAuLi5wcm9wczogVFByb3BzXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb2NrTmF0aXZlQ29tcG9uZW50PFRQcm9wczogey4uLn0+KFxuICB2aWV3TmFtZTogc3RyaW5nLFxuKTogTW9ja05hdGl2ZUNvbXBvbmVudDxUUHJvcHM+IHtcbiAgY29uc3QgQ29tcG9uZW50ID0gY2xhc3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VFByb3BzPiB7XG4gICAgX25hdGl2ZVRhZzogbnVtYmVyID0gbmF0aXZlVGFnKys7XG5cbiAgICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XG4gICAgICAvLyAkRmxvd0lnbm9yZVtub3QtYS1mdW5jdGlvbl1cbiAgICAgIC8vICRGbG93SWdub3JlW3Byb3AtbWlzc2luZ11cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KHZpZXdOYW1lLCB0aGlzLnByb3BzLCB0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgbWV0aG9kcyB0aGF0IGV4aXN0IG9uIGhvc3QgY29tcG9uZW50c1xuICAgIGJsdXI6ICgpID0+IHZvaWQgPSBqZXN0LmZuKCk7XG4gICAgZm9jdXM6ICgpID0+IHZvaWQgPSBqZXN0LmZuKCk7XG4gICAgbWVhc3VyZTogKCkgPT4gdm9pZCA9IGplc3QuZm4oKTtcbiAgICBtZWFzdXJlSW5XaW5kb3c6ICgpID0+IHZvaWQgPSBqZXN0LmZuKCk7XG4gICAgbWVhc3VyZUxheW91dDogKCkgPT4gdm9pZCA9IGplc3QuZm4oKTtcbiAgICBzZXROYXRpdmVQcm9wczogKCkgPT4gdm9pZCA9IGplc3QuZm4oKTtcbiAgfTtcblxuICBpZiAodmlld05hbWUgPT09ICdSQ1RWaWV3Jykge1xuICAgIENvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdWaWV3JztcbiAgfSBlbHNlIHtcbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSB2aWV3TmFtZTtcbiAgfVxuXG4gIHJldHVybiBDb21wb25lbnQ7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFZQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFBK0IsSUFBQUMsS0FBQSxHQUFBSCxNQUFBO0FBQUEsU0FBQUMsd0JBQUFHLENBQUEsRUFBQUMsQ0FBQSw2QkFBQUMsT0FBQSxNQUFBQyxDQUFBLE9BQUFELE9BQUEsSUFBQUUsQ0FBQSxPQUFBRixPQUFBLFlBQUFMLHVCQUFBLFlBQUFBLHdCQUFBRyxDQUFBLEVBQUFDLENBQUEsU0FBQUEsQ0FBQSxJQUFBRCxDQUFBLElBQUFBLENBQUEsQ0FBQUssVUFBQSxTQUFBTCxDQUFBLE1BQUFNLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEtBQUFDLFNBQUEsUUFBQUMsT0FBQSxFQUFBVixDQUFBLGlCQUFBQSxDQUFBLHVCQUFBQSxDQUFBLHlCQUFBQSxDQUFBLFNBQUFRLENBQUEsTUFBQUYsQ0FBQSxHQUFBTCxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxRQUFBRyxDQUFBLENBQUFLLEdBQUEsQ0FBQVgsQ0FBQSxVQUFBTSxDQUFBLENBQUFNLEdBQUEsQ0FBQVosQ0FBQSxHQUFBTSxDQUFBLENBQUFPLEdBQUEsQ0FBQWIsQ0FBQSxFQUFBUSxDQUFBLGNBQUFNLEVBQUEsSUFBQWQsQ0FBQSxnQkFBQWMsRUFBQSxPQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWhCLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLElBQUFELENBQUEsR0FBQVcsTUFBQSxDQUFBQyxjQUFBLEtBQUFELE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQW5CLENBQUEsRUFBQWMsRUFBQSxPQUFBUCxDQUFBLENBQUFLLEdBQUEsSUFBQUwsQ0FBQSxDQUFBTSxHQUFBLElBQUFQLENBQUEsQ0FBQUUsQ0FBQSxFQUFBTSxFQUFBLEVBQUFQLENBQUEsSUFBQUMsQ0FBQSxDQUFBTSxFQUFBLElBQUFkLENBQUEsQ0FBQWMsRUFBQSxXQUFBTixDQUFBLEtBQUFSLENBQUEsRUFBQUMsQ0FBQTtBQUFBLFNBQUFtQixXQUFBbkIsQ0FBQSxFQUFBSyxDQUFBLEVBQUFOLENBQUEsV0FBQU0sQ0FBQSxPQUFBZSxnQkFBQSxDQUFBWCxPQUFBLEVBQUFKLENBQUEsT0FBQWdCLDJCQUFBLENBQUFaLE9BQUEsRUFBQVQsQ0FBQSxFQUFBc0IseUJBQUEsS0FBQUMsT0FBQSxDQUFBQyxTQUFBLENBQUFuQixDQUFBLEVBQUFOLENBQUEsWUFBQXFCLGdCQUFBLENBQUFYLE9BQUEsRUFBQVQsQ0FBQSxFQUFBeUIsV0FBQSxJQUFBcEIsQ0FBQSxDQUFBcUIsS0FBQSxDQUFBMUIsQ0FBQSxFQUFBRCxDQUFBO0FBQUEsU0FBQXVCLDBCQUFBLGNBQUF0QixDQUFBLElBQUEyQixPQUFBLENBQUFDLFNBQUEsQ0FBQUMsT0FBQSxDQUFBZCxJQUFBLENBQUFRLE9BQUEsQ0FBQUMsU0FBQSxDQUFBRyxPQUFBLGlDQUFBM0IsQ0FBQSxhQUFBc0IseUJBQUEsWUFBQUEsMEJBQUEsYUFBQXRCLENBQUE7QUFHL0IsSUFBSThCLFNBQVMsR0FBRyxDQUFDO0FBT0YsU0FBU0MsbUJBQW1CQSxDQUN6Q0MsUUFBZ0IsRUFDYTtFQUM3QixJQUFNQyxTQUFTLGFBQUFDLGdCQUFBO0lBQUEsU0FBQUQsVUFBQTtNQUFBLElBQUFFLEtBQUE7TUFBQSxJQUFBQyxnQkFBQSxDQUFBM0IsT0FBQSxRQUFBd0IsU0FBQTtNQUFBLFNBQUFJLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBQUFDLElBQUEsT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7UUFBQUYsSUFBQSxDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtNQUFBO01BQUFQLEtBQUEsR0FBQWhCLFVBQUEsT0FBQWMsU0FBQSxLQUFBVSxNQUFBLENBQUFILElBQUE7TUFBQUwsS0FBQSxDQUNiUyxVQUFVLEdBQVdkLFNBQVMsRUFBRTtNQUFBSyxLQUFBLENBU2hDVSxJQUFJLEdBQWVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFBQVosS0FBQSxDQUM1QmEsS0FBSyxHQUFlRixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQUFaLEtBQUEsQ0FDN0JjLE9BQU8sR0FBZUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUFBWixLQUFBLENBQy9CZSxlQUFlLEdBQWVKLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7TUFBQVosS0FBQSxDQUN2Q2dCLGFBQWEsR0FBZUwsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztNQUFBWixLQUFBLENBQ3JDaUIsY0FBYyxHQUFlTixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO01BQUEsT0FBQVosS0FBQTtJQUFBO0lBQUEsSUFBQWtCLFVBQUEsQ0FBQTVDLE9BQUEsRUFBQXdCLFNBQUEsRUFBQUMsZ0JBQUE7SUFBQSxXQUFBb0IsYUFBQSxDQUFBN0MsT0FBQSxFQUFBd0IsU0FBQTtNQUFBc0IsR0FBQTtNQUFBQyxLQUFBLEVBWnRDLFNBQUFDLE1BQU1BLENBQUEsRUFBZTtRQUduQixPQUFPLElBQUFDLG9CQUFhLEVBQUMxQixRQUFRLEVBQUUsSUFBSSxDQUFDMkIsS0FBSyxFQUFFLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxRQUFRLENBQUM7TUFDakU7SUFBQztFQUFBLEVBUDZCOUQsS0FBSyxDQUFDbUMsU0FBUyxDQWdCOUM7RUFFRCxJQUFJRCxRQUFRLEtBQUssU0FBUyxFQUFFO0lBQzFCQyxTQUFTLENBQUM0QixXQUFXLEdBQUcsTUFBTTtFQUNoQyxDQUFDLE1BQU07SUFDTDVCLFNBQVMsQ0FBQzRCLFdBQVcsR0FBRzdCLFFBQVE7RUFDbEM7RUFFQSxPQUFPQyxTQUFTO0FBQ2xCIiwiaWdub3JlTGlzdCI6W119