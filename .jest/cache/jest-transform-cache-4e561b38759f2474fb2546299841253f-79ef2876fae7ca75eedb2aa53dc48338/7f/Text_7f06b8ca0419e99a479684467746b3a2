69ffd510161d0420929521c886f716a8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var PressabilityDebug = _interopRequireWildcard(require("../Pressability/PressabilityDebug"));
var _usePressability = _interopRequireDefault(require("../Pressability/usePressability"));
var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));
var _processColor = _interopRequireDefault(require("../StyleSheet/processColor"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var _TextAncestorContext = _interopRequireDefault(require("./TextAncestorContext"));
var _TextNativeComponent = require("./TextNativeComponent");
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["ref", "accessible", "accessibilityLabel", "accessibilityState", "allowFontScaling", "aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-label", "aria-selected", "children", "ellipsizeMode", "disabled", "id", "nativeID", "numberOfLines", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "selectable", "selectionColor", "suppressHighlighting", "style"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var TextImpl = function TextImpl(_ref) {
  var _accessibilityState2;
  var forwardedRef = _ref.ref,
    accessible = _ref.accessible,
    accessibilityLabel = _ref.accessibilityLabel,
    accessibilityState = _ref.accessibilityState,
    allowFontScaling = _ref.allowFontScaling,
    ariaBusy = _ref['aria-busy'],
    ariaChecked = _ref['aria-checked'],
    ariaDisabled = _ref['aria-disabled'],
    ariaExpanded = _ref['aria-expanded'],
    ariaLabel = _ref['aria-label'],
    ariaSelected = _ref['aria-selected'],
    children = _ref.children,
    ellipsizeMode = _ref.ellipsizeMode,
    disabled = _ref.disabled,
    id = _ref.id,
    nativeID = _ref.nativeID,
    numberOfLines = _ref.numberOfLines,
    onLongPress = _ref.onLongPress,
    onPress = _ref.onPress,
    onPressIn = _ref.onPressIn,
    onPressOut = _ref.onPressOut,
    onResponderGrant = _ref.onResponderGrant,
    onResponderMove = _ref.onResponderMove,
    onResponderRelease = _ref.onResponderRelease,
    onResponderTerminate = _ref.onResponderTerminate,
    onResponderTerminationRequest = _ref.onResponderTerminationRequest,
    onStartShouldSetResponder = _ref.onStartShouldSetResponder,
    pressRetentionOffset = _ref.pressRetentionOffset,
    selectable = _ref.selectable,
    selectionColor = _ref.selectionColor,
    suppressHighlighting = _ref.suppressHighlighting,
    style = _ref.style,
    restProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _accessibilityLabel = ariaLabel != null ? ariaLabel : accessibilityLabel;
  var _accessibilityState = accessibilityState;
  if (ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
    if (_accessibilityState != null) {
      _accessibilityState = {
        busy: ariaBusy != null ? ariaBusy : _accessibilityState.busy,
        checked: ariaChecked != null ? ariaChecked : _accessibilityState.checked,
        disabled: ariaDisabled != null ? ariaDisabled : _accessibilityState.disabled,
        expanded: ariaExpanded != null ? ariaExpanded : _accessibilityState.expanded,
        selected: ariaSelected != null ? ariaSelected : _accessibilityState.selected
      };
    } else {
      _accessibilityState = {
        busy: ariaBusy,
        checked: ariaChecked,
        disabled: ariaDisabled,
        expanded: ariaExpanded,
        selected: ariaSelected
      };
    }
  }
  var _accessibilityStateDisabled = (_accessibilityState2 = _accessibilityState) == null ? void 0 : _accessibilityState2.disabled;
  var _disabled = disabled != null ? disabled : _accessibilityStateDisabled;
  var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
  var _selectionColor = selectionColor != null ? (0, _processColor.default)(selectionColor) : undefined;
  var _style = style;
  if (__DEV__) {
    if (PressabilityDebug.isEnabled() && onPress != null) {
      _style = [style, {
        color: 'magenta'
      }];
    }
  }
  var _numberOfLines = numberOfLines;
  if (_numberOfLines != null && !(_numberOfLines >= 0)) {
    if (__DEV__) {
      console.error(`'numberOfLines' in <Text> must be a non-negative number, received: ${_numberOfLines}. The value will be set to 0.`);
    }
    _numberOfLines = 0;
  }
  var _selectable = selectable;
  var processedStyle = (0, _flattenStyle.default)(_style);
  if (processedStyle != null) {
    var overrides = null;
    if (typeof processedStyle.fontWeight === 'number') {
      overrides = overrides || {};
      overrides.fontWeight = processedStyle.fontWeight.toString();
    }
    if (processedStyle.userSelect != null) {
      _selectable = userSelectToSelectableMap[processedStyle.userSelect];
      overrides = overrides || {};
      overrides.userSelect = undefined;
    }
    if (processedStyle.verticalAlign != null) {
      overrides = overrides || {};
      overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[processedStyle.verticalAlign];
      overrides.verticalAlign = undefined;
    }
    if (overrides != null) {
      _style = [_style, overrides];
    }
  }
  var _nativeID = id != null ? id : nativeID;
  var hasTextAncestor = (0, _react.useContext)(_TextAncestorContext.default);
  if (hasTextAncestor) {
    if (isPressable) {
      return (0, _jsxRuntime.jsx)(NativePressableVirtualText, {
        ref: forwardedRef,
        textProps: Object.assign({}, restProps, {
          accessibilityLabel: _accessibilityLabel,
          accessibilityState: _accessibilityState,
          nativeID: _nativeID,
          numberOfLines: _numberOfLines,
          selectable: _selectable,
          selectionColor: _selectionColor,
          style: _style,
          disabled: disabled,
          children: children
        }),
        textPressabilityProps: {
          onLongPress: onLongPress,
          onPress: onPress,
          onPressIn: onPressIn,
          onPressOut: onPressOut,
          onResponderGrant: onResponderGrant,
          onResponderMove: onResponderMove,
          onResponderRelease: onResponderRelease,
          onResponderTerminate: onResponderTerminate,
          onResponderTerminationRequest: onResponderTerminationRequest,
          onStartShouldSetResponder: onStartShouldSetResponder,
          pressRetentionOffset: pressRetentionOffset,
          suppressHighlighting: suppressHighlighting
        }
      });
    }
    return (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, Object.assign({}, restProps, {
      accessibilityLabel: _accessibilityLabel,
      accessibilityState: _accessibilityState,
      nativeID: _nativeID,
      numberOfLines: _numberOfLines,
      ref: forwardedRef,
      selectable: _selectable,
      selectionColor: _selectionColor,
      style: _style,
      disabled: disabled,
      children: children
    }));
  }
  if (_disabled !== _accessibilityStateDisabled && (_disabled != null && _disabled !== false || _accessibilityStateDisabled != null && _accessibilityStateDisabled !== false)) {
    _accessibilityState = Object.assign({}, _accessibilityState, {
      disabled: _disabled
    });
  }
  var _accessible = _Platform.default.select({
    ios: accessible !== false,
    android: accessible == null ? onPress != null || onLongPress != null : accessible,
    default: accessible
  });
  var nativeText = null;
  if (isPressable) {
    nativeText = (0, _jsxRuntime.jsx)(NativePressableText, {
      ref: forwardedRef,
      textProps: Object.assign({}, restProps, {
        accessibilityLabel: _accessibilityLabel,
        accessibilityState: _accessibilityState,
        accessible: _accessible,
        allowFontScaling: allowFontScaling !== false,
        disabled: _disabled,
        ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
        nativeID: _nativeID,
        numberOfLines: _numberOfLines,
        selectable: _selectable,
        selectionColor: _selectionColor,
        style: _style,
        children: children
      }),
      textPressabilityProps: {
        onLongPress: onLongPress,
        onPress: onPress,
        onPressIn: onPressIn,
        onPressOut: onPressOut,
        onResponderGrant: onResponderGrant,
        onResponderMove: onResponderMove,
        onResponderRelease: onResponderRelease,
        onResponderTerminate: onResponderTerminate,
        onResponderTerminationRequest: onResponderTerminationRequest,
        onStartShouldSetResponder: onStartShouldSetResponder,
        pressRetentionOffset: pressRetentionOffset,
        suppressHighlighting: suppressHighlighting
      }
    });
  } else {
    nativeText = (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, Object.assign({}, restProps, {
      accessibilityLabel: _accessibilityLabel,
      accessibilityState: _accessibilityState,
      accessible: _accessible,
      allowFontScaling: allowFontScaling !== false,
      disabled: _disabled,
      ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
      nativeID: _nativeID,
      numberOfLines: _numberOfLines,
      ref: forwardedRef,
      selectable: _selectable,
      selectionColor: _selectionColor,
      style: _style,
      children: children
    }));
  }
  if (children == null) {
    return nativeText;
  }
  if (Array.isArray(children) && children.length <= 3) {
    var hasNonTextChild = false;
    for (var child of children) {
      if (child != null && typeof child === 'object') {
        hasNonTextChild = true;
        break;
      }
    }
    if (!hasNonTextChild) {
      return nativeText;
    }
  } else if (typeof children !== 'object') {
    return nativeText;
  }
  return (0, _jsxRuntime.jsx)(_TextAncestorContext.default, {
    value: true,
    children: nativeText
  });
};
TextImpl.displayName = 'Text';
function useTextPressability(_ref2) {
  var onLongPress = _ref2.onLongPress,
    onPress = _ref2.onPress,
    onPressIn = _ref2.onPressIn,
    onPressOut = _ref2.onPressOut,
    _onResponderGrant = _ref2.onResponderGrant,
    _onResponderMove = _ref2.onResponderMove,
    _onResponderRelease = _ref2.onResponderRelease,
    _onResponderTerminate = _ref2.onResponderTerminate,
    onResponderTerminationRequest = _ref2.onResponderTerminationRequest,
    onStartShouldSetResponder = _ref2.onStartShouldSetResponder,
    pressRetentionOffset = _ref2.pressRetentionOffset,
    suppressHighlighting = _ref2.suppressHighlighting;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isHighlighted = _useState2[0],
    setHighlighted = _useState2[1];
  var config = (0, _react.useMemo)(function () {
    var _onPressIn = onPressIn;
    var _onPressOut = onPressOut;
    if (_Platform.default.OS === 'ios') {
      _onPressIn = function _onPressIn(event) {
        setHighlighted(suppressHighlighting == null || !suppressHighlighting);
        onPressIn == null || onPressIn(event);
      };
      _onPressOut = function _onPressOut(event) {
        setHighlighted(false);
        onPressOut == null || onPressOut(event);
      };
    }
    return {
      disabled: false,
      pressRectOffset: pressRetentionOffset,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: _onPressIn,
      onPressOut: _onPressOut
    };
  }, [pressRetentionOffset, onLongPress, onPress, onPressIn, onPressOut, suppressHighlighting]);
  var eventHandlers = (0, _usePressability.default)(config);
  var eventHandlersForText = (0, _react.useMemo)(function () {
    return eventHandlers == null ? null : {
      onResponderGrant: function onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);
        if (_onResponderGrant != null) {
          _onResponderGrant(event);
        }
      },
      onResponderMove: function onResponderMove(event) {
        eventHandlers.onResponderMove(event);
        if (_onResponderMove != null) {
          _onResponderMove(event);
        }
      },
      onResponderRelease: function onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);
        if (_onResponderRelease != null) {
          _onResponderRelease(event);
        }
      },
      onResponderTerminate: function onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);
        if (_onResponderTerminate != null) {
          _onResponderTerminate(event);
        }
      },
      onClick: eventHandlers.onClick,
      onResponderTerminationRequest: onResponderTerminationRequest != null ? onResponderTerminationRequest : eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: onStartShouldSetResponder != null ? onStartShouldSetResponder : eventHandlers.onStartShouldSetResponder
    };
  }, [eventHandlers, _onResponderGrant, _onResponderMove, _onResponderRelease, _onResponderTerminate, onResponderTerminationRequest, onStartShouldSetResponder]);
  return (0, _react.useMemo)(function () {
    return [isHighlighted, eventHandlersForText];
  }, [isHighlighted, eventHandlersForText]);
}
var NativePressableVirtualText = function NativePressableVirtualText(_ref3) {
  var forwardedRef = _ref3.ref,
    textProps = _ref3.textProps,
    textPressabilityProps = _ref3.textPressabilityProps;
  var _useTextPressability = useTextPressability(textPressabilityProps),
    _useTextPressability2 = (0, _slicedToArray2.default)(_useTextPressability, 2),
    isHighlighted = _useTextPressability2[0],
    eventHandlersForText = _useTextPressability2[1];
  return (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, Object.assign({}, textProps, eventHandlersForText, {
    isHighlighted: isHighlighted,
    isPressable: true,
    ref: forwardedRef
  }));
};
var NativePressableText = function NativePressableText(_ref4) {
  var forwardedRef = _ref4.ref,
    textProps = _ref4.textProps,
    textPressabilityProps = _ref4.textPressabilityProps;
  var _useTextPressability3 = useTextPressability(textPressabilityProps),
    _useTextPressability4 = (0, _slicedToArray2.default)(_useTextPressability3, 2),
    isHighlighted = _useTextPressability4[0],
    eventHandlersForText = _useTextPressability4[1];
  return (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, Object.assign({}, textProps, eventHandlersForText, {
    isHighlighted: isHighlighted,
    isPressable: true,
    ref: forwardedRef
  }));
};
var userSelectToSelectableMap = {
  auto: true,
  text: true,
  none: false,
  contain: true,
  all: true
};
var verticalAlignToTextAlignVerticalMap = {
  auto: 'auto',
  top: 'top',
  bottom: 'bottom',
  middle: 'center'
};
var _default = exports.default = TextImpl;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,