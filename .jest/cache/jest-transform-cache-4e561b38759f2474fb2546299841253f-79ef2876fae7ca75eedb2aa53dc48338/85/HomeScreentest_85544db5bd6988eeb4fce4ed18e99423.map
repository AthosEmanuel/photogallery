{"version":3,"names":["_getJestObj","mock","getItem","jest","fn","setItem","CameraComponent","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_asyncStorage","_react","_components","_screen","_jsxRuntime","_require","describe","beforeEach","AsyncStorage","mockResolvedValue","it","default","_render","render","jsx","HomeScreen","getByPlaceholderText","getByText","expect","toBeTruthy","waitFor","_render2","getByRole","cameraButton","fireEvent","press","toHaveBeenCalled","_render3","getByTestId"],"sources":["HomeScreen.test.tsx"],"sourcesContent":["import { fireEvent, render, waitFor } from '@testing-library/react-native';\n\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport React from 'react';\nimport { CameraComponent } from '../src/components/';\nimport { HomeScreen } from '../src/screen/';\n\n// Mock do AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n}));\n\n// Mock do CameraComponent\njest.mock('../src/components/CameraComponent', () => ({\n  CameraComponent: jest.fn(() => null),\n}));\n\n// Mock do Ionicons\njest.mock('react-native-vector-icons/Ionicons', () => 'Icon');\n\ndescribe('HomeScreen', () => {\n  beforeEach(() => {\n    (AsyncStorage.getItem as jest.Mock).mockResolvedValue(null);\n  });\n\n  it('should render search input and camera button', async () => {\n    const { getByPlaceholderText, getByText } = render(<HomeScreen />);\n\n    expect(getByPlaceholderText('Buscar por data...')).toBeTruthy();\n    await waitFor(() => {\n      // Podemos testar outros elementos depois do useEffect\n    });\n  });\n\n  it('should open camera when camera button is pressed', async () => {\n    const { getByRole } = render(<HomeScreen />);\n\n    const cameraButton = getByRole('button'); // TouchableOpacity com Ionicons\n    fireEvent.press(cameraButton);\n\n    // CameraComponent deve ser chamado\n    await waitFor(() => {\n      expect(CameraComponent).toHaveBeenCalled();\n    });\n  });\n\n  it('should toggle dark mode', () => {\n    const { getByTestId } = render(<HomeScreen />);\n\n    // Se quiser, pode adicionar testID no bot√£o de tema para testar\n  });\n});\n"],"mappings":"AAQAA,WAAA,GAAKC,IAAI,CAAC,2CAA2C,EAAE;EAAA,OAAO;IAC5DC,OAAO,EAAEC,IAAI,CAACC,EAAE,CAAC,CAAC;IAClBC,OAAO,EAAEF,IAAI,CAACC,EAAE,CAAC;EACnB,CAAC;AAAA,CAAC,CAAC;AAGHJ,WAAA,GAAKC,IAAI,CAAC,mCAAmC,EAAE;EAAA,OAAO;IACpDK,eAAe,EAAEH,IAAI,CAACC,EAAE,CAAC;MAAA,OAAM,IAAI;IAAA;EACrC,CAAC;AAAA,CAAC,CAAC;AAGHJ,WAAA,GAAKC,IAAI,CAAC,oCAAoC,EAAE;EAAA,OAAM,MAAM;AAAA,EAAC;AAAC,IAAAM,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAnB9D,IAAAE,YAAA,GAAAF,OAAA;AAEA,IAAAG,aAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,MAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,WAAA,GAAAL,OAAA;AACA,IAAAM,OAAA,GAAAN,OAAA;AAA4C,IAAAO,WAAA,GAAAP,OAAA;AAAA,SAAAR,YAAA;EAAA,IAAAgB,QAAA,GAAAR,OAAA;IAAAL,IAAA,GAAAa,QAAA,CAAAb,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAgB5Cc,QAAQ,CAAC,YAAY,EAAE,YAAM;EAC3BC,UAAU,CAAC,YAAM;IACdC,qBAAY,CAACjB,OAAO,CAAekB,iBAAiB,CAAC,IAAI,CAAC;EAC7D,CAAC,CAAC;EAEFC,EAAE,CAAC,8CAA8C,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;IAC7D,IAAAC,OAAA,GAA4C,IAAAC,mBAAM,EAAC,IAAAT,WAAA,CAAAU,GAAA,EAACX,OAAA,CAAAY,UAAU,IAAE,CAAC,CAAC;MAA1DC,oBAAoB,GAAAJ,OAAA,CAApBI,oBAAoB;MAAEC,SAAS,GAAAL,OAAA,CAATK,SAAS;IAEvCC,MAAM,CAACF,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC;IAC/D,MAAM,IAAAC,oBAAO,EAAC,YAAM,CAEpB,CAAC,CAAC;EACJ,CAAC,EAAC;EAEFV,EAAE,CAAC,kDAAkD,MAAAZ,kBAAA,CAAAa,OAAA,EAAE,aAAY;IACjE,IAAAU,QAAA,GAAsB,IAAAR,mBAAM,EAAC,IAAAT,WAAA,CAAAU,GAAA,EAACX,OAAA,CAAAY,UAAU,IAAE,CAAC,CAAC;MAApCO,SAAS,GAAAD,QAAA,CAATC,SAAS;IAEjB,IAAMC,YAAY,GAAGD,SAAS,CAAC,QAAQ,CAAC;IACxCE,sBAAS,CAACC,KAAK,CAACF,YAAY,CAAC;IAG7B,MAAM,IAAAH,oBAAO,EAAC,YAAM;MAClBF,MAAM,CAACvB,2BAAe,CAAC,CAAC+B,gBAAgB,CAAC,CAAC;IAC5C,CAAC,CAAC;EACJ,CAAC,EAAC;EAEFhB,EAAE,CAAC,yBAAyB,EAAE,YAAM;IAClC,IAAAiB,QAAA,GAAwB,IAAAd,mBAAM,EAAC,IAAAT,WAAA,CAAAU,GAAA,EAACX,OAAA,CAAAY,UAAU,IAAE,CAAC,CAAC;MAAtCa,WAAW,GAAAD,QAAA,CAAXC,WAAW;EAGrB,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}