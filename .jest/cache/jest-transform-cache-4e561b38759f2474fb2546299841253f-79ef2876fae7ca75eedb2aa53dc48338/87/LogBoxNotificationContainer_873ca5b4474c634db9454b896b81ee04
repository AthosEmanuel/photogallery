527a3743c7605f16fd7c5081141a44a5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._LogBoxNotificationContainer = _LogBoxNotificationContainer;
exports.default = void 0;
var _SafeAreaView_INTERNAL_DO_NOT_USE = _interopRequireDefault(require("../../src/private/components/safeareaview/SafeAreaView_INTERNAL_DO_NOT_USE"));
var _View = _interopRequireDefault(require("../Components/View/View"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var LogBoxData = _interopRequireWildcard(require("./Data/LogBoxData"));
var _LogBoxLog = _interopRequireDefault(require("./Data/LogBoxLog"));
var _LogBoxNotification = _interopRequireDefault(require("./UI/LogBoxNotification"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _LogBoxNotificationContainer(props) {
  var logs = props.logs;
  var onDismissWarns = function onDismissWarns() {
    LogBoxData.clearWarnings();
  };
  var onDismissErrors = function onDismissErrors() {
    LogBoxData.clearErrors();
  };
  var setSelectedLog = function setSelectedLog(index) {
    LogBoxData.setSelectedLog(index);
  };
  function openLog(log) {
    if (log.onNotificationPress) {
      log.onNotificationPress();
      return;
    }
    var index = logs.length - 1;
    while (index > 0 && logs[index] !== log) {
      index -= 1;
    }
    setSelectedLog(index);
  }
  if (logs.length === 0 || props.isDisabled === true) {
    return null;
  }
  var warnings = logs.filter(function (log) {
    return log.level === 'warn';
  });
  var errors = logs.filter(function (log) {
    return log.level === 'error' || log.level === 'fatal';
  });
  return (0, _jsxRuntime.jsxs)(_SafeAreaView_INTERNAL_DO_NOT_USE.default, {
    style: styles.list,
    children: [warnings.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: warnings[warnings.length - 1],
        level: "warn",
        totalLogCount: warnings.length,
        onPressOpen: function onPressOpen() {
          return openLog(warnings[warnings.length - 1]);
        },
        onPressDismiss: onDismissWarns
      })
    }), errors.length > 0 && (0, _jsxRuntime.jsx)(_View.default, {
      style: styles.toast,
      children: (0, _jsxRuntime.jsx)(_LogBoxNotification.default, {
        log: errors[errors.length - 1],
        level: "error",
        totalLogCount: errors.length,
        onPressOpen: function onPressOpen() {
          return openLog(errors[errors.length - 1]);
        },
        onPressDismiss: onDismissErrors
      })
    })]
  });
}
var styles = _StyleSheet.default.create({
  list: {
    bottom: 20,
    left: 10,
    right: 10,
    position: 'absolute'
  },
  toast: {
    borderRadius: 8,
    marginBottom: 5,
    overflow: 'hidden'
  }
});
var _default = exports.default = LogBoxData.withSubscription(_LogBoxNotificationContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,