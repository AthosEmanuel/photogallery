b5fe6dcb11397afc05fb7fb037a1e3bb
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _requireNativeComponent = _interopRequireDefault(require("../../Libraries/ReactNative/requireNativeComponent"));
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
function codegenNativeComponent(componentName, options) {
  if (global.RN$Bridgeless === true && __DEV__) {
    console.warn(`Codegen didn't run for ${componentName}. This will be an error in the future. Make sure you are using @react-native/babel-preset when building your JavaScript code.`);
  }
  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;
  if (options != null && options.paperComponentNameDeprecated != null) {
    if (_UIManager.default.hasViewManagerConfig(componentName)) {
      componentNameInUse = componentName;
    } else if (options.paperComponentNameDeprecated != null && _UIManager.default.hasViewManagerConfig(options.paperComponentNameDeprecated)) {
      componentNameInUse = options.paperComponentNameDeprecated;
    } else {
      var _options$paperCompone;
      throw new Error(`Failed to find native component for either ${componentName} or ${(_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'}`);
    }
  }
  return (0, _requireNativeComponent.default)(componentNameInUse);
}
var _default = exports.default = codegenNativeComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1VJTWFuYWdlciIsImNvZGVnZW5OYXRpdmVDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwib3B0aW9ucyIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJfX0RFVl9fIiwiY29uc29sZSIsIndhcm4iLCJjb21wb25lbnROYW1lSW5Vc2UiLCJwYXBlckNvbXBvbmVudE5hbWUiLCJwYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkIiwiVUlNYW5hZ2VyIiwiaGFzVmlld01hbmFnZXJDb25maWciLCJfb3B0aW9ucyRwYXBlckNvbXBvbmUiLCJFcnJvciIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiY29kZWdlbk5hdGl2ZUNvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuLy8gVE9ETzogbW92ZSB0aGlzIGZpbGUgdG8gc2hpbXMvUmVhY3ROYXRpdmUgKHJlcXVpcmVzIFJlYWN0IHVwZGF0ZSBhbmQgc3luYylcblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL3NyYy9wcml2YXRlL3R5cGVzL0hvc3RDb21wb25lbnQnO1xuXG5pbXBvcnQgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgVUlNYW5hZ2VyIGZyb20gJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5cbi8vIFRPRE86IGltcG9ydCBmcm9tIENvZGVnZW5TY2hlbWEgb25jZSB3b3Jrc3BhY2VzIGFyZSBlbmFibGVkXG50eXBlIE5hdGl2ZUNvbXBvbmVudE9wdGlvbnMgPSAkUmVhZE9ubHk8e1xuICBpbnRlcmZhY2VPbmx5PzogYm9vbGVhbixcbiAgcGFwZXJDb21wb25lbnROYW1lPzogc3RyaW5nLFxuICBwYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkPzogc3RyaW5nLFxuICBleGNsdWRlZFBsYXRmb3Jtcz86ICRSZWFkT25seUFycmF5PCdpT1MnIHwgJ2FuZHJvaWQnPixcbn0+O1xuXG5leHBvcnQgdHlwZSBOYXRpdmVDb21wb25lbnRUeXBlPFQ6IHsuLi59PiA9IEhvc3RDb21wb25lbnQ8VD47XG5cbi8vIElmIHRoaXMgZnVuY3Rpb24gcnVucyB0aGVuIHRoYXQgbWVhbnMgdGhlIHZpZXcgY29uZmlncyB3ZXJlIG5vdFxuLy8gZ2VuZXJhdGVkIGF0IGJ1aWxkIHRpbWUgdXNpbmcgYEdlbmVyYXRlVmlld0NvbmZpZ0pzLmpzYC4gVGh1c1xuLy8gd2UgbmVlZCB0byBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAgdG8gZ2V0IHRoZSB2aWV3IGNvbmZpZ3MgZnJvbSB2aWV3IG1hbmFnZXJzLlxuLy8gYHJlcXVpcmVOYXRpdmVDb21wb25lbnRgIGlzIG5vdCBhdmFpbGFibGUgaW4gQnJpZGdlbGVzcyBtb2RlLlxuLy8gZS5nLiBUaGlzIGZ1bmN0aW9uIHJ1bnMgYXQgcnVudGltZSBpZiBgY29kZWdlbk5hdGl2ZUNvbXBvbmVudGAgd2FzIG5vdCBjYWxsZWRcbi8vIGZyb20gYSBmaWxlIHN1ZmZpeGVkIHdpdGggTmF0aXZlQ29tcG9uZW50LmpzLlxuZnVuY3Rpb24gY29kZWdlbk5hdGl2ZUNvbXBvbmVudDxQcm9wczogey4uLn0+KFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4gIG9wdGlvbnM/OiBOYXRpdmVDb21wb25lbnRPcHRpb25zLFxuKTogTmF0aXZlQ29tcG9uZW50VHlwZTxQcm9wcz4ge1xuICBpZiAoZ2xvYmFsLlJOJEJyaWRnZWxlc3MgPT09IHRydWUgJiYgX19ERVZfXykge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIGBDb2RlZ2VuIGRpZG4ndCBydW4gZm9yICR7Y29tcG9uZW50TmFtZX0uIFRoaXMgd2lsbCBiZSBhbiBlcnJvciBpbiB0aGUgZnV0dXJlLiBNYWtlIHN1cmUgeW91IGFyZSB1c2luZyBAcmVhY3QtbmF0aXZlL2JhYmVsLXByZXNldCB3aGVuIGJ1aWxkaW5nIHlvdXIgSmF2YVNjcmlwdCBjb2RlLmAsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBjb21wb25lbnROYW1lSW5Vc2UgPVxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWUgIT0gbnVsbFxuICAgICAgPyBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZVxuICAgICAgOiBjb21wb25lbnROYW1lO1xuXG4gIGlmIChvcHRpb25zICE9IG51bGwgJiYgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkICE9IG51bGwpIHtcbiAgICBpZiAoVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICBjb21wb25lbnROYW1lSW5Vc2UgPSBjb21wb25lbnROYW1lO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQgIT0gbnVsbCAmJlxuICAgICAgVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKG9wdGlvbnMucGFwZXJDb21wb25lbnROYW1lRGVwcmVjYXRlZClcbiAgICApIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdXG4gICAgICBjb21wb25lbnROYW1lSW5Vc2UgPSBvcHRpb25zLnBhcGVyQ29tcG9uZW50TmFtZURlcHJlY2F0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEZhaWxlZCB0byBmaW5kIG5hdGl2ZSBjb21wb25lbnQgZm9yIGVpdGhlciAke2NvbXBvbmVudE5hbWV9IG9yICR7XG4gICAgICAgICAgb3B0aW9ucy5wYXBlckNvbXBvbmVudE5hbWVEZXByZWNhdGVkID8/ICcodW5rbm93biknXG4gICAgICAgIH1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKHJlcXVpcmVOYXRpdmVDb21wb25lbnQ8UHJvcHM+KFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdXG4gICAgY29tcG9uZW50TmFtZUluVXNlLFxuICApOiBIb3N0Q29tcG9uZW50PFByb3BzPik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvZGVnZW5OYXRpdmVDb21wb25lbnQ7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBY0EsSUFBQUEsdUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQWtCQSxTQUFTRSxzQkFBc0JBLENBQzdCQyxhQUFxQixFQUNyQkMsT0FBZ0MsRUFDSjtFQUM1QixJQUFJQyxNQUFNLENBQUNDLGFBQWEsS0FBSyxJQUFJLElBQUlDLE9BQU8sRUFBRTtJQUM1Q0MsT0FBTyxDQUFDQyxJQUFJLENBQ1YsMEJBQTBCTixhQUFhLCtIQUN6QyxDQUFDO0VBQ0g7RUFFQSxJQUFJTyxrQkFBa0IsR0FDcEJOLE9BQU8sSUFBSUEsT0FBTyxDQUFDTyxrQkFBa0IsSUFBSSxJQUFJLEdBQ3pDUCxPQUFPLENBQUNPLGtCQUFrQixHQUMxQlIsYUFBYTtFQUVuQixJQUFJQyxPQUFPLElBQUksSUFBSSxJQUFJQSxPQUFPLENBQUNRLDRCQUE0QixJQUFJLElBQUksRUFBRTtJQUNuRSxJQUFJQyxrQkFBUyxDQUFDQyxvQkFBb0IsQ0FBQ1gsYUFBYSxDQUFDLEVBQUU7TUFDakRPLGtCQUFrQixHQUFHUCxhQUFhO0lBQ3BDLENBQUMsTUFBTSxJQUNMQyxPQUFPLENBQUNRLDRCQUE0QixJQUFJLElBQUksSUFDNUNDLGtCQUFTLENBQUNDLG9CQUFvQixDQUFDVixPQUFPLENBQUNRLDRCQUE0QixDQUFDLEVBQ3BFO01BRUFGLGtCQUFrQixHQUFHTixPQUFPLENBQUNRLDRCQUE0QjtJQUMzRCxDQUFDLE1BQU07TUFBQSxJQUFBRyxxQkFBQTtNQUNMLE1BQU0sSUFBSUMsS0FBSyxDQUNiLDhDQUE4Q2IsYUFBYSxRQUFBWSxxQkFBQSxHQUN6RFgsT0FBTyxDQUFDUSw0QkFBNEIsWUFBQUcscUJBQUEsR0FBSSxXQUFXLEVBRXZELENBQUM7SUFDSDtFQUNGO0VBRUEsT0FBUSxJQUFBRSwrQkFBc0IsRUFFNUJQLGtCQUNGLENBQUM7QUFDSDtBQUFDLElBQUFRLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWNsQixzQkFBc0IiLCJpZ25vcmVMaXN0IjpbXX0=