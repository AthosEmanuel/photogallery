fc160cedd00a451ab0f46869e226c95c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.camera = camera;
exports.imageLibrary = imageLibrary;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var DEFAULT_OPTIONS = {
  mediaType: 'photo',
  includeBase64: false,
  selectionLimit: 1
};
function camera() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_OPTIONS;
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  if (options.mediaType !== 'photo') {
    var result = {
      errorCode: 'others',
      errorMessage: 'For now, only photo mediaType is supported for web'
    };
    if (callback) callback(result);
    return Promise.resolve(result);
  }
  var container = document.createElement('div');
  var wrapper = document.createElement('div');
  var content = document.createElement('div');
  var buttons = document.createElement('div');
  var btnCapture = document.createElement('button');
  var btnBack = document.createElement('button');
  var btnSave = document.createElement('button');
  var btnCancel = document.createElement('button');
  var video = document.createElement('video');
  var canvas = document.createElement('canvas');
  var currentMediaStream = null;
  navigator.mediaDevices.getUserMedia({
    audio: false,
    video: true
  }).then(function (stream) {
    currentMediaStream = stream;
    video.srcObject = stream;
    video.play();
  }).catch(function (err) {
    console.log(err);
  });
  var isAlreadyUsingFontAwesome = !!document.getElementsByClassName('fa').length;
  if (!isAlreadyUsingFontAwesome) {
    var isAlreadyInjectedFontAwesome = !!document.getElementById('injected-font-awesome');
    if (!isAlreadyInjectedFontAwesome) {
      var head = document.getElementsByTagName('HEAD')[0];
      var link = document.createElement('link');
      link.id = 'injected-font-awesome';
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css';
      head.appendChild(link);
    }
  }
  container.style.cssText = `    
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.9);
    display: flex;
    align-items: center;
    justify-content: center;
  `;
  wrapper.style.cssText = `
    position: relative;
    min-height: min(480px, 100vh);
    min-width: min(640px, 100vw);
    border-radius: 8px 8px 0 0;
    background-color: #333333;
  `;
  video.style.cssText = canvas.style.cssText = `
    position: absolute;
    top: 0;
    left: 0;
    border-radius: 8px 8px 0 0;
  `;
  content.style.cssText = `
    display: flex;
    flex-direction: column;
    margin: auto;
  `;
  buttons.style.cssText = `
    display: flex;
    align-items: center;
    justify-content: space-evenly;
    min-height: 60px;
    background-color: #333333;
    border-radius: 0 0 8px 8px;  
  `;
  btnCapture.innerHTML = '<i class="fa fa-2x fa-camera"></i>';
  btnBack.innerHTML = '<i class="fa fa-2x fa-undo"></i>';
  btnSave.innerHTML = '<i class="fa fa-2x fa-check"></i>';
  btnCancel.innerHTML = '<i class="fa fa-2x fa-close"></i>';
  btnCapture.style.cssText = btnBack.style.cssText = btnSave.style.cssText = btnCancel.style.cssText = `
    padding: 10px;
    color: #f2f2f2;
    border: 0;
    background: transparent;
  `;
  wrapper.append(video);
  wrapper.append(canvas);
  content.append(wrapper);
  content.append(buttons);
  container.append(content);
  document.body.appendChild(container);
  var hasPhoto = false;
  var handleButtons = function handleButtons() {
    buttons.innerHTML = '';
    if (hasPhoto) {
      buttons.append(btnBack);
      buttons.append(btnSave);
    } else {
      buttons.append(btnCapture);
    }
    buttons.append(btnCancel);
  };
  handleButtons();
  function stopCamera() {
    document.body.removeChild(container);
    if (!currentMediaStream) return;
    currentMediaStream.getTracks().forEach(function (track) {
      track.stop();
    });
    video.srcObject = null;
    currentMediaStream = null;
  }
  return new Promise(function (resolve) {
    btnCapture.addEventListener('click', (0, _asyncToGenerator2.default)(function* () {
      var _canvas$getContext;
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      (_canvas$getContext = canvas.getContext('2d')) == null || _canvas$getContext.drawImage(video, 0, 0, canvas.width, canvas.height);
      hasPhoto = true;
      handleButtons();
    }));
    btnBack.addEventListener('click', function () {
      var _canvas$getContext2;
      (_canvas$getContext2 = canvas.getContext('2d')) == null || _canvas$getContext2.clearRect(0, 0, canvas.width, canvas.height);
      hasPhoto = false;
      handleButtons();
    });
    btnSave.addEventListener('click', (0, _asyncToGenerator2.default)(function* () {
      var uri = canvas.toDataURL('image/png');
      var asset = {
        uri: uri
      };
      var result = {
        assets: [asset]
      };
      if (callback) callback(result);
      resolve(result);
      stopCamera();
    }));
    btnCancel.addEventListener('click', (0, _asyncToGenerator2.default)(function* () {
      var result = {
        assets: [],
        didCancel: true
      };
      if (callback) callback(result);
      resolve(result);
      stopCamera();
    }));
  });
}
function imageLibrary() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_OPTIONS;
  var callback = arguments.length > 1 ? arguments[1] : undefined;
  if (options.mediaType !== 'photo') {
    var result = {
      errorCode: 'others',
      errorMessage: 'For now, only photo mediaType is supported for web'
    };
    if (callback) callback(result);
    return Promise.resolve(result);
  }
  var input = document.createElement('input');
  input.style.display = 'none';
  input.setAttribute('type', 'file');
  input.setAttribute('accept', getWebMediaType(options.mediaType));
  if (options.selectionLimit > 1) {
    input.setAttribute('multiple', 'multiple');
  }
  document.body.appendChild(input);
  return new Promise(function (resolve) {
    var inputChangeHandler = function () {
      var _ref4 = (0, _asyncToGenerator2.default)(function* () {
        if (input.files) {
          if (options.selectionLimit <= 1) {
            var img = yield readFile(input.files[0], {
              includeBase64: options.includeBase64
            });
            var _result = {
              assets: [img]
            };
            if (callback) callback(_result);
            resolve(_result);
          } else {
            var imgs = yield Promise.all(Array.from(input.files).map(function (file) {
              return readFile(file, {
                includeBase64: options.includeBase64
              });
            }));
            var _result2 = {
              didCancel: false,
              assets: imgs
            };
            if (callback) callback(_result2);
            resolve(_result2);
          }
        }
        cleanup();
      });
      return function inputChangeHandler() {
        return _ref4.apply(this, arguments);
      };
    }();
    var inputCancelHandler = function () {
      var _ref5 = (0, _asyncToGenerator2.default)(function* () {
        resolve({
          didCancel: true
        });
        cleanup();
      });
      return function inputCancelHandler() {
        return _ref5.apply(this, arguments);
      };
    }();
    var cleanup = function cleanup() {
      input.removeEventListener('change', inputChangeHandler);
      input.removeEventListener('cancel', inputCancelHandler);
      document.body.removeChild(input);
    };
    input.addEventListener('change', inputChangeHandler);
    input.addEventListener('cancel', inputCancelHandler);
    var event = new MouseEvent('click');
    input.dispatchEvent(event);
  });
}
function readFile(targetFile, options) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.onerror = function () {
      reject(new Error(`Failed to read the selected media because the operation failed.`));
    };
    reader.onload = function (_ref6) {
      var target = _ref6.target;
      var uri = target == null ? void 0 : target.result;
      var returnRaw = function returnRaw() {
        return resolve({
          uri: uri,
          width: 0,
          height: 0
        });
      };
      if (typeof uri === 'string') {
        var image = new Image();
        image.src = uri;
        image.onload = function () {
          var _image$naturalWidth, _image$naturalHeight;
          return resolve(Object.assign({
            uri: uri,
            width: (_image$naturalWidth = image.naturalWidth) != null ? _image$naturalWidth : image.width,
            height: (_image$naturalHeight = image.naturalHeight) != null ? _image$naturalHeight : image.height
          }, options.includeBase64 && {
            base64: uri.substr(uri.indexOf(',') + 1)
          }));
        };
        image.onerror = function () {
          return returnRaw();
        };
      } else {
        returnRaw();
      }
    };
    reader.readAsDataURL(targetFile);
  });
}
function getWebMediaType(mediaType) {
  var _webMediaTypes$mediaT;
  var webMediaTypes = {
    photo: 'image/*',
    video: 'video/*',
    mixed: 'image/*,video/*'
  };
  return (_webMediaTypes$mediaT = webMediaTypes[mediaType]) != null ? _webMediaTypes$mediaT : webMediaTypes.photo;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,