ed9fedc3b91e6228cb9d93477579e00f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = exports.Commands = void 0;
var _codegenNativeCommands = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeCommands"));
var _codegenNativeComponent = _interopRequireDefault(require("../../../../Libraries/Utilities/codegenNativeComponent"));
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var NativeComponentRegistry = require('react-native/Libraries/NativeComponent/NativeComponentRegistry');
var _require = require("react-native/Libraries/ReactNative/RendererProxy"),
  dispatchCommand = _require.dispatchCommand;
var nativeComponentName = 'DebuggingOverlay';
var __INTERNAL_VIEW_CONFIG = exports.__INTERNAL_VIEW_CONFIG = {
  uiViewClassName: "DebuggingOverlay",
  validAttributes: {}
};
var _default = exports.default = NativeComponentRegistry.get(nativeComponentName, function () {
  return __INTERNAL_VIEW_CONFIG;
});
var Commands = exports.Commands = {
  highlightTraceUpdates: function highlightTraceUpdates(ref, updates) {
    dispatchCommand(ref, "highlightTraceUpdates", [updates]);
  },
  highlightElements: function highlightElements(ref, elements) {
    dispatchCommand(ref, "highlightElements", [elements]);
  },
  clearElementsHighlights: function clearElementsHighlights(ref) {
    dispatchCommand(ref, "clearElementsHighlights", []);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29kZWdlbk5hdGl2ZUNvbW1hbmRzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IiwiX3JlcXVpcmUiLCJkaXNwYXRjaENvbW1hbmQiLCJuYXRpdmVDb21wb25lbnROYW1lIiwiX19JTlRFUk5BTF9WSUVXX0NPTkZJRyIsImV4cG9ydHMiLCJ1aVZpZXdDbGFzc05hbWUiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJfZGVmYXVsdCIsIkNvbW1hbmRzIiwiaGlnaGxpZ2h0VHJhY2VVcGRhdGVzIiwicmVmIiwidXBkYXRlcyIsImhpZ2hsaWdodEVsZW1lbnRzIiwiZWxlbWVudHMiLCJjbGVhckVsZW1lbnRzSGlnaGxpZ2h0cyJdLCJzb3VyY2VzIjpbIkRlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uLy4uLy4uLy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7UHJvY2Vzc2VkQ29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vLi4vLi4vTGlicmFyaWVzL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB0eXBlIHtIb3N0Q29tcG9uZW50fSBmcm9tICcuLi8uLi90eXBlcy9Ib3N0Q29tcG9uZW50JztcblxuaW1wb3J0IGNvZGVnZW5OYXRpdmVDb21tYW5kcyBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVXRpbGl0aWVzL2NvZGVnZW5OYXRpdmVDb21tYW5kcyc7XG5pbXBvcnQgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCBmcm9tICcuLi8uLi8uLi8uLi9MaWJyYXJpZXMvVXRpbGl0aWVzL2NvZGVnZW5OYXRpdmVDb21wb25lbnQnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG50eXBlIERlYnVnZ2luZ092ZXJsYXlOYXRpdmVQcm9wcyA9ICRSZWFkT25seTx7XG4gIC4uLlZpZXdQcm9wcyxcbn0+O1xuZXhwb3J0IHR5cGUgRGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudFR5cGUgPVxuICBIb3N0Q29tcG9uZW50PERlYnVnZ2luZ092ZXJsYXlOYXRpdmVQcm9wcz47XG5cbmV4cG9ydCB0eXBlIFRyYWNlVXBkYXRlID0ge1xuICBpZDogbnVtYmVyLFxuICByZWN0YW5nbGU6IEVsZW1lbnRSZWN0YW5nbGUsXG4gIGNvbG9yOiA/UHJvY2Vzc2VkQ29sb3JWYWx1ZSxcbn07XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnRSZWN0YW5nbGUgPSB7XG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbn07XG5cbmludGVyZmFjZSBOYXRpdmVDb21tYW5kcyB7XG4gICtoaWdobGlnaHRUcmFjZVVwZGF0ZXM6IChcbiAgICB2aWV3UmVmOiBSZWFjdC5FbGVtZW50UmVmPERlYnVnZ2luZ092ZXJsYXlOYXRpdmVDb21wb25lbnRUeXBlPixcbiAgICB1cGRhdGVzOiAkUmVhZE9ubHlBcnJheTxUcmFjZVVwZGF0ZT4sXG4gICkgPT4gdm9pZDtcbiAgK2hpZ2hsaWdodEVsZW1lbnRzOiAoXG4gICAgdmlld1JlZjogUmVhY3QuRWxlbWVudFJlZjxEZWJ1Z2dpbmdPdmVybGF5TmF0aXZlQ29tcG9uZW50VHlwZT4sXG4gICAgZWxlbWVudHM6ICRSZWFkT25seUFycmF5PEVsZW1lbnRSZWN0YW5nbGU+LFxuICApID0+IHZvaWQ7XG4gICtjbGVhckVsZW1lbnRzSGlnaGxpZ2h0czogKFxuICAgIHZpZXdSZWY6IFJlYWN0LkVsZW1lbnRSZWY8RGVidWdnaW5nT3ZlcmxheU5hdGl2ZUNvbXBvbmVudFR5cGU+LFxuICApID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBDb21tYW5kczogTmF0aXZlQ29tbWFuZHMgPSBjb2RlZ2VuTmF0aXZlQ29tbWFuZHM8TmF0aXZlQ29tbWFuZHM+KHtcbiAgc3VwcG9ydGVkQ29tbWFuZHM6IFtcbiAgICAnaGlnaGxpZ2h0VHJhY2VVcGRhdGVzJyxcbiAgICAnaGlnaGxpZ2h0RWxlbWVudHMnLFxuICAgICdjbGVhckVsZW1lbnRzSGlnaGxpZ2h0cycsXG4gIF0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgKGNvZGVnZW5OYXRpdmVDb21wb25lbnQ8RGVidWdnaW5nT3ZlcmxheU5hdGl2ZVByb3BzPihcbiAgJ0RlYnVnZ2luZ092ZXJsYXknLFxuKTogSG9zdENvbXBvbmVudDxEZWJ1Z2dpbmdPdmVybGF5TmF0aXZlUHJvcHM+KTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFjQSxJQUFBQSxzQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsdUJBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUgsT0FBQTtBQUErQixTQUFBRyx3QkFB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