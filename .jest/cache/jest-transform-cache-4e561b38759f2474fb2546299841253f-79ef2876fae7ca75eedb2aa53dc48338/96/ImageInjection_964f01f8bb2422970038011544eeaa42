4f44e2c6bbfce1065bb11af7fb2ae72a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unstable_getImageComponentDecorator = unstable_getImageComponentDecorator;
exports.unstable_registerImageAttachedCallback = unstable_registerImageAttachedCallback;
exports.unstable_setImageComponentDecorator = unstable_setImageComponentDecorator;
exports.unstable_unregisterImageAttachedCallback = unstable_unregisterImageAttachedCallback;
exports.useWrapRefWithImageAttachedCallbacks = useWrapRefWithImageAttachedCallbacks;
var _useMergeRefs = _interopRequireDefault(require("../Utilities/useMergeRefs"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var injectedImageComponentDecorator;
function unstable_setImageComponentDecorator(imageComponentDecorator) {
  injectedImageComponentDecorator = imageComponentDecorator;
}
function unstable_getImageComponentDecorator() {
  return injectedImageComponentDecorator;
}
var imageAttachedCallbacks = new Set();
function unstable_registerImageAttachedCallback(callback) {
  imageAttachedCallbacks.add(callback);
}
function unstable_unregisterImageAttachedCallback(callback) {
  imageAttachedCallbacks.delete(callback);
}
function useWrapRefWithImageAttachedCallbacks(forwardedRef) {
  var pendingCleanupCallbacks = (0, _react.useRef)([]);
  var imageAttachedCallbacksRef = (0, _react.useRef)(null);
  if (imageAttachedCallbacksRef.current == null) {
    imageAttachedCallbacksRef.current = function (node) {
      if (node == null) {
        if (pendingCleanupCallbacks.current.length > 0) {
          pendingCleanupCallbacks.current.forEach(function (cb) {
            return cb();
          });
          pendingCleanupCallbacks.current = [];
        }
      } else {
        imageAttachedCallbacks.forEach(function (imageAttachedCallback) {
          var maybeCleanupCallback = imageAttachedCallback(node);
          if (maybeCleanupCallback != null) {
            pendingCleanupCallbacks.current.push(maybeCleanupCallback);
          }
        });
      }
    };
  }
  return (0, _useMergeRefs.default)(forwardedRef, imageAttachedCallbacksRef.current);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXNlTWVyZ2VSZWZzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiZSIsInQiLCJXZWFrTWFwIiwiciIsIm4iLCJfX2VzTW9kdWxlIiwibyIsImkiLCJmIiwiX19wcm90b19fIiwiZGVmYXVsdCIsImhhcyIsImdldCIsInNldCIsIl90IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpbmplY3RlZEltYWdlQ29tcG9uZW50RGVjb3JhdG9yIiwidW5zdGFibGVfc2V0SW1hZ2VDb21wb25lbnREZWNvcmF0b3IiLCJpbWFnZUNvbXBvbmVudERlY29yYXRvciIsInVuc3RhYmxlX2dldEltYWdlQ29tcG9uZW50RGVjb3JhdG9yIiwiaW1hZ2VBdHRhY2hlZENhbGxiYWNrcyIsIlNldCIsInVuc3RhYmxlX3JlZ2lzdGVySW1hZ2VBdHRhY2hlZENhbGxiYWNrIiwiY2FsbGJhY2siLCJhZGQiLCJ1bnN0YWJsZV91bnJlZ2lzdGVySW1hZ2VBdHRhY2hlZENhbGxiYWNrIiwiZGVsZXRlIiwidXNlV3JhcFJlZldpdGhJbWFnZUF0dGFjaGVkQ2FsbGJhY2tzIiwiZm9yd2FyZGVkUmVmIiwicGVuZGluZ0NsZWFudXBDYWxsYmFja3MiLCJ1c2VSZWYiLCJpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzUmVmIiwiY3VycmVudCIsIm5vZGUiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY2IiLCJpbWFnZUF0dGFjaGVkQ2FsbGJhY2siLCJtYXliZUNsZWFudXBDYWxsYmFjayIsInB1c2giLCJ1c2VNZXJnZVJlZnMiXSwic291cmNlcyI6WyJJbWFnZUluamVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge1xuICBBYnN0cmFjdEltYWdlQW5kcm9pZCxcbiAgQWJzdHJhY3RJbWFnZUlPUyxcbiAgSW1hZ2VUeXBlIGFzIEltYWdlQ29tcG9uZW50LFxufSBmcm9tICcuL0ltYWdlVHlwZXMuZmxvdyc7XG5cbmltcG9ydCB1c2VNZXJnZVJlZnMgZnJvbSAnLi4vVXRpbGl0aWVzL3VzZU1lcmdlUmVmcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZVJlZn0gZnJvbSAncmVhY3QnO1xuXG50eXBlIEltYWdlQ29tcG9uZW50RGVjb3JhdG9yID0gKEFic3RyYWN0SW1hZ2VBbmRyb2lkID0+IEFic3RyYWN0SW1hZ2VBbmRyb2lkKSAmXG4gIChBYnN0cmFjdEltYWdlSU9TID0+IEFic3RyYWN0SW1hZ2VJT1MpO1xuXG5sZXQgaW5qZWN0ZWRJbWFnZUNvbXBvbmVudERlY29yYXRvcjogP0ltYWdlQ29tcG9uZW50RGVjb3JhdG9yO1xuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfc2V0SW1hZ2VDb21wb25lbnREZWNvcmF0b3IoXG4gIGltYWdlQ29tcG9uZW50RGVjb3JhdG9yOiA/SW1hZ2VDb21wb25lbnREZWNvcmF0b3IsXG4pOiB2b2lkIHtcbiAgaW5qZWN0ZWRJbWFnZUNvbXBvbmVudERlY29yYXRvciA9IGltYWdlQ29tcG9uZW50RGVjb3JhdG9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfZ2V0SW1hZ2VDb21wb25lbnREZWNvcmF0b3IoKTogP0ltYWdlQ29tcG9uZW50RGVjb3JhdG9yIHtcbiAgcmV0dXJuIGluamVjdGVkSW1hZ2VDb21wb25lbnREZWNvcmF0b3I7XG59XG5cbnR5cGUgSW1hZ2VJbnN0YW5jZSA9IFJlYWN0LkVsZW1lbnRSZWY8SW1hZ2VDb21wb25lbnQ+O1xuXG50eXBlIEltYWdlQXR0YWNoZWRDYWxsYmFjayA9IChcbiAgaW1hZ2VJbnN0YW5jZTogSW1hZ2VJbnN0YW5jZSxcbikgPT4gdm9pZCB8ICgoKSA9PiB2b2lkKTtcblxuY29uc3QgaW1hZ2VBdHRhY2hlZENhbGxiYWNrcyA9IG5ldyBTZXQ8SW1hZ2VBdHRhY2hlZENhbGxiYWNrPigpO1xuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfcmVnaXN0ZXJJbWFnZUF0dGFjaGVkQ2FsbGJhY2soXG4gIGNhbGxiYWNrOiBJbWFnZUF0dGFjaGVkQ2FsbGJhY2ssXG4pOiB2b2lkIHtcbiAgaW1hZ2VBdHRhY2hlZENhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5zdGFibGVfdW5yZWdpc3RlckltYWdlQXR0YWNoZWRDYWxsYmFjayhcbiAgY2FsbGJhY2s6IEltYWdlQXR0YWNoZWRDYWxsYmFjayxcbik6IHZvaWQge1xuICBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzLmRlbGV0ZShjYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VXcmFwUmVmV2l0aEltYWdlQXR0YWNoZWRDYWxsYmFja3MoXG4gIGZvcndhcmRlZFJlZjogUmVhY3QuUmVmU2V0dGVyPEltYWdlSW5zdGFuY2U+LFxuKTogUmVhY3QuUmVmU2V0dGVyPEltYWdlSW5zdGFuY2U+IHtcbiAgY29uc3QgcGVuZGluZ0NsZWFudXBDYWxsYmFja3MgPSB1c2VSZWY8QXJyYXk8KCkgPT4gdm9pZD4+KFtdKTtcblxuICBjb25zdCBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzUmVmID1cbiAgICB1c2VSZWY8Pyhub2RlOiBJbWFnZUluc3RhbmNlIHwgbnVsbCkgPT4gdm9pZD4obnVsbCk7XG5cbiAgaWYgKGltYWdlQXR0YWNoZWRDYWxsYmFja3NSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaW1hZ2VBdHRhY2hlZENhbGxiYWNrc1JlZi5jdXJyZW50ID0gKG5vZGU6IEltYWdlSW5zdGFuY2UgfCBudWxsKTogdm9pZCA9PiB7XG4gICAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChwZW5kaW5nQ2xlYW51cENhbGxiYWNrcy5jdXJyZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBwZW5kaW5nQ2xlYW51cENhbGxiYWNrcy5jdXJyZW50LmZvckVhY2goY2IgPT4gY2IoKSk7XG4gICAgICAgICAgcGVuZGluZ0NsZWFudXBDYWxsYmFja3MuY3VycmVudCA9IFtdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUF0dGFjaGVkQ2FsbGJhY2tzLmZvckVhY2goaW1hZ2VBdHRhY2hlZENhbGxiYWNrID0+IHtcbiAgICAgICAgICBjb25zdCBtYXliZUNsZWFudXBDYWxsYmFjayA9IGltYWdlQXR0YWNoZWRDYWxsYmFjayhub2RlKTtcbiAgICAgICAgICBpZiAobWF5YmVDbGVhbnVwQ2FsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGVuZGluZ0NsZWFudXBDYWxsYmFja3MuY3VycmVudC5wdXNoKG1heWJlQ2xlYW51cENhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBgdXNlTWVyZ2VSZWZzYCByZXR1cm5zIGEgc3RhYmxlIHJlZiBpZiBpdHMgYXJndW1lbnRzIGRvbid0IGNoYW5nZS5cbiAgcmV0dXJuIHVzZU1lcmdlUmVmczxJbWFnZUluc3RhbmNlPihcbiAgICBmb3J3YXJkZWRSZWYsXG4gICAgaW1hZ2VBdHRhY2hlZENhbGxiYWNrc1JlZi5jdXJyZW50LFxuICApO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFnQkEsSUFBQUEsYUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBQyx1QkFBQSxDQUFBRixPQUFBO0FBQStCLElBQUFHLEtBQUEsR0FBQUYsTUFBQTtBQUFBLFNBQUFDLHdCQUFBRSxDQUFBLEVBQUFDLENBQUEsNkJBQUFDLE9BQUEsTUFBQUMsQ0FBQSxPQUFBRCxPQUFBLElBQUFFLENBQUEsT0FBQUYsT0FBQSxZQUFBSix1QkFBQSxZQUFBQSx3QkFBQUUsQ0FBQSxFQUFBQyxDQUFBLFNBQUFBLENBQUEsSUFBQUQsQ0FBQSxJQUFBQSxDQUFBLENBQUFLLFVBQUEsU0FBQUwsQ0FBQSxNQUFBTSxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxLQUFBQyxTQUFBLFFBQUFDLE9BQUEsRUFBQVYsQ0FBQSxpQkFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxTQUFBUSxDQUFBLE1BQUFGLENBQUEsR0FBQUwsQ0FBQSxHQUFBRyxDQUFBLEdBQUFELENBQUEsUUFBQUcsQ0FBQSxDQUFBSyxHQUFBLENBQUFYLENBQUEsVUFBQU0sQ0FBQSxDQUFBTSxHQUFBLENBQUFaLENBQUEsR0FBQU0sQ0FBQSxDQUFBTyxHQUFBLENBQUFiLENBQUEsRUFBQVEsQ0FBQSxjQUFBTSxFQUFBLElBQUFkLENBQUEsZ0JBQUFjLEVBQUEsT0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFoQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxJQUFBRCxDQUFBLEdBQUFXLE1BQUEsQ0FBQUMsY0FBQSxLQUFBRCxNQUFBLENBQUFFLHdCQUFBLENBQUFuQixDQUFBLEVBQUFjLEVBQUEsT0FBQVAsQ0FBQSxDQUFBSyxHQUFBLElBQUFMLENBQUEsQ0FBQU0sR0FBQSxJQUFBUCxDQUFBLENBQUFFLENBQUEsRUFBQU0sRUFBQSxFQUFBUCxDQUFBLElBQUFDLENBQUEsQ0FBQU0sRUFBQSxJQUFBZCxDQUFBLENBQUFjLEVBQUEsV0FBQU4sQ0FBQSxLQUFBUixDQUFBLEVBQUFDLENBQUE7QUFNL0IsSUFBSW1CLCtCQUF5RDtBQUV0RCxTQUFTQyxtQ0FBbUNBLENBQ2pEQyx1QkFBaUQsRUFDM0M7RUFDTkYsK0JBQStCLEdBQUdFLHVCQUF1QjtBQUMzRDtBQUVPLFNBQVNDLG1DQUFtQ0EsQ0FBQSxFQUE2QjtFQUM5RSxPQUFPSCwrQkFBK0I7QUFDeEM7QUFRQSxJQUFNSSxzQkFBc0IsR0FBRyxJQUFJQyxHQUFHLENBQXdCLENBQUM7QUFFeEQsU0FBU0Msc0NBQXNDQSxDQUNwREMsUUFBK0IsRUFDekI7RUFDTkgsc0JBQXNCLENBQUNJLEdBQUcsQ0FBQ0QsUUFBUSxDQUFDO0FBQ3RDO0FBRU8sU0FBU0Usd0NBQXdDQSxDQUN0REYsUUFBK0IsRUFDekI7RUFDTkgsc0JBQXNCLENBQUNNLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDO0FBQ3pDO0FBRU8sU0FBU0ksb0NBQW9DQSxDQUNsREMsWUFBNEMsRUFDWjtFQUNoQyxJQUFNQyx1QkFBdUIsR0FBRyxJQUFBQyxhQUFNLEVBQW9CLEVBQUUsQ0FBQztFQUU3RCxJQUFNQyx5QkFBeUIsR0FDN0IsSUFBQUQsYUFBTSxFQUF3QyxJQUFJLENBQUM7RUFFckQsSUFBSUMseUJBQXlCLENBQUNDLE9BQU8sSUFBSSxJQUFJLEVBQUU7SUFDN0NELHlCQUF5QixDQUFDQyxPQUFPLEdBQUcsVUFBQ0MsSUFBMEIsRUFBVztNQUN4RSxJQUFJQSxJQUFJLElBQUksSUFBSSxFQUFFO1FBQ2hCLElBQUlKLHVCQUF1QixDQUFDRyxPQUFPLENBQUNFLE1BQU0sR0FBRyxDQUFDLEVBQUU7VUFDOUNMLHVCQUF1QixDQUFDRyxPQUFPLENBQUNHLE9BQU8sQ0FBQyxVQUFBQyxFQUFFO1lBQUEsT0FBSUEsRUFBRSxDQUFDLENBQUM7VUFBQSxFQUFDO1VBQ25EUCx1QkFBdUIsQ0FBQ0csT0FBTyxHQUFHLEVBQUU7UUFDdEM7TUFDRixDQUFDLE1BQU07UUFDTFosc0JBQXNCLENBQUNlLE9BQU8sQ0FBQyxVQUFBRSxxQkFBcUIsRUFBSTtVQUN0RCxJQUFNQyxvQkFBb0IsR0FBR0QscUJBQXFCLENBQUNKLElBQUksQ0FBQztVQUN4RCxJQUFJSyxvQkFBb0IsSUFBSSxJQUFJLEVBQUU7WUFDaENULHVCQUF1QixDQUFDRyxPQUFPLENBQUNPLElBQUksQ0FBQ0Qsb0JBQW9CLENBQUM7VUFDNUQ7UUFDRixDQUFDLENBQUM7TUFDSjtJQUNGLENBQUM7RUFDSDtFQUdBLE9BQU8sSUFBQUUscUJBQVksRUFDakJaLFlBQVksRUFDWkcseUJBQXlCLENBQUNDLE9BQzVCLENBQUM7QUFDSCIsImlnbm9yZUxpc3QiOltdfQ==