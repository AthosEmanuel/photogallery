14bba7ee8eb4c4549f7bdb9fe492c03e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _Animated = _interopRequireDefault(require("../../Animated/Animated"));
var _ReactFabricPublicInstanceUtils = require("../../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils");
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useMergeRefs = _interopRequireDefault(require("../../Utilities/useMergeRefs"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["ref"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var ScrollViewStickyHeader = function ScrollViewStickyHeader(_ref) {
  var forwardedRef = _ref.ref,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var inverted = props.inverted,
    scrollViewHeight = props.scrollViewHeight,
    hiddenOnScroll = props.hiddenOnScroll,
    scrollAnimatedValue = props.scrollAnimatedValue,
    _nextHeaderLayoutY = props.nextHeaderLayoutY;
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    measured = _useState2[0],
    setMeasured = _useState2[1];
  var _useState3 = (0, _react.useState)(0),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    layoutY = _useState4[0],
    setLayoutY = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    layoutHeight = _useState6[0],
    setLayoutHeight = _useState6[1];
  var _useState7 = (0, _react.useState)(null),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    translateY = _useState8[0],
    setTranslateY = _useState8[1];
  var _useState9 = (0, _react.useState)(_nextHeaderLayoutY),
    _useState0 = (0, _slicedToArray2.default)(_useState9, 2),
    nextHeaderLayoutY = _useState0[0],
    setNextHeaderLayoutY = _useState0[1];
  var _useState1 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState1, 2),
    isFabric = _useState10[0],
    setIsFabric = _useState10[1];
  var callbackRef = (0, _react.useCallback)(function (ref) {
    if (ref == null) {
      return;
    }
    ref.setNextHeaderY = setNextHeaderLayoutY;
    setIsFabric((0, _ReactFabricPublicInstanceUtils.isPublicInstance)(ref));
  }, []);
  var ref = (0, _useMergeRefs.default)(callbackRef, forwardedRef);
  var offset = (0, _react.useMemo)(function () {
    return hiddenOnScroll === true ? _Animated.default.diffClamp(scrollAnimatedValue.interpolate({
      extrapolateLeft: 'clamp',
      inputRange: [layoutY, layoutY + 1],
      outputRange: [0, 1]
    }).interpolate({
      inputRange: [0, 1],
      outputRange: [0, -1]
    }), -layoutHeight, 0) : null;
  }, [scrollAnimatedValue, layoutHeight, layoutY, hiddenOnScroll]);
  var _useState11 = (0, _react.useState)(function () {
      var inputRange = [-1, 0];
      var outputRange = [0, 0];
      var initialTranslateY = scrollAnimatedValue.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });
      if (offset != null) {
        return _Animated.default.add(initialTranslateY, offset);
      }
      return initialTranslateY;
    }),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    animatedTranslateY = _useState12[0],
    setAnimatedTranslateY = _useState12[1];
  var haveReceivedInitialZeroTranslateY = (0, _react.useRef)(true);
  var translateYDebounceTimer = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (translateY !== 0 && translateY != null) {
      haveReceivedInitialZeroTranslateY.current = false;
    }
  }, [translateY]);
  var animatedValueListener = (0, _react.useCallback)(function (_ref2) {
    var value = _ref2.value;
    var debounceTimeout = _Platform.default.OS === 'android' ? 15 : 64;
    if (value === 0 && !haveReceivedInitialZeroTranslateY.current) {
      haveReceivedInitialZeroTranslateY.current = true;
      return;
    }
    if (translateYDebounceTimer.current != null) {
      clearTimeout(translateYDebounceTimer.current);
    }
    translateYDebounceTimer.current = setTimeout(function () {
      return setTranslateY(value);
    }, debounceTimeout);
  }, []);
  (0, _react.useEffect)(function () {
    var inputRange = [-1, 0];
    var outputRange = [0, 0];
    if (measured) {
      if (inverted === true) {
        if (scrollViewHeight != null) {
          var stickStartPoint = layoutY + layoutHeight - scrollViewHeight;
          if (stickStartPoint > 0) {
            inputRange.push(stickStartPoint);
            outputRange.push(0);
            inputRange.push(stickStartPoint + 1);
            outputRange.push(1);
            var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight - scrollViewHeight;
            if (collisionPoint > stickStartPoint) {
              inputRange.push(collisionPoint, collisionPoint + 1);
              outputRange.push(collisionPoint - stickStartPoint, collisionPoint - stickStartPoint);
            }
          }
        }
      } else {
        inputRange.push(layoutY);
        outputRange.push(0);
        var _collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
        if (_collisionPoint >= layoutY) {
          inputRange.push(_collisionPoint, _collisionPoint + 1);
          outputRange.push(_collisionPoint - layoutY, _collisionPoint - layoutY);
        } else {
          inputRange.push(layoutY + 1);
          outputRange.push(1);
        }
      }
    }
    var newAnimatedTranslateY = scrollAnimatedValue.interpolate({
      inputRange: inputRange,
      outputRange: outputRange
    });
    if (offset != null) {
      newAnimatedTranslateY = _Animated.default.add(newAnimatedTranslateY, offset);
    }
    var animatedListenerId;
    if (isFabric) {
      animatedListenerId = newAnimatedTranslateY.addListener(animatedValueListener);
    }
    setAnimatedTranslateY(newAnimatedTranslateY);
    return function () {
      if (animatedListenerId) {
        newAnimatedTranslateY.removeListener(animatedListenerId);
      }
      if (translateYDebounceTimer.current != null) {
        clearTimeout(translateYDebounceTimer.current);
      }
    };
  }, [nextHeaderLayoutY, measured, layoutHeight, layoutY, scrollViewHeight, scrollAnimatedValue, inverted, offset, animatedValueListener, isFabric]);
  var _onLayout = function _onLayout(event) {
    setLayoutY(event.nativeEvent.layout.y);
    setLayoutHeight(event.nativeEvent.layout.height);
    setMeasured(true);
    props.onLayout(event);
    var child = React.Children.only(props.children);
    if (child.props.onLayout) {
      child.props.onLayout(event);
    }
  };
  var child = React.Children.only(props.children);
  var passthroughAnimatedPropExplicitValues = isFabric && translateY != null ? {
    style: {
      transform: [{
        translateY: translateY
      }]
    }
  } : null;
  return (0, _jsxRuntime.jsx)(_Animated.default.View, {
    collapsable: false,
    nativeID: props.nativeID,
    onLayout: _onLayout,
    ref: ref,
    style: [child.props.style, styles.header, {
      transform: [{
        translateY: animatedTranslateY
      }]
    }],
    passthroughAnimatedPropExplicitValues: passthroughAnimatedPropExplicitValues,
    children: (0, _react.cloneElement)(child, {
      style: styles.fill,
      onLayout: undefined
    })
  });
};
var styles = _StyleSheet.default.create({
  header: {
    zIndex: 10
  },
  fill: {
    flex: 1
  }
});
var _default = exports.default = ScrollViewStickyHeader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQW5pbWF0ZWQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9SZWFjdEZhYnJpY1B1YmxpY0luc3RhbmNlVXRpbHMiLCJfU3R5bGVTaGVldCIsIl9QbGF0Zm9ybSIsIl91c2VNZXJnZVJlZnMiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIlJlYWN0IiwiX2pzeFJ1bnRpbWUiLCJfZXhjbHVkZWQiLCJlIiwidCIsIldlYWtNYXAiLCJyIiwibiIsIl9fZXNNb2R1bGUiLCJvIiwiaSIsImYiLCJfX3Byb3RvX18iLCJkZWZhdWx0IiwiaGFzIiwiZ2V0Iiwic2V0IiwiX3QiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlNjcm9sbFZpZXdTdGlja3lIZWFkZXIiLCJfcmVmIiwiZm9yd2FyZGVkUmVmIiwicmVmIiwicHJvcHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiaW52ZXJ0ZWQiLCJzY3JvbGxWaWV3SGVpZ2h0IiwiaGlkZGVuT25TY3JvbGwiLCJzY3JvbGxBbmltYXRlZFZhbHVlIiwiX25leHRIZWFkZXJMYXlvdXRZIiwibmV4dEhlYWRlckxheW91dFkiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJfc2xpY2VkVG9BcnJheTIiLCJtZWFzdXJlZCIsInNldE1lYXN1cmVkIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJsYXlvdXRZIiwic2V0TGF5b3V0WSIsIl91c2VTdGF0ZTUiLCJfdXNlU3RhdGU2IiwibGF5b3V0SGVpZ2h0Iiwic2V0TGF5b3V0SGVpZ2h0IiwiX3VzZVN0YXRlNyIsIl91c2VTdGF0ZTgiLCJ0cmFuc2xhdGVZIiwic2V0VHJhbnNsYXRlWSIsIl91c2VTdGF0ZTkiLCJfdXNlU3RhdGUwIiwic2V0TmV4dEhlYWRlckxheW91dFkiLCJfdXNlU3RhdGUxIiwiX3VzZVN0YXRlMTAiLCJpc0ZhYnJpYyIsInNldElzRmFicmljIiwiY2FsbGJhY2tSZWYiLCJ1c2VDYWxsYmFjayIsInNldE5leHRIZWFkZXJZIiwiaXNGYWJyaWNQdWJsaWNJbnN0YW5jZSIsInVzZU1lcmdlUmVmcyIsIm9mZnNldCIsInVzZU1lbW8iLCJBbmltYXRlZCIsImRpZmZDbGFtcCIsImludGVycG9sYXRlIiwiZXh0cmFwb2xhdGVMZWZ0IiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwiX3VzZVN0YXRlMTEiLCJpbml0aWFsVHJhbnNsYXRlWSIsImFkZCIsIl91c2VTdGF0ZTEyIiwiYW5pbWF0ZWRUcmFuc2xhdGVZIiwic2V0QW5pbWF0ZWRUcmFuc2xhdGVZIiwiaGF2ZVJlY2VpdmVkSW5pdGlhbFplcm9UcmFuc2xhdGVZIiwidXNlUmVmIiwidHJhbnNsYXRlWURlYm91bmNlVGltZXIiLCJ1c2VFZmZlY3QiLCJjdXJyZW50IiwiYW5pbWF0ZWRWYWx1ZUxpc3RlbmVyIiwiX3JlZjIiLCJ2YWx1ZSIsImRlYm91bmNlVGltZW91dCIsIlBsYXRmb3JtIiwiT1MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0Iiwic3RpY2tTdGFydFBvaW50IiwicHVzaCIsImNvbGxpc2lvblBvaW50IiwibmV3QW5pbWF0ZWRUcmFuc2xhdGVZIiwiYW5pbWF0ZWRMaXN0ZW5lcklkIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsIl9vbkxheW91dCIsImV2ZW50IiwibmF0aXZlRXZlbnQiLCJsYXlvdXQiLCJ5IiwiaGVpZ2h0Iiwib25MYXlvdXQiLCJjaGlsZCIsIkNoaWxkcmVuIiwib25seSIsImNoaWxkcmVuIiwicGFzc3Rocm91Z2hBbmltYXRlZFByb3BFeHBsaWNpdFZhbHVlcyIsInN0eWxlIiwidHJhbnNmb3JtIiwianN4IiwiVmlldyIsImNvbGxhcHNhYmxlIiwibmF0aXZlSUQiLCJzdHlsZXMiLCJoZWFkZXIiLCJjbG9uZUVsZW1lbnQiLCJmaWxsIiwidW5kZWZpbmVkIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsInpJbmRleCIsImZsZXgiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJTY3JvbGxWaWV3U3RpY2t5SGVhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgdHlwZSB7TGF5b3V0Q2hhbmdlRXZlbnR9IGZyb20gJy4uLy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcblxuaW1wb3J0IEFuaW1hdGVkIGZyb20gJy4uLy4uL0FuaW1hdGVkL0FuaW1hdGVkJztcbmltcG9ydCB7aXNQdWJsaWNJbnN0YW5jZSBhcyBpc0ZhYnJpY1B1YmxpY0luc3RhbmNlfSBmcm9tICcuLi8uLi9SZWFjdE5hdGl2ZS9SZWFjdEZhYnJpY1B1YmxpY0luc3RhbmNlL1JlYWN0RmFicmljUHVibGljSW5zdGFuY2VVdGlscyc7XG5pbXBvcnQgU3R5bGVTaGVldCBmcm9tICcuLi8uLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uLy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5pbXBvcnQgdXNlTWVyZ2VSZWZzIGZyb20gJy4uLy4uL1V0aWxpdGllcy91c2VNZXJnZVJlZnMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgY2xvbmVFbGVtZW50LFxuICB1c2VDYWxsYmFjayxcbiAgdXNlRWZmZWN0LFxuICB1c2VNZW1vLFxuICB1c2VSZWYsXG4gIHVzZVN0YXRlLFxufSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCB0eXBlIFNjcm9sbFZpZXdTdGlja3lIZWFkZXJQcm9wcyA9ICRSZWFkT25seTx7XG4gIGNoaWxkcmVuPzogUmVhY3QuTm9kZSxcbiAgbmV4dEhlYWRlckxheW91dFk6ID9udW1iZXIsXG4gIG9uTGF5b3V0OiAoZXZlbnQ6IExheW91dENoYW5nZUV2ZW50KSA9PiB2b2lkLFxuICBzY3JvbGxBbmltYXRlZFZhbHVlOiBBbmltYXRlZC5WYWx1ZSxcbiAgLy8gV2lsbCBjYXVzZSBzdGlja3kgaGVhZGVycyB0byBzdGljayBhdCB0aGUgYm90dG9tIG9mIHRoZSBTY3JvbGxWaWV3IGluc3RlYWRcbiAgLy8gb2YgdGhlIHRvcC5cbiAgaW52ZXJ0ZWQ6ID9ib29sZWFuLFxuICAvLyBUaGUgaGVpZ2h0IG9mIHRoZSBwYXJlbnQgU2Nyb2xsVmlldy4gQ3VycmVudGx5IG9ubHkgc2V0IHdoZW4gaW52ZXJ0ZWQuXG4gIHNjcm9sbFZpZXdIZWlnaHQ6ID9udW1iZXIsXG4gIG5hdGl2ZUlEPzogP3N0cmluZyxcbiAgaGlkZGVuT25TY3JvbGw/OiA/Ym9vbGVhbixcbn0+O1xuXG5pbnRlcmZhY2UgSW5zdGFuY2UgZXh0ZW5kcyBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBBbmltYXRlZC5WaWV3PiB7XG4gICtzZXROZXh0SGVhZGVyWTogbnVtYmVyID0+IHZvaWQ7XG59XG5cbmNvbnN0IFNjcm9sbFZpZXdTdGlja3lIZWFkZXI6IGNvbXBvbmVudChcbiAgcmVmOiBSZWFjdC5SZWZTZXR0ZXI8SW5zdGFuY2U+LFxuICAuLi5wcm9wczogU2Nyb2xsVmlld1N0aWNreUhlYWRlclByb3BzXG4pID0gZnVuY3Rpb24gU2Nyb2xsVmlld1N0aWNreUhlYWRlcih7XG4gIHJlZjogZm9yd2FyZGVkUmVmLFxuICAuLi5wcm9wc1xufToge1xuICByZWY/OiBSZWFjdC5SZWZTZXR0ZXI8SW5zdGFuY2U+LFxuICAuLi5TY3JvbGxWaWV3U3RpY2t5SGVhZGVyUHJvcHMsXG59KSB7XG4gIGNvbnN0IHtcbiAgICBpbnZlcnRlZCxcbiAgICBzY3JvbGxWaWV3SGVpZ2h0LFxuICAgIGhpZGRlbk9uU2Nyb2xsLFxuICAgIHNjcm9sbEFuaW1hdGVkVmFsdWUsXG4gICAgbmV4dEhlYWRlckxheW91dFk6IF9uZXh0SGVhZGVyTGF5b3V0WSxcbiAgfSA9IHByb3BzO1xuXG4gIGNvbnN0IFttZWFzdXJlZCwgc2V0TWVhc3VyZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbbGF5b3V0WSwgc2V0TGF5b3V0WV0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbbGF5b3V0SGVpZ2h0LCBzZXRMYXlvdXRIZWlnaHRdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW3RyYW5zbGF0ZVksIHNldFRyYW5zbGF0ZVldID0gdXNlU3RhdGU8P251bWJlcj4obnVsbCk7XG4gIGNvbnN0IFtuZXh0SGVhZGVyTGF5b3V0WSwgc2V0TmV4dEhlYWRlckxheW91dFldID1cbiAgICB1c2VTdGF0ZTw/bnVtYmVyPihfbmV4dEhlYWRlckxheW91dFkpO1xuICBjb25zdCBbaXNGYWJyaWMsIHNldElzRmFicmljXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICBjb25zdCBjYWxsYmFja1JlZiA9IHVzZUNhbGxiYWNrKChyZWY6IEluc3RhbmNlIHwgbnVsbCk6IHZvaWQgPT4ge1xuICAgIGlmIChyZWYgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyAkRmxvd0V4cGVjdGVkRXJyb3JbY2Fubm90LXdyaXRlXVxuICAgIHJlZi5zZXROZXh0SGVhZGVyWSA9IHNldE5leHRIZWFkZXJMYXlvdXRZO1xuICAgIHNldElzRmFicmljKGlzRmFicmljUHVibGljSW5zdGFuY2UocmVmKSk7XG4gIH0sIFtdKTtcbiAgY29uc3QgcmVmOiBSZWFjdC5SZWZTZXR0ZXI8UmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgQW5pbWF0ZWQuVmlldz4+ID1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gLSBJbnN0YW5jZSBpcyBtdXRhdGVkIHRvIGhhdmUgYHNldE5leHRIZWFkZXJZYC5cbiAgICB1c2VNZXJnZVJlZnM8SW5zdGFuY2U+KGNhbGxiYWNrUmVmLCBmb3J3YXJkZWRSZWYpO1xuXG4gIGNvbnN0IG9mZnNldCA9IHVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIGhpZGRlbk9uU2Nyb2xsID09PSB0cnVlXG4gICAgICAgID8gQW5pbWF0ZWQuZGlmZkNsYW1wKFxuICAgICAgICAgICAgc2Nyb2xsQW5pbWF0ZWRWYWx1ZVxuICAgICAgICAgICAgICAuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgICAgICAgIGV4dHJhcG9sYXRlTGVmdDogJ2NsYW1wJyxcbiAgICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbbGF5b3V0WSwgbGF5b3V0WSArIDFdLFxuICAgICAgICAgICAgICAgIG91dHB1dFJhbmdlOiAoWzAsIDFdOiBBcnJheTxudW1iZXI+KSxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmludGVycG9sYXRlKHtcbiAgICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgICAgb3V0cHV0UmFuZ2U6IChbMCwgLTFdOiBBcnJheTxudW1iZXI+KSxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAtbGF5b3V0SGVpZ2h0LFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICApXG4gICAgICAgIDogbnVsbCxcbiAgICBbc2Nyb2xsQW5pbWF0ZWRWYWx1ZSwgbGF5b3V0SGVpZ2h0LCBsYXlvdXRZLCBoaWRkZW5PblNjcm9sbF0sXG4gICk7XG5cbiAgY29uc3QgW2FuaW1hdGVkVHJhbnNsYXRlWSwgc2V0QW5pbWF0ZWRUcmFuc2xhdGVZXSA9IHVzZVN0YXRlPEFuaW1hdGVkLk5vZGU+KFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IGlucHV0UmFuZ2U6IEFycmF5PG51bWJlcj4gPSBbLTEsIDBdO1xuICAgICAgY29uc3Qgb3V0cHV0UmFuZ2U6IEFycmF5PG51bWJlcj4gPSBbMCwgMF07XG4gICAgICBjb25zdCBpbml0aWFsVHJhbnNsYXRlWSA9IHNjcm9sbEFuaW1hdGVkVmFsdWUuaW50ZXJwb2xhdGUoe1xuICAgICAgICBpbnB1dFJhbmdlLFxuICAgICAgICBvdXRwdXRSYW5nZSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEFuaW1hdGVkLmFkZChpbml0aWFsVHJhbnNsYXRlWSwgb2Zmc2V0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbml0aWFsVHJhbnNsYXRlWTtcbiAgICB9LFxuICApO1xuXG4gIGNvbnN0IGhhdmVSZWNlaXZlZEluaXRpYWxaZXJvVHJhbnNsYXRlWSA9IHVzZVJlZjxib29sZWFuPih0cnVlKTtcbiAgY29uc3QgdHJhbnNsYXRlWURlYm91bmNlVGltZXIgPSB1c2VSZWY8P1RpbWVvdXRJRD4obnVsbCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodHJhbnNsYXRlWSAhPT0gMCAmJiB0cmFuc2xhdGVZICE9IG51bGwpIHtcbiAgICAgIGhhdmVSZWNlaXZlZEluaXRpYWxaZXJvVHJhbnNsYXRlWS5jdXJyZW50ID0gZmFsc2U7XG4gICAgfVxuICB9LCBbdHJhbnNsYXRlWV0pO1xuXG4gIC8vIFRoaXMgaXMgY2FsbGVkIHdoZW5ldmVyIHRoZSAoSW50ZXJwb2xhdGVkKSBBbmltYXRlZCBWYWx1ZVxuICAvLyB1cGRhdGVzLCB3aGljaCBpcyBzZXZlcmFsIHRpbWVzIHBlciBmcmFtZSBkdXJpbmcgc2Nyb2xsaW5nLlxuICAvLyBUbyBlbnN1cmUgdGhhdCB0aGUgRmFicmljIFNoYWRvd1RyZWUgaGFzIHRoZSBtb3N0IHJlY2VudFxuICAvLyB0cmFuc2xhdGUgc3R5bGUgb2YgdGhpcyBub2RlLCB3ZSBkZWJvdW5jZSB0aGUgdmFsdWUgYW5kIHRoZW5cbiAgLy8gcGFzcyBpdCB0aHJvdWdoIHRvIHRoZSB1bmRlcmx5aW5nIG5vZGUgZHVyaW5nIHJlbmRlci5cbiAgLy8gVGhpcyBpczpcbiAgLy8gMS4gT25seSBhbiBpc3N1ZSBpbiBGYWJyaWMuXG4gIC8vIDIuIFdvcnNlIGluIEFuZHJvaWQgdGhhbiBpT1MuIEluIEFuZHJvaWQsIGJ1dCBub3QgaU9TLCB5b3VcbiAgLy8gICAgY2FuIHRvdWNoIGFuZCBtb3ZlIHlvdXIgZmluZ2VyIHNsaWdodGx5IGFuZCBzdGlsbCB0cmlnZ2VyXG4gIC8vICAgIGEgXCJ0YXBcIiBldmVudC4gSW4gaU9TLCBtb3Zpbmcgd2lsbCBjYW5jZWwgdGhlIHRhcCBpblxuICAvLyAgICBib3RoIEZhYnJpYyBhbmQgbm9uLUZhYnJpYy4gT24gQW5kcm9pZCB3aGVuIHlvdSBtb3ZlXG4gIC8vICAgIHlvdXIgZmluZ2VyLCB0aGUgaGl0LWRldGVjdGlvbiBtb3ZlcyBmcm9tIHRoZSBBbmRyb2lkXG4gIC8vICAgIHBsYXRmb3JtIHRvIEpTLCBzbyB3ZSBuZWVkIHRoZSBTaGFkb3dUcmVlIHRvIGhhdmUga25vd2xlZGdlXG4gIC8vICAgIG9mIHRoZSBjdXJyZW50IHBvc2l0aW9uLlxuICBjb25zdCBhbmltYXRlZFZhbHVlTGlzdGVuZXIgPSB1c2VDYWxsYmFjaygoe3ZhbHVlfTogJEZsb3dGaXhNZSkgPT4ge1xuICAgIGNvbnN0IGRlYm91bmNlVGltZW91dDogbnVtYmVyID0gUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyA/IDE1IDogNjQ7XG4gICAgLy8gV2hlbiB0aGUgQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIGlzIHJlY3JlYXRlZCwgaXQgYWx3YXlzIGluaXRpYWxpemVzXG4gICAgLy8gdG8gYSB2YWx1ZSBvZiB6ZXJvIGFuZCBlbWl0cyBhIHZhbHVlIGNoYW5nZSBvZiAwIHRvIGl0cyBsaXN0ZW5lcnMuXG4gICAgaWYgKHZhbHVlID09PSAwICYmICFoYXZlUmVjZWl2ZWRJbml0aWFsWmVyb1RyYW5zbGF0ZVkuY3VycmVudCkge1xuICAgICAgaGF2ZVJlY2VpdmVkSW5pdGlhbFplcm9UcmFuc2xhdGVZLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHJhbnNsYXRlWURlYm91bmNlVGltZXIuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICBjbGVhclRpbWVvdXQodHJhbnNsYXRlWURlYm91bmNlVGltZXIuY3VycmVudCk7XG4gICAgfVxuICAgIHRyYW5zbGF0ZVlEZWJvdW5jZVRpbWVyLmN1cnJlbnQgPSBzZXRUaW1lb3V0KFxuICAgICAgKCkgPT4gc2V0VHJhbnNsYXRlWSh2YWx1ZSksXG4gICAgICBkZWJvdW5jZVRpbWVvdXQsXG4gICAgKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaW5wdXRSYW5nZTogQXJyYXk8bnVtYmVyPiA9IFstMSwgMF07XG4gICAgY29uc3Qgb3V0cHV0UmFuZ2U6IEFycmF5PG51bWJlcj4gPSBbMCwgMF07XG5cbiAgICBpZiAobWVhc3VyZWQpIHtcbiAgICAgIGlmIChpbnZlcnRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBUaGUgaW50ZXJwb2xhdGlvbiBsb29rcyBsaWtlOlxuICAgICAgICAvLyAtIE5lZ2F0aXZlIHNjcm9sbDogbm8gdHJhbnNsYXRpb25cbiAgICAgICAgLy8gLSBgc3RpY2tTdGFydFBvaW50YCBpcyB0aGUgcG9pbnQgYXQgd2hpY2ggdGhlIGhlYWRlciB3aWxsIHN0YXJ0IHN0aWNraW5nLlxuICAgICAgICAvLyAgIEl0IGlzIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIFNjcm9sbFZpZXcgdmlld3BvcnQgaGVpZ2h0IHNvIGl0IGlzIGEgdGhlIGJvdHRvbS5cbiAgICAgICAgLy8gLSBIZWFkZXJzIHRoYXQgYXJlIGluIHRoZSBpbml0aWFsIHZpZXdwb3J0IHdpbGwgbmV2ZXIgc3RpY2ssIGBzdGlja1N0YXJ0UG9pbnRgXG4gICAgICAgIC8vICAgd2lsbCBiZSBuZWdhdGl2ZS5cbiAgICAgICAgLy8gLSBGcm9tIDAgdG8gYHN0aWNrU3RhcnRQb2ludGAgbm8gdHJhbnNsYXRpb24uIFRoaXMgd2lsbCBjYXVzZSB0aGUgaGVhZGVyXG4gICAgICAgIC8vICAgdG8gc2Nyb2xsIG5vcm1hbGx5IHVudGlsIGl0IHJlYWNoZXMgdGhlIHRvcCBvZiB0aGUgc2Nyb2xsIHZpZXcuXG4gICAgICAgIC8vIC0gRnJvbSBgc3RpY2tTdGFydFBvaW50YCB0byB3aGVuIHRoZSBuZXh0IGhlYWRlciB5IGhpdHMgdGhlIGJvdHRvbSBlZGdlIG9mIHRoZSBoZWFkZXI6IHRyYW5zbGF0ZVxuICAgICAgICAvLyAgIGVxdWFsbHkgdG8gc2Nyb2xsLiBUaGlzIHdpbGwgY2F1c2UgdGhlIGhlYWRlciB0byBzdGF5IGF0IHRoZSB0b3Agb2YgdGhlIHNjcm9sbCB2aWV3LlxuICAgICAgICAvLyAtIFBhc3QgdGhlIGNvbGxpc2lvbiB3aXRoIHRoZSBuZXh0IGhlYWRlciB5OiBubyBtb3JlIHRyYW5zbGF0aW9uLiBUaGlzIHdpbGwgY2F1c2UgdGhlXG4gICAgICAgIC8vICAgaGVhZGVyIHRvIGNvbnRpbnVlIHNjcm9sbGluZyB1cCBhbmQgbWFrZSByb29tIGZvciB0aGUgbmV4dCBzdGlja3kgaGVhZGVyLlxuICAgICAgICAvLyAgIEluIHRoZSBjYXNlIHRoYXQgdGhlcmUgaXMgbm8gbmV4dCBoZWFkZXIganVzdCB0cmFuc2xhdGUgZXF1YWxseSB0b1xuICAgICAgICAvLyAgIHNjcm9sbCBpbmRlZmluaXRlbHkuXG4gICAgICAgIGlmIChzY3JvbGxWaWV3SGVpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBzdGlja1N0YXJ0UG9pbnQgPSBsYXlvdXRZICsgbGF5b3V0SGVpZ2h0IC0gc2Nyb2xsVmlld0hlaWdodDtcbiAgICAgICAgICBpZiAoc3RpY2tTdGFydFBvaW50ID4gMCkge1xuICAgICAgICAgICAgaW5wdXRSYW5nZS5wdXNoKHN0aWNrU3RhcnRQb2ludCk7XG4gICAgICAgICAgICBvdXRwdXRSYW5nZS5wdXNoKDApO1xuICAgICAgICAgICAgaW5wdXRSYW5nZS5wdXNoKHN0aWNrU3RhcnRQb2ludCArIDEpO1xuICAgICAgICAgICAgb3V0cHV0UmFuZ2UucHVzaCgxKTtcbiAgICAgICAgICAgIC8vIElmIHRoZSBuZXh0IHN0aWNreSBoZWFkZXIgaGFzIG5vdCBsb2FkZWQgeWV0IChwcm9iYWJseSB3aW5kb3dpbmcpIG9yIGlzIHRoZSBsYXN0XG4gICAgICAgICAgICAvLyB3ZSBjYW4ganVzdCBrZWVwIGl0IHN0aWNrZWQgZm9yZXZlci5cbiAgICAgICAgICAgIGNvbnN0IGNvbGxpc2lvblBvaW50ID1cbiAgICAgICAgICAgICAgKG5leHRIZWFkZXJMYXlvdXRZIHx8IDApIC0gbGF5b3V0SGVpZ2h0IC0gc2Nyb2xsVmlld0hlaWdodDtcbiAgICAgICAgICAgIGlmIChjb2xsaXNpb25Qb2ludCA+IHN0aWNrU3RhcnRQb2ludCkge1xuICAgICAgICAgICAgICBpbnB1dFJhbmdlLnB1c2goY29sbGlzaW9uUG9pbnQsIGNvbGxpc2lvblBvaW50ICsgMSk7XG4gICAgICAgICAgICAgIG91dHB1dFJhbmdlLnB1c2goXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uUG9pbnQgLSBzdGlja1N0YXJ0UG9pbnQsXG4gICAgICAgICAgICAgICAgY29sbGlzaW9uUG9pbnQgLSBzdGlja1N0YXJ0UG9pbnQsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGUgaW50ZXJwb2xhdGlvbiBsb29rcyBsaWtlOlxuICAgICAgICAvLyAtIE5lZ2F0aXZlIHNjcm9sbDogbm8gdHJhbnNsYXRpb25cbiAgICAgICAgLy8gLSBGcm9tIDAgdG8gdGhlIHkgb2YgdGhlIGhlYWRlcjogbm8gdHJhbnNsYXRpb24uIFRoaXMgd2lsbCBjYXVzZSB0aGUgaGVhZGVyXG4gICAgICAgIC8vICAgdG8gc2Nyb2xsIG5vcm1hbGx5IHVudGlsIGl0IHJlYWNoZXMgdGhlIHRvcCBvZiB0aGUgc2Nyb2xsIHZpZXcuXG4gICAgICAgIC8vIC0gRnJvbSBoZWFkZXIgeSB0byB3aGVuIHRoZSBuZXh0IGhlYWRlciB5IGhpdHMgdGhlIGJvdHRvbSBlZGdlIG9mIHRoZSBoZWFkZXI6IHRyYW5zbGF0ZVxuICAgICAgICAvLyAgIGVxdWFsbHkgdG8gc2Nyb2xsLiBUaGlzIHdpbGwgY2F1c2UgdGhlIGhlYWRlciB0byBzdGF5IGF0IHRoZSB0b3Agb2YgdGhlIHNjcm9sbCB2aWV3LlxuICAgICAgICAvLyAtIFBhc3QgdGhlIGNvbGxpc2lvbiB3aXRoIHRoZSBuZXh0IGhlYWRlciB5OiBubyBtb3JlIHRyYW5zbGF0aW9uLiBUaGlzIHdpbGwgY2F1c2UgdGhlXG4gICAgICAgIC8vICAgaGVhZGVyIHRvIGNvbnRpbnVlIHNjcm9sbGluZyB1cCBhbmQgbWFrZSByb29tIGZvciB0aGUgbmV4dCBzdGlja3kgaGVhZGVyLlxuICAgICAgICAvLyAgIEluIHRoZSBjYXNlIHRoYXQgdGhlcmUgaXMgbm8gbmV4dCBoZWFkZXIganVzdCB0cmFuc2xhdGUgZXF1YWxseSB0b1xuICAgICAgICAvLyAgIHNjcm9sbCBpbmRlZmluaXRlbHkuXG4gICAgICAgIGlucHV0UmFuZ2UucHVzaChsYXlvdXRZKTtcbiAgICAgICAgb3V0cHV0UmFuZ2UucHVzaCgwKTtcbiAgICAgICAgLy8gSWYgdGhlIG5leHQgc3RpY2t5IGhlYWRlciBoYXMgbm90IGxvYWRlZCB5ZXQgKHByb2JhYmx5IHdpbmRvd2luZykgb3IgaXMgdGhlIGxhc3RcbiAgICAgICAgLy8gd2UgY2FuIGp1c3Qga2VlcCBpdCBzdGlja2VkIGZvcmV2ZXIuXG4gICAgICAgIGNvbnN0IGNvbGxpc2lvblBvaW50ID0gKG5leHRIZWFkZXJMYXlvdXRZIHx8IDApIC0gbGF5b3V0SGVpZ2h0O1xuICAgICAgICBpZiAoY29sbGlzaW9uUG9pbnQgPj0gbGF5b3V0WSkge1xuICAgICAgICAgIGlucHV0UmFuZ2UucHVzaChjb2xsaXNpb25Qb2ludCwgY29sbGlzaW9uUG9pbnQgKyAxKTtcbiAgICAgICAgICBvdXRwdXRSYW5nZS5wdXNoKGNvbGxpc2lvblBvaW50IC0gbGF5b3V0WSwgY29sbGlzaW9uUG9pbnQgLSBsYXlvdXRZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dFJhbmdlLnB1c2gobGF5b3V0WSArIDEpO1xuICAgICAgICAgIG91dHB1dFJhbmdlLnB1c2goMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgbmV3QW5pbWF0ZWRUcmFuc2xhdGVZOiBBbmltYXRlZC5Ob2RlID0gc2Nyb2xsQW5pbWF0ZWRWYWx1ZS5pbnRlcnBvbGF0ZSh7XG4gICAgICBpbnB1dFJhbmdlLFxuICAgICAgb3V0cHV0UmFuZ2UsXG4gICAgfSk7XG5cbiAgICBpZiAob2Zmc2V0ICE9IG51bGwpIHtcbiAgICAgIG5ld0FuaW1hdGVkVHJhbnNsYXRlWSA9IEFuaW1hdGVkLmFkZChuZXdBbmltYXRlZFRyYW5zbGF0ZVksIG9mZnNldCk7XG4gICAgfVxuXG4gICAgLy8gYWRkIHRoZSBldmVudCBsaXN0ZW5lclxuICAgIGxldCBhbmltYXRlZExpc3RlbmVySWQ7XG4gICAgaWYgKGlzRmFicmljKSB7XG4gICAgICBhbmltYXRlZExpc3RlbmVySWQgPSBuZXdBbmltYXRlZFRyYW5zbGF0ZVkuYWRkTGlzdGVuZXIoXG4gICAgICAgIGFuaW1hdGVkVmFsdWVMaXN0ZW5lcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgc2V0QW5pbWF0ZWRUcmFuc2xhdGVZKG5ld0FuaW1hdGVkVHJhbnNsYXRlWSk7XG5cbiAgICAvLyBjbGVhbiB1cCB0aGUgZXZlbnQgbGlzdGVuZXIgYW5kIHRpbWVyXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmIChhbmltYXRlZExpc3RlbmVySWQpIHtcbiAgICAgICAgbmV3QW5pbWF0ZWRUcmFuc2xhdGVZLnJlbW92ZUxpc3RlbmVyKGFuaW1hdGVkTGlzdGVuZXJJZCk7XG4gICAgICB9XG4gICAgICBpZiAodHJhbnNsYXRlWURlYm91bmNlVGltZXIuY3VycmVudCAhPSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0cmFuc2xhdGVZRGVib3VuY2VUaW1lci5jdXJyZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbXG4gICAgbmV4dEhlYWRlckxheW91dFksXG4gICAgbWVhc3VyZWQsXG4gICAgbGF5b3V0SGVpZ2h0LFxuICAgIGxheW91dFksXG4gICAgc2Nyb2xsVmlld0hlaWdodCxcbiAgICBzY3JvbGxBbmltYXRlZFZhbHVlLFxuICAgIGludmVydGVkLFxuICAgIG9mZnNldCxcbiAgICBhbmltYXRlZFZhbHVlTGlzdGVuZXIsXG4gICAgaXNGYWJyaWMsXG4gIF0pO1xuXG4gIGNvbnN0IF9vbkxheW91dCA9IChldmVudDogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHtcbiAgICBzZXRMYXlvdXRZKGV2ZW50Lm5hdGl2ZUV2ZW50LmxheW91dC55KTtcbiAgICBzZXRMYXlvdXRIZWlnaHQoZXZlbnQubmF0aXZlRXZlbnQubGF5b3V0LmhlaWdodCk7XG4gICAgc2V0TWVhc3VyZWQodHJ1ZSk7XG5cbiAgICBwcm9wcy5vbkxheW91dChldmVudCk7XG4gICAgY29uc3QgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5PCRGbG93Rml4TWU+KHByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQucHJvcHMub25MYXlvdXQpIHtcbiAgICAgIGNoaWxkLnByb3BzLm9uTGF5b3V0KGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgY2hpbGQgPSBSZWFjdC5DaGlsZHJlbi5vbmx5PCRGbG93Rml4TWU+KHByb3BzLmNoaWxkcmVuKTtcblxuICBjb25zdCBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzID1cbiAgICBpc0ZhYnJpYyAmJiB0cmFuc2xhdGVZICE9IG51bGxcbiAgICAgID8ge1xuICAgICAgICAgIHN0eWxlOiB7dHJhbnNmb3JtOiBbe3RyYW5zbGF0ZVk6IHRyYW5zbGF0ZVl9XX0sXG4gICAgICAgIH1cbiAgICAgIDogbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxBbmltYXRlZC5WaWV3XG4gICAgICBjb2xsYXBzYWJsZT17ZmFsc2V9XG4gICAgICBuYXRpdmVJRD17cHJvcHMubmF0aXZlSUR9XG4gICAgICBvbkxheW91dD17X29uTGF5b3V0fVxuICAgICAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIHBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXMgaXNuJ3QgcHJvcGVybHlcbiAgICAgICAgIGluY2x1ZGVkIGluIHRoZSBBbmltYXRlZC5WaWV3IGZsb3cgdHlwZS4gKi9cbiAgICAgIHJlZj17cmVmfVxuICAgICAgc3R5bGU9e1tcbiAgICAgICAgY2hpbGQucHJvcHMuc3R5bGUsXG4gICAgICAgIHN0eWxlcy5oZWFkZXIsXG4gICAgICAgIHt0cmFuc2Zvcm06IFt7dHJhbnNsYXRlWTogYW5pbWF0ZWRUcmFuc2xhdGVZfV19LFxuICAgICAgXX1cbiAgICAgIHBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXM9e1xuICAgICAgICBwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzXG4gICAgICB9PlxuICAgICAge2Nsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBzdHlsZTogc3R5bGVzLmZpbGwsIC8vIFdlIHRyYW5zZmVyIHRoZSBjaGlsZCBzdHlsZSB0byB0aGUgd3JhcHBlci5cbiAgICAgICAgb25MYXlvdXQ6IHVuZGVmaW5lZCwgLy8gd2UgY2FsbCB0aGlzIG1hbnVhbGx5IHRocm91Z2ggb3VyIHRoaXMuX29uTGF5b3V0XG4gICAgICB9KX1cbiAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICk7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGhlYWRlcjoge1xuICAgIHpJbmRleDogMTAsXG4gIH0sXG4gIGZpbGw6IHtcbiAgICBmbGV4OiAxLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFNjcm9sbFZpZXdTdGlja3lIZWFkZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQSxJQUFBQSxT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LFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFFakJiLEtBQUssQ0FBQzhFLFFBQVEsQ0FBQ0wsS0FBSyxDQUFDO0lBQ3JCLElBQU1NLEtBQUssR0FBRzFHLEtBQUssQ0FBQzJHLFFBQVEsQ0FBQ0MsSUFBSSxDQUFhakYsS0FBSyxDQUFDa0YsUUFBUSxDQUFDO0lBQzdELElBQUlILEtBQUssQ0FBQy9FLEtBQUssQ0FBQzhFLFFBQVEsRUFBRTtNQUN4QkMsS0FBSyxDQUFDL0UsS0FBSyxDQUFDOEUsUUFBUSxDQUFDTCxLQUFLLENBQUM7SUFDN0I7RUFDRixDQUFDO0VBRUQsSUFBTU0sS0FBSyxHQUFHMUcsS0FBSyxDQUFDMkcsUUFBUSxDQUFDQyxJQUFJLENBQWFqRixLQUFLLENBQUNrRixRQUFRLENBQUM7RUFFN0QsSUFBTUMscUNBQXFDLEdBQ3pDcEQsUUFBUSxJQUFJUCxVQUFVLElBQUksSUFBSSxHQUMxQjtJQUNFNEQsS0FBSyxFQUFFO01BQUNDLFNBQVMsRUFBRSxDQUFDO1FBQUM3RCxVQUFVLEVBQUVBO01BQVUsQ0FBQztJQUFDO0VBQy9DLENBQUMsR0FDRCxJQUFJO0VBRVYsT0FDRSxJQUFBbEQsV0FBQSxDQUFBZ0gsR0FBQSxFQUFDMUgsU0FBQSxDQUFBc0IsT0FBUSxDQUFDcUcsSUFBSTtJQUNaQyxXQUFXLEVBQUUsS0FBTTtJQUNuQkMsUUFBUSxFQUFFekYsS0FBSyxDQUFDeUYsUUFBUztJQUN6QlgsUUFBUSxFQUFFTixTQUFVO0lBR3BCekUsR0FBRyxFQUFFQSxHQUFJO0lBQ1RxRixLQUFLLEVBQUUsQ0FDTEwsS0FBSyxDQUFDL0UsS0FBSyxDQUFDb0YsS0FBSyxFQUNqQk0sTUFBTSxDQUFDQyxNQUFNLEVBQ2I7TUFBQ04sU0FBUyxFQUFFLENBQUM7UUFBQzdELFVBQVUsRUFBRTBCO01BQWtCLENBQUM7SUFBQyxDQUFDLENBQy9DO0lBQ0ZpQyxxQ0FBcUMsRUFDbkNBLHFDQUNEO0lBQUFELFFBQUEsRUFDQSxJQUFBVSxtQkFBWSxFQUFDYixLQUFLLEVBQUU7TUFDbkJLLEtBQUssRUFBRU0sTUFBTSxDQUFDRyxJQUFJO01BQ2xCZixRQUFRLEVBQUVnQjtJQUNaLENBQUM7RUFBQyxDQUNXLENBQUM7QUFFcEIsQ0FBQztBQUVELElBQU1KLE1BQU0sR0FBR0ssbUJBQVUsQ0FBQ0MsTUFBTSxDQUFDO0VBQy9CTCxNQUFNLEVBQUU7SUFDTk0sTUFBTSxFQUFFO0VBQ1YsQ0FBQztFQUNESixJQUFJLEVBQUU7SUFDSkssSUFBSSxFQUFFO0VBQ1I7QUFDRixDQUFDLENBQUM7QUFBQyxJQUFBQyxRQUFBLEdBQUFDLE9BQUEsQ0FBQWxILE9BQUEsR0FFWVUsc0JBQXNCIiwiaWdub3JlTGlzdCI6W119