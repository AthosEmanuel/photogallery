c09735b179fdb35a457400451834826b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageSourcesFromImageProps = getImageSourcesFromImageProps;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _resolveAssetSource = _interopRequireDefault(require("./resolveAssetSource"));
function getImageSourcesFromImageProps(imageProps) {
  var source = (0, _resolveAssetSource.default)(imageProps.source);
  var sources;
  var crossOrigin = imageProps.crossOrigin,
    referrerPolicy = imageProps.referrerPolicy,
    src = imageProps.src,
    srcSet = imageProps.srcSet,
    width = imageProps.width,
    height = imageProps.height;
  var headers = {};
  if (crossOrigin === 'use-credentials') {
    headers['Access-Control-Allow-Credentials'] = 'true';
  }
  if (referrerPolicy != null) {
    headers['Referrer-Policy'] = referrerPolicy;
  }
  if (srcSet != null) {
    var sourceList = [];
    var srcSetList = srcSet.split(', ');
    var shouldUseSrcForDefaultScale = true;
    srcSetList.forEach(function (imageSrc) {
      var _imageSrc$split = imageSrc.split(' '),
        _imageSrc$split2 = (0, _slicedToArray2.default)(_imageSrc$split, 2),
        uri = _imageSrc$split2[0],
        _imageSrc$split2$ = _imageSrc$split2[1],
        xScale = _imageSrc$split2$ === void 0 ? '1x' : _imageSrc$split2$;
      if (!xScale.endsWith('x')) {
        console.warn('The provided format for scale is not supported yet. Please use scales like 1x, 2x, etc.');
      } else {
        var scale = parseInt(xScale.split('x')[0], 10);
        if (!isNaN(scale)) {
          shouldUseSrcForDefaultScale = scale === 1 ? false : shouldUseSrcForDefaultScale;
          sourceList.push({
            headers: headers,
            scale: scale,
            uri: uri,
            width: width,
            height: height
          });
        }
      }
    });
    if (shouldUseSrcForDefaultScale && src != null) {
      sourceList.push({
        headers: headers,
        scale: 1,
        uri: src,
        width: width,
        height: height
      });
    }
    if (sourceList.length === 0) {
      console.warn('The provided value for srcSet is not valid.');
    }
    sources = sourceList;
  } else if (src != null) {
    sources = [{
      uri: src,
      headers: headers,
      width: width,
      height: height
    }];
  } else if (source != null && source.uri && Object.keys(headers).length > 0) {
    sources = [Object.assign({}, source, {
      headers: headers
    })];
  } else {
    sources = source;
  }
  return sources;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0SW1hZ2VTb3VyY2VzRnJvbUltYWdlUHJvcHMiLCJfc2xpY2VkVG9BcnJheTIiLCJfcmVzb2x2ZUFzc2V0U291cmNlIiwiaW1hZ2VQcm9wcyIsInNvdXJjZSIsInJlc29sdmVBc3NldFNvdXJjZSIsInNvdXJjZXMiLCJjcm9zc09yaWdpbiIsInJlZmVycmVyUG9saWN5Iiwic3JjIiwic3JjU2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJoZWFkZXJzIiwic291cmNlTGlzdCIsInNyY1NldExpc3QiLCJzcGxpdCIsInNob3VsZFVzZVNyY0ZvckRlZmF1bHRTY2FsZSIsImZvckVhY2giLCJpbWFnZVNyYyIsIl9pbWFnZVNyYyRzcGxpdCIsIl9pbWFnZVNyYyRzcGxpdDIiLCJkZWZhdWx0IiwidXJpIiwiX2ltYWdlU3JjJHNwbGl0MiQiLCJ4U2NhbGUiLCJlbmRzV2l0aCIsImNvbnNvbGUiLCJ3YXJuIiwic2NhbGUiLCJwYXJzZUludCIsImlzTmFOIiwicHVzaCIsImxlbmd0aCIsImtleXMiLCJhc3NpZ24iXSwic291cmNlcyI6WyJJbWFnZVNvdXJjZVV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtSZXNvbHZlZEFzc2V0U291cmNlfSBmcm9tICcuL0Fzc2V0U291cmNlUmVzb2x2ZXInO1xuaW1wb3J0IHR5cGUge0ltYWdlUHJvcHN9IGZyb20gJy4vSW1hZ2VQcm9wcyc7XG5cbmltcG9ydCByZXNvbHZlQXNzZXRTb3VyY2UgZnJvbSAnLi9yZXNvbHZlQXNzZXRTb3VyY2UnO1xuXG4vKipcbiAqIEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyB0aGUgYXBwcm9wcmlhdGUgdmFsdWUgZm9yIGltYWdlIHNvdXJjZVxuICogYnkgcmVzb2x2aW5nIHRoZSBgc291cmNlYCwgYHNyY2AgYW5kIGBzcmNTZXRgIHByb3BzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1hZ2VTb3VyY2VzRnJvbUltYWdlUHJvcHMoXG4gIGltYWdlUHJvcHM6IEltYWdlUHJvcHMsXG4pOiA/UmVzb2x2ZWRBc3NldFNvdXJjZSB8ICRSZWFkT25seUFycmF5PHt1cmk6IHN0cmluZywgLi4ufT4ge1xuICBsZXQgc291cmNlID0gcmVzb2x2ZUFzc2V0U291cmNlKGltYWdlUHJvcHMuc291cmNlKTtcblxuICBsZXQgc291cmNlcztcblxuICBjb25zdCB7Y3Jvc3NPcmlnaW4sIHJlZmVycmVyUG9saWN5LCBzcmMsIHNyY1NldCwgd2lkdGgsIGhlaWdodH0gPSBpbWFnZVByb3BzO1xuXG4gIGNvbnN0IGhlYWRlcnM6IHtbc3RyaW5nXTogc3RyaW5nfSA9IHt9O1xuICBpZiAoY3Jvc3NPcmlnaW4gPT09ICd1c2UtY3JlZGVudGlhbHMnKSB7XG4gICAgaGVhZGVyc1snQWNjZXNzLUNvbnRyb2wtQWxsb3ctQ3JlZGVudGlhbHMnXSA9ICd0cnVlJztcbiAgfVxuICBpZiAocmVmZXJyZXJQb2xpY3kgIT0gbnVsbCkge1xuICAgIGhlYWRlcnNbJ1JlZmVycmVyLVBvbGljeSddID0gcmVmZXJyZXJQb2xpY3k7XG4gIH1cbiAgaWYgKHNyY1NldCAhPSBudWxsKSB7XG4gICAgY29uc3Qgc291cmNlTGlzdCA9IFtdO1xuICAgIGNvbnN0IHNyY1NldExpc3QgPSBzcmNTZXQuc3BsaXQoJywgJyk7XG4gICAgLy8gYHNyY2AgcHJvcCBzaG91bGQgYmUgdXNlZCB3aXRoIGRlZmF1bHQgc2NhbGUgaWYgYHNyY1NldGAgZG9lcyBub3QgaGF2ZSAxeCBzY2FsZS5cbiAgICBsZXQgc2hvdWxkVXNlU3JjRm9yRGVmYXVsdFNjYWxlID0gdHJ1ZTtcbiAgICBzcmNTZXRMaXN0LmZvckVhY2goaW1hZ2VTcmMgPT4ge1xuICAgICAgY29uc3QgW3VyaSwgeFNjYWxlID0gJzF4J10gPSBpbWFnZVNyYy5zcGxpdCgnICcpO1xuICAgICAgaWYgKCF4U2NhbGUuZW5kc1dpdGgoJ3gnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgJ1RoZSBwcm92aWRlZCBmb3JtYXQgZm9yIHNjYWxlIGlzIG5vdCBzdXBwb3J0ZWQgeWV0LiBQbGVhc2UgdXNlIHNjYWxlcyBsaWtlIDF4LCAyeCwgZXRjLicsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHBhcnNlSW50KHhTY2FsZS5zcGxpdCgneCcpWzBdLCAxMCk7XG4gICAgICAgIGlmICghaXNOYU4oc2NhbGUpKSB7XG4gICAgICAgICAgLy8gMXggc2NhbGUgaXMgcHJvdmlkZWQgaW4gYHNyY1NldGAgcHJvcCBzbyBpZ25vcmUgdGhlIGBzcmNgIHByb3AgaWYgcHJvdmlkZWQuXG4gICAgICAgICAgc2hvdWxkVXNlU3JjRm9yRGVmYXVsdFNjYWxlID1cbiAgICAgICAgICAgIHNjYWxlID09PSAxID8gZmFsc2UgOiBzaG91bGRVc2VTcmNGb3JEZWZhdWx0U2NhbGU7XG4gICAgICAgICAgc291cmNlTGlzdC5wdXNoKHtoZWFkZXJzLCBzY2FsZSwgdXJpLCB3aWR0aCwgaGVpZ2h0fSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRVc2VTcmNGb3JEZWZhdWx0U2NhbGUgJiYgc3JjICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZUxpc3QucHVzaCh7XG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICB1cmk6IHNyYyxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc291cmNlTGlzdC5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybignVGhlIHByb3ZpZGVkIHZhbHVlIGZvciBzcmNTZXQgaXMgbm90IHZhbGlkLicpO1xuICAgIH1cblxuICAgIHNvdXJjZXMgPSBzb3VyY2VMaXN0O1xuICB9IGVsc2UgaWYgKHNyYyAhPSBudWxsKSB7XG4gICAgc291cmNlcyA9IFt7dXJpOiBzcmMsIGhlYWRlcnM6IGhlYWRlcnMsIHdpZHRoLCBoZWlnaHR9XTtcbiAgfSBlbHNlIGlmIChzb3VyY2UgIT0gbnVsbCAmJiBzb3VyY2UudXJpICYmIE9iamVjdC5rZXlzKGhlYWRlcnMpLmxlbmd0aCA+IDApIHtcbiAgICBzb3VyY2VzID0gW3suLi5zb3VyY2UsIGhlYWRlcnN9XTtcbiAgfSBlbHNlIHtcbiAgICBzb3VyY2VzID0gc291cmNlO1xuICB9XG4gIHJldHVybiBzb3VyY2VzO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQUMsTUFBQSxDQUFBQyxjQUFBLENBQUFDLE9BQUE7RUFBQUMsS0FBQTtBQUFBO0FBQUFELE9BQUEsQ0FBQUUsNkJBQUEsR0FBQUEsNkJBQUE7QUFBQSxJQUFBQyxlQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFLYixJQUFBTyxtQkFBQSxHQUFBUixzQkFBQSxDQUFBQyxPQUFBO0FBTU8sU0FBU0ssNkJBQTZCQSxDQUMzQ0csVUFBc0IsRUFDcUM7RUFDM0QsSUFBSUMsTUFBTSxHQUFHLElBQUFDLDJCQUFrQixFQUFDRixVQUFVLENBQUNDLE1BQU0sQ0FBQztFQUVsRCxJQUFJRSxPQUFPO0VBRVgsSUFBT0MsV0FBVyxHQUFnREosVUFBVSxDQUFyRUksV0FBVztJQUFFQyxjQUFjLEdBQWdDTCxVQUFVLENBQXhESyxjQUFjO0lBQUVDLEdBQUcsR0FBMkJOLFVBQVUsQ0FBeENNLEdBQUc7SUFBRUMsTUFBTSxHQUFtQlAsVUFBVSxDQUFuQ08sTUFBTTtJQUFFQyxLQUFLLEdBQVlSLFVBQVUsQ0FBM0JRLEtBQUs7SUFBRUMsTUFBTSxHQUFJVCxVQUFVLENBQXBCUyxNQUFNO0VBRTlELElBQU1DLE9BQTJCLEdBQUcsQ0FBQyxDQUFDO0VBQ3RDLElBQUlOLFdBQVcsS0FBSyxpQkFBaUIsRUFBRTtJQUNyQ00sT0FBTyxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsTUFBTTtFQUN0RDtFQUNBLElBQUlMLGNBQWMsSUFBSSxJQUFJLEVBQUU7SUFDMUJLLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHTCxjQUFjO0VBQzdDO0VBQ0EsSUFBSUUsTUFBTSxJQUFJLElBQUksRUFBRTtJQUNsQixJQUFNSSxVQUFVLEdBQUcsRUFBRTtJQUNyQixJQUFNQyxVQUFVLEdBQUdMLE1BQU0sQ0FBQ00sS0FBSyxDQUFDLElBQUksQ0FBQztJQUVyQyxJQUFJQywyQkFBMkIsR0FBRyxJQUFJO0lBQ3RDRixVQUFVLENBQUNHLE9BQU8sQ0FBQyxVQUFBQyxRQUFRLEVBQUk7TUFDN0IsSUFBQUMsZUFBQSxHQUE2QkQsUUFBUSxDQUFDSCxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQUFLLGdCQUFBLE9BQUFwQixlQUFBLENBQUFxQixPQUFBLEVBQUFGLGVBQUE7UUFBekNHLEdBQUcsR0FBQUYsZ0JBQUE7UUFBQUcsaUJBQUEsR0FBQUgsZ0JBQUE7UUFBRUksTUFBTSxHQUFBRCxpQkFBQSxjQUFHLElBQUksR0FBQUEsaUJBQUE7TUFDekIsSUFBSSxDQUFDQyxNQUFNLENBQUNDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUN6QkMsT0FBTyxDQUFDQyxJQUFJLENBQ1YseUZBQ0YsQ0FBQztNQUNILENBQUMsTUFBTTtRQUNMLElBQU1DLEtBQUssR0FBR0MsUUFBUSxDQUFDTCxNQUFNLENBQUNULEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDaEQsSUFBSSxDQUFDZSxLQUFLLENBQUNGLEtBQUssQ0FBQyxFQUFFO1VBRWpCWiwyQkFBMkIsR0FDekJZLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxHQUFHWiwyQkFBMkI7VUFDbkRILFVBQVUsQ0FBQ2tCLElBQUksQ0FBQztZQUFDbkIsT0FBTyxFQUFQQSxPQUFPO1lBQUVnQixLQUFLLEVBQUxBLEtBQUs7WUFBRU4sR0FBRyxFQUFIQSxHQUFHO1lBQUVaLEtBQUssRUFBTEEsS0FBSztZQUFFQyxNQUFNLEVBQU5BO1VBQU0sQ0FBQyxDQUFDO1FBQ3ZEO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFFRixJQUFJSywyQkFBMkIsSUFBSVIsR0FBRyxJQUFJLElBQUksRUFBRTtNQUM5Q0ssVUFBVSxDQUFDa0IsSUFBSSxDQUFDO1FBQ2RuQixPQUFPLEVBQVBBLE9BQU87UUFDUGdCLEtBQUssRUFBRSxDQUFDO1FBQ1JOLEdBQUcsRUFBRWQsR0FBRztRQUNSRSxLQUFLLEVBQUxBLEtBQUs7UUFDTEMsTUFBTSxFQUFOQTtNQUNGLENBQUMsQ0FBQztJQUNKO0lBQ0EsSUFBSUUsVUFBVSxDQUFDbUIsTUFBTSxLQUFLLENBQUMsRUFBRTtNQUMzQk4sT0FBTyxDQUFDQyxJQUFJLENBQUMsNkNBQTZDLENBQUM7SUFDN0Q7SUFFQXRCLE9BQU8sR0FBR1EsVUFBVTtFQUN0QixDQUFDLE1BQU0sSUFBSUwsR0FBRyxJQUFJLElBQUksRUFBRTtJQUN0QkgsT0FBTyxHQUFHLENBQUM7TUFBQ2lCLEdBQUcsRUFBRWQsR0FBRztNQUFFSSxPQUFPLEVBQUVBLE9BQU87TUFBRUYsS0FBSyxFQUFMQSxLQUFLO01BQUVDLE1BQU0sRUFBTkE7SUFBTSxDQUFDLENBQUM7RUFDekQsQ0FBQyxNQUFNLElBQUlSLE1BQU0sSUFBSSxJQUFJLElBQUlBLE1BQU0sQ0FBQ21CLEdBQUcsSUFBSTNCLE1BQU0sQ0FBQ3NDLElBQUksQ0FBQ3JCLE9BQU8sQ0FBQyxDQUFDb0IsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUMxRTNCLE9BQU8sR0FBRyxDQUFBVixNQUFBLENBQUF1QyxNQUFBLEtBQUsvQixNQUFNO01BQUVTLE9BQU8sRUFBUEE7SUFBTyxHQUFFO0VBQ2xDLENBQUMsTUFBTTtJQUNMUCxPQUFPLEdBQUdGLE1BQU07RUFDbEI7RUFDQSxPQUFPRSxPQUFPO0FBQ2hCIiwiaWdub3JlTGlzdCI6W119