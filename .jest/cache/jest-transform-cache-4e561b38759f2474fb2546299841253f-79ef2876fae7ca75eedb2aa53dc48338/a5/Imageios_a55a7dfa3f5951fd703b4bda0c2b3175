2f79a5ade8c6277d5f8480b58dda1bd9
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _RootTag = require("../ReactNative/RootTag");
var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _ImageAnalyticsTagContext = _interopRequireDefault(require("./ImageAnalyticsTagContext"));
var _ImageInjection = require("./ImageInjection");
var _ImageSourceUtils = require("./ImageSourceUtils");
var _ImageUtils = require("./ImageUtils");
var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));
var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));
var _resolveAssetSource = _interopRequireDefault(require("./resolveAssetSource"));
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["ref"],
  _excluded2 = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "src"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function getSize(uri, success, failure) {
  var promise = _NativeImageLoaderIOS.default.getSize(uri).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
      width = _ref2[0],
      height = _ref2[1];
    return {
      width: width,
      height: height
    };
  });
  if (typeof success !== 'function') {
    return promise;
  }
  promise.then(function (sizes) {
    return success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}
function getSizeWithHeaders(uri, headers, success, failure) {
  var promise = _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers);
  if (typeof success !== 'function') {
    return promise;
  }
  promise.then(function (sizes) {
    return success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}
function prefetchWithMetadata(url, queryRootName, rootTag) {
  if (_NativeImageLoaderIOS.default.prefetchImageWithMetadata) {
    return _NativeImageLoaderIOS.default.prefetchImageWithMetadata(url, queryRootName, rootTag != null ? rootTag : (0, _RootTag.createRootTag)(0));
  } else {
    return _NativeImageLoaderIOS.default.prefetchImage(url);
  }
}
function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}
function queryCache(_x) {
  return _queryCache.apply(this, arguments);
}
function _queryCache() {
  _queryCache = (0, _asyncToGenerator2.default)(function* (urls) {
    return _NativeImageLoaderIOS.default.queryCache(urls);
  });
  return _queryCache.apply(this, arguments);
}
var BaseImage = function BaseImage(_ref3) {
  var _props$tintColor, _props$accessibilityS, _props$accessibilityS2, _props$accessibilityS3, _props$accessibilityS4, _props$accessibilityS5, _props$ariaLabel;
  var forwardedRef = _ref3.ref,
    props = (0, _objectWithoutProperties2.default)(_ref3, _excluded);
  var source = (0, _ImageSourceUtils.getImageSourcesFromImageProps)(props) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var style;
  var sources;
  if (Array.isArray(source)) {
    style = [styles.base, props.style];
    sources = source;
  } else {
    var _source$width, _source$height;
    var uri = source.uri;
    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
    var _width = (_source$width = source.width) != null ? _source$width : props.width;
    var _height = (_source$height = source.height) != null ? _source$height : props.height;
    style = [{
      width: _width,
      height: _height
    }, styles.base, props.style];
    sources = [source];
  }
  var flattenedStyle = (0, _flattenStyle.default)(style);
  var objectFit = (0, _ImageUtils.convertObjectFitToResizeMode)(flattenedStyle == null ? void 0 : flattenedStyle.objectFit);
  var resizeMode = objectFit || props.resizeMode || (flattenedStyle == null ? void 0 : flattenedStyle.resizeMode) || 'cover';
  var tintColor = (_props$tintColor = props.tintColor) != null ? _props$tintColor : flattenedStyle == null ? void 0 : flattenedStyle.tintColor;
  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }
  var ariaBusy = props['aria-busy'],
    ariaChecked = props['aria-checked'],
    ariaDisabled = props['aria-disabled'],
    ariaExpanded = props['aria-expanded'],
    ariaSelected = props['aria-selected'],
    src = props.src,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded2);
  var _accessibilityState = {
    busy: ariaBusy != null ? ariaBusy : (_props$accessibilityS = props.accessibilityState) == null ? void 0 : _props$accessibilityS.busy,
    checked: ariaChecked != null ? ariaChecked : (_props$accessibilityS2 = props.accessibilityState) == null ? void 0 : _props$accessibilityS2.checked,
    disabled: ariaDisabled != null ? ariaDisabled : (_props$accessibilityS3 = props.accessibilityState) == null ? void 0 : _props$accessibilityS3.disabled,
    expanded: ariaExpanded != null ? ariaExpanded : (_props$accessibilityS4 = props.accessibilityState) == null ? void 0 : _props$accessibilityS4.expanded,
    selected: ariaSelected != null ? ariaSelected : (_props$accessibilityS5 = props.accessibilityState) == null ? void 0 : _props$accessibilityS5.selected
  };
  var accessibilityLabel = (_props$ariaLabel = props['aria-label']) != null ? _props$ariaLabel : props.accessibilityLabel;
  var actualRef = (0, _ImageInjection.useWrapRefWithImageAttachedCallbacks)(forwardedRef);
  return (0, _jsxRuntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
    children: function children(analyticTag) {
      return (0, _jsxRuntime.jsx)(_ImageViewNativeComponent.default, Object.assign({
        accessibilityState: _accessibilityState
      }, restProps, {
        accessible: props.alt !== undefined ? true : props.accessible,
        accessibilityLabel: accessibilityLabel != null ? accessibilityLabel : props.alt,
        ref: actualRef,
        style: style,
        resizeMode: resizeMode,
        tintColor: tintColor,
        source: sources,
        internal_analyticTag: analyticTag
      }));
    }
  });
};
var imageComponentDecorator = (0, _ImageInjection.unstable_getImageComponentDecorator)();
if (imageComponentDecorator != null) {
  BaseImage = imageComponentDecorator(BaseImage);
}
var Image = BaseImage;
Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.prefetchWithMetadata = prefetchWithMetadata;
Image.queryCache = queryCache;
Image.resolveAssetSource = _resolveAssetSource.default;
var styles = _StyleSheet.default.create({
  base: {
    overflow: 'hidden'
  }
});
var _default = exports.default = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,