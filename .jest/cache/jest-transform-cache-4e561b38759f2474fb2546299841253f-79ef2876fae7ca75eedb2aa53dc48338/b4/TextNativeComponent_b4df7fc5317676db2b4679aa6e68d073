0204fc242ef4101bc10d2afb2fb16ecf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;
var _ViewConfig = require("../NativeComponent/ViewConfig");
var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));
var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));
var textViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    dynamicTypeRamp: true,
    maxFontSizeMultiplier: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true,
    dataDetectorType: true,
    android_hyphenationFrequency: true,
    lineBreakStrategyIOS: true
  },
  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout'
    }
  },
  uiViewClassName: 'RCTText'
};
var virtualTextViewConfig = {
  validAttributes: {
    isHighlighted: true,
    isPressable: true,
    maxFontSizeMultiplier: true
  },
  uiViewClassName: 'RCTVirtualText'
};
var NativeText = exports.NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return (0, _ViewConfig.createViewConfig)(textViewConfig);
});
var NativeVirtualText = exports.NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return (0, _ViewConfig.createViewConfig)(virtualTextViewConfig);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfVmlld0NvbmZpZyIsInJlcXVpcmUiLCJfVUlNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzIiwidGV4dFZpZXdDb25maWciLCJ2YWxpZEF0dHJpYnV0ZXMiLCJpc0hpZ2hsaWdodGVkIiwiaXNQcmVzc2FibGUiLCJudW1iZXJPZkxpbmVzIiwiZWxsaXBzaXplTW9kZSIsImFsbG93Rm9udFNjYWxpbmciLCJkeW5hbWljVHlwZVJhbXAiLCJtYXhGb250U2l6ZU11bHRpcGxpZXIiLCJkaXNhYmxlZCIsInNlbGVjdGFibGUiLCJzZWxlY3Rpb25Db2xvciIsImFkanVzdHNGb250U2l6ZVRvRml0IiwibWluaW11bUZvbnRTY2FsZSIsInRleHRCcmVha1N0cmF0ZWd5Iiwib25UZXh0TGF5b3V0IiwiZGF0YURldGVjdG9yVHlwZSIsImFuZHJvaWRfaHlwaGVuYXRpb25GcmVxdWVuY3kiLCJsaW5lQnJlYWtTdHJhdGVneUlPUyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BUZXh0TGF5b3V0IiwicmVnaXN0cmF0aW9uTmFtZSIsInVpVmlld0NsYXNzTmFtZSIsInZpcnR1YWxUZXh0Vmlld0NvbmZpZyIsIk5hdGl2ZVRleHQiLCJleHBvcnRzIiwiY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyIsImNyZWF0ZVZpZXdDb25maWciLCJOYXRpdmVWaXJ0dWFsVGV4dCIsImdsb2JhbCIsIlJOJEJyaWRnZWxlc3MiLCJVSU1hbmFnZXIiLCJoYXNWaWV3TWFuYWdlckNvbmZpZyJdLCJzb3VyY2VzIjpbIlRleHROYXRpdmVDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuaW1wb3J0IHR5cGUge0hvc3RDb21wb25lbnR9IGZyb20gJy4uLy4uL3NyYy9wcml2YXRlL3R5cGVzL0hvc3RDb21wb25lbnQnO1xuaW1wb3J0IHR5cGUge1Byb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJztcbmltcG9ydCB0eXBlIHtHZXN0dXJlUmVzcG9uZGVyRXZlbnR9IGZyb20gJy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB0eXBlIHtUZXh0UHJvcHN9IGZyb20gJy4vVGV4dFByb3BzJztcblxuaW1wb3J0IHtjcmVhdGVWaWV3Q29uZmlnfSBmcm9tICcuLi9OYXRpdmVDb21wb25lbnQvVmlld0NvbmZpZyc7XG5pbXBvcnQgVUlNYW5hZ2VyIGZyb20gJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQgY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzJztcblxuZXhwb3J0IHR5cGUgTmF0aXZlVGV4dFByb3BzID0gJFJlYWRPbmx5PHtcbiAgLi4uVGV4dFByb3BzLFxuICBpc0hpZ2hsaWdodGVkPzogP2Jvb2xlYW4sXG4gIHNlbGVjdGlvbkNvbG9yPzogP1Byb2Nlc3NlZENvbG9yVmFsdWUsXG4gIG9uQ2xpY2s/OiA/KGV2ZW50OiBHZXN0dXJlUmVzcG9uZGVyRXZlbnQpID0+IG1peGVkLFxuICAvLyBUaGlzIGlzIG9ubHkgbmVlZGVkIGZvciBwbGF0Zm9ybXMgdGhhdCBvcHRpbWl6ZSB0ZXh0IGhpdCB0ZXN0aW5nLCBlLmcuLFxuICAvLyByZWFjdC1uYXRpdmUtd2luZG93cy4gSXQgY2FuIGJlIHVzZWQgdG8gb25seSBoaXQgdGVzdCB2aXJ0dWFsIHRleHQgc3BhbnNcbiAgLy8gdGhhdCBoYXZlIHByZXNzYWJsZSBldmVudHMgYXR0YWNoZWQgdG8gdGhlbS5cbiAgaXNQcmVzc2FibGU/OiA/Ym9vbGVhbixcbn0+O1xuXG5jb25zdCB0ZXh0Vmlld0NvbmZpZyA9IHtcbiAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICBpc1ByZXNzYWJsZTogdHJ1ZSxcbiAgICBudW1iZXJPZkxpbmVzOiB0cnVlLFxuICAgIGVsbGlwc2l6ZU1vZGU6IHRydWUsXG4gICAgYWxsb3dGb250U2NhbGluZzogdHJ1ZSxcbiAgICBkeW5hbWljVHlwZVJhbXA6IHRydWUsXG4gICAgbWF4Rm9udFNpemVNdWx0aXBsaWVyOiB0cnVlLFxuICAgIGRpc2FibGVkOiB0cnVlLFxuICAgIHNlbGVjdGFibGU6IHRydWUsXG4gICAgc2VsZWN0aW9uQ29sb3I6IHRydWUsXG4gICAgYWRqdXN0c0ZvbnRTaXplVG9GaXQ6IHRydWUsXG4gICAgbWluaW11bUZvbnRTY2FsZTogdHJ1ZSxcbiAgICB0ZXh0QnJlYWtTdHJhdGVneTogdHJ1ZSxcbiAgICBvblRleHRMYXlvdXQ6IHRydWUsXG4gICAgZGF0YURldGVjdG9yVHlwZTogdHJ1ZSxcbiAgICBhbmRyb2lkX2h5cGhlbmF0aW9uRnJlcXVlbmN5OiB0cnVlLFxuICAgIGxpbmVCcmVha1N0cmF0ZWd5SU9TOiB0cnVlLFxuICB9LFxuICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgdG9wVGV4dExheW91dDoge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uVGV4dExheW91dCcsXG4gICAgfSxcbiAgfSxcbiAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVGV4dCcsXG59O1xuXG5jb25zdCB2aXJ0dWFsVGV4dFZpZXdDb25maWcgPSB7XG4gIHZhbGlkQXR0cmlidXRlczoge1xuICAgIGlzSGlnaGxpZ2h0ZWQ6IHRydWUsXG4gICAgaXNQcmVzc2FibGU6IHRydWUsXG4gICAgbWF4Rm9udFNpemVNdWx0aXBsaWVyOiB0cnVlLFxuICB9LFxuICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RWaXJ0dWFsVGV4dCcsXG59O1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVGV4dDogSG9zdENvbXBvbmVudDxOYXRpdmVUZXh0UHJvcHM+ID1cbiAgKGNyZWF0ZVJlYWN0TmF0aXZlQ29tcG9uZW50Q2xhc3MoJ1JDVFRleHQnLCAoKSA9PlxuICAgIC8qICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdIE5hdHVyYWwgSW5mZXJlbmNlIHJvbGxvdXQuIFNlZVxuICAgICAqIGh0dHBzOi8vZmJ1cmwuY29tL3dvcmtwbGFjZS82MjkxZ2Z2dSAqL1xuICAgIGNyZWF0ZVZpZXdDb25maWcodGV4dFZpZXdDb25maWcpLFxuICApOiBhbnkpO1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVmlydHVhbFRleHQ6IEhvc3RDb21wb25lbnQ8TmF0aXZlVGV4dFByb3BzPiA9XG4gICFnbG9iYWwuUk4kQnJpZGdlbGVzcyAmJiAhVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKCdSQ1RWaXJ0dWFsVGV4dCcpXG4gICAgPyBOYXRpdmVUZXh0XG4gICAgOiAoY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcygnUkNUVmlydHVhbFRleHQnLCAoKSA9PlxuICAgICAgICAvKiAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXSBOYXR1cmFsIEluZmVyZW5jZSByb2xsb3V0LiBTZWVcbiAgICAgICAgICogaHR0cHM6Ly9mYnVybC5jb20vd29ya3BsYWNlLzYyOTFnZnZ1ICovXG4gICAgICAgIGNyZWF0ZVZpZXdDb25maWcodmlydHVhbFRleHRWaWV3Q29uZmlnKSxcbiAgICAgICk6IGFueSk7XG4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBZUEsSUFBQUEsV0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsVUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBQ0EsSUFBQUcsZ0NBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQWFBLElBQU1JLGNBQWMsR0FBRztFQUNyQkMsZUFBZSxFQUFFO0lBQ2ZDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxXQUFXLEVBQUUsSUFBSTtJQUNqQkMsYUFBYSxFQUFFLElBQUk7SUFDbkJDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCQyxlQUFlLEVBQUUsSUFBSTtJQUNyQkMscUJBQXFCLEVBQUUsSUFBSTtJQUMzQkMsUUFBUSxFQUFFLElBQUk7SUFDZEMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxvQkFBb0IsRUFBRSxJQUFJO0lBQzFCQyxnQkFBZ0IsRUFBRSxJQUFJO0lBQ3RCQyxpQkFBaUIsRUFBRSxJQUFJO0lBQ3ZCQyxZQUFZLEVBQUUsSUFBSTtJQUNsQkMsZ0JBQWdCLEVBQUUsSUFBSTtJQUN0QkMsNEJBQTRCLEVBQUUsSUFBSTtJQUNsQ0Msb0JBQW9CLEVBQUU7RUFDeEIsQ0FBQztFQUNEQyxnQkFBZ0IsRUFBRTtJQUNoQkMsYUFBYSxFQUFFO01BQ2JDLGdCQUFnQixFQUFFO0lBQ3BCO0VBQ0YsQ0FBQztFQUNEQyxlQUFlLEVBQUU7QUFDbkIsQ0FBQztBQUVELElBQU1DLHFCQUFxQixHQUFHO0VBQzVCdEIsZUFBZSxFQUFFO0lBQ2ZDLGFBQWEsRUFBRSxJQUFJO0lBQ25CQyxXQUFXLEVBQUUsSUFBSTtJQUNqQksscUJBQXFCLEVBQUU7RUFDekIsQ0FBQztFQUNEYyxlQUFlLEVBQUU7QUFDbkIsQ0FBQztBQUVNLElBQU1FLFVBQTBDLEdBQUFDLE9BQUEsQ0FBQUQsVUFBQSxHQUNwRCxJQUFBRSx3Q0FBK0IsRUFBQyxTQUFTLEVBQUU7RUFBQSxPQUcxQyxJQUFBQyw0QkFBZ0IsRUFBQzNCLGNBQWMsQ0FBQztBQUFBLENBQ2xDLENBQU87QUFFRixJQUFNNEIsaUJBQWlELEdBQUFILE9BQUEsQ0FBQUcsaUJBQUEsR0FDNUQsQ0FBQ0MsTUFBTSxDQUFDQyxhQUFhLElBQUksQ0FBQ0Msa0JBQVMsQ0FBQ0Msb0JBQW9CLENBQUMsZ0JBQWdCLENBQUMsR0FDdEVSLFVBQVUsR0FDVCxJQUFBRSx3Q0FBK0IsRUFBQyxnQkFBZ0IsRUFBRTtFQUFBLE9BR2pELElBQUFDLDRCQUFnQixFQUFDSixxQkFBcUIsQ0FBQztBQUFBLENBQ3pDLENBQU8iLCJpZ25vcmVMaXN0IjpbXX0=