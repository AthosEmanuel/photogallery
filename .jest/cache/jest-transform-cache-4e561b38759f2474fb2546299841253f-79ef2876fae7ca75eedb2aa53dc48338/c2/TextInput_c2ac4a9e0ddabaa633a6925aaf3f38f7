6d18ccef693b9576464a51e63f73861a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _usePressability2 = _interopRequireDefault(require("../../Pressability/usePressability"));
var _flattenStyle = _interopRequireDefault(require("../../StyleSheet/flattenStyle"));
var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));
var _Text = _interopRequireDefault(require("../../Text/Text"));
var _TextAncestorContext = _interopRequireDefault(require("../../Text/TextAncestorContext"));
var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));
var _useMergeRefs = _interopRequireDefault(require("../../Utilities/useMergeRefs"));
var _TextInputState = _interopRequireDefault(require("./TextInputState"));
var _invariant = _interopRequireDefault(require("invariant"));
var _nullthrows = _interopRequireDefault(require("nullthrows"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["aria-busy", "aria-checked", "aria-disabled", "aria-expanded", "aria-selected", "accessibilityState", "id", "tabIndex", "selection", "selectionColor", "selectionHandleColor", "cursorColor"],
  _excluded2 = ["onBlur", "onFocus"],
  _excluded3 = ["ref", "allowFontScaling", "rejectResponderTermination", "underlineColorAndroid", "autoComplete", "textContentType", "readOnly", "editable", "enterKeyHint", "returnKeyType", "inputMode", "showSoftInputOnFocus", "keyboardType"];
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
var AndroidTextInput;
var AndroidTextInputCommands;
var RCTSinglelineTextInputView;
var RCTSinglelineTextInputNativeCommands;
var RCTMultilineTextInputView;
var RCTMultilineTextInputNativeCommands;
if (_Platform.default.OS === 'android') {
  AndroidTextInput = require('./AndroidTextInputNativeComponent').default;
  AndroidTextInputCommands = require('./AndroidTextInputNativeComponent').Commands;
} else if (_Platform.default.OS === 'ios') {
  RCTSinglelineTextInputView = require('./RCTSingelineTextInputNativeComponent').default;
  RCTSinglelineTextInputNativeCommands = require('./RCTSingelineTextInputNativeComponent').Commands;
  RCTMultilineTextInputView = require('./RCTMultilineTextInputNativeComponent').default;
  RCTMultilineTextInputNativeCommands = require('./RCTMultilineTextInputNativeComponent').Commands;
}
var emptyFunctionThatReturnsTrue = function emptyFunctionThatReturnsTrue() {
  return true;
};
function useTextInputStateSynchronization(_ref) {
  var props = _ref.props,
    mostRecentEventCount = _ref.mostRecentEventCount,
    selection = _ref.selection,
    inputRef = _ref.inputRef,
    text = _ref.text,
    viewCommands = _ref.viewCommands;
  var _useState = (0, _react.useState)(props.value),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    lastNativeText = _useState2[0],
    setLastNativeText = _useState2[1];
  var _useState3 = (0, _react.useState)({
      selection: {
        start: -1,
        end: -1
      },
      mostRecentEventCount: mostRecentEventCount
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    lastNativeSelectionState = _useState4[0],
    setLastNativeSelection = _useState4[1];
  var lastNativeSelection = lastNativeSelectionState.selection;
  (0, _react.useLayoutEffect)(function () {
    var nativeUpdate = {};
    if (lastNativeText !== props.value && typeof props.value === 'string') {
      nativeUpdate.text = props.value;
      setLastNativeText(props.value);
    }
    if (selection && lastNativeSelection && (lastNativeSelection.start !== selection.start || lastNativeSelection.end !== selection.end)) {
      nativeUpdate.selection = selection;
      setLastNativeSelection({
        selection: selection,
        mostRecentEventCount: mostRecentEventCount
      });
    }
    if (Object.keys(nativeUpdate).length === 0) {
      return;
    }
    if (inputRef.current != null) {
      var _selection$start, _selection$end;
      viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, text, (_selection$start = selection == null ? void 0 : selection.start) != null ? _selection$start : -1, (_selection$end = selection == null ? void 0 : selection.end) != null ? _selection$end : -1);
    }
  }, [mostRecentEventCount, inputRef, props.value, props.defaultValue, lastNativeText, selection, lastNativeSelection, text, viewCommands]);
  return {
    setLastNativeText: setLastNativeText,
    setLastNativeSelection: setLastNativeSelection
  };
}
function InternalTextInput(props) {
  var _propsSelection$end, _props$multiline, _props$ariaLabel;
  var ariaBusy = props['aria-busy'],
    ariaChecked = props['aria-checked'],
    ariaDisabled = props['aria-disabled'],
    ariaExpanded = props['aria-expanded'],
    ariaSelected = props['aria-selected'],
    accessibilityState = props.accessibilityState,
    id = props.id,
    tabIndex = props.tabIndex,
    propsSelection = props.selection,
    selectionColor = props.selectionColor,
    selectionHandleColor = props.selectionHandleColor,
    cursorColor = props.cursorColor,
    otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var inputRef = (0, _react.useRef)(null);
  var selection = propsSelection == null ? null : {
    start: propsSelection.start,
    end: (_propsSelection$end = propsSelection.end) != null ? _propsSelection$end : propsSelection.start
  };
  var text = typeof props.value === 'string' ? props.value : typeof props.defaultValue === 'string' ? props.defaultValue : undefined;
  var viewCommands = AndroidTextInputCommands || (props.multiline === true ? RCTMultilineTextInputNativeCommands : RCTSinglelineTextInputNativeCommands);
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    mostRecentEventCount = _useState6[0],
    setMostRecentEventCount = _useState6[1];
  var _useTextInputStateSyn = useTextInputStateSynchronization({
      props: props,
      inputRef: inputRef,
      mostRecentEventCount: mostRecentEventCount,
      selection: selection,
      text: text,
      viewCommands: viewCommands
    }),
    setLastNativeText = _useTextInputStateSyn.setLastNativeText,
    setLastNativeSelection = _useTextInputStateSyn.setLastNativeSelection;
  (0, _react.useLayoutEffect)(function () {
    var inputRefValue = inputRef.current;
    if (inputRefValue != null) {
      _TextInputState.default.registerInput(inputRefValue);
      return function () {
        _TextInputState.default.unregisterInput(inputRefValue);
        if (_TextInputState.default.currentlyFocusedInput() === inputRefValue) {
          (0, _nullthrows.default)(inputRefValue).blur();
        }
      };
    }
  }, []);
  var setLocalRef = (0, _react.useCallback)(function (instance) {
    inputRef.current = instance;
    if (instance != null) {
      Object.assign(instance, {
        clear: function clear() {
          if (inputRef.current != null) {
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, '', 0, 0);
          }
        },
        isFocused: function isFocused() {
          return _TextInputState.default.currentlyFocusedInput() === inputRef.current;
        },
        getNativeRef: function getNativeRef() {
          return inputRef.current;
        },
        setSelection: function setSelection(start, end) {
          if (inputRef.current != null) {
            viewCommands.setTextAndSelection(inputRef.current, mostRecentEventCount, null, start, end);
          }
        }
      });
    }
  }, [mostRecentEventCount, viewCommands]);
  var ref = (0, _useMergeRefs.default)(setLocalRef, props.forwardedRef);
  var _onChange = function _onChange(event) {
    var currentText = event.nativeEvent.text;
    props.onChange && props.onChange(event);
    props.onChangeText && props.onChangeText(currentText);
    if (inputRef.current == null) {
      return;
    }
    setLastNativeText(currentText);
    setMostRecentEventCount(event.nativeEvent.eventCount);
  };
  var _onSelectionChange = function _onSelectionChange(event) {
    props.onSelectionChange && props.onSelectionChange(event);
    if (inputRef.current == null) {
      return;
    }
    setLastNativeSelection({
      selection: event.nativeEvent.selection,
      mostRecentEventCount: mostRecentEventCount
    });
  };
  var _onFocus = function _onFocus(event) {
    _TextInputState.default.focusInput(inputRef.current);
    if (props.onFocus) {
      props.onFocus(event);
    }
  };
  var _onBlur = function _onBlur(event) {
    _TextInputState.default.blurInput(inputRef.current);
    if (props.onBlur) {
      props.onBlur(event);
    }
  };
  var _onScroll = function _onScroll(event) {
    props.onScroll && props.onScroll(event);
  };
  var textInput = null;
  var multiline = (_props$multiline = props.multiline) != null ? _props$multiline : false;
  var submitBehavior;
  if (props.submitBehavior != null) {
    if (!multiline && props.submitBehavior === 'newline') {
      submitBehavior = 'blurAndSubmit';
    } else {
      submitBehavior = props.submitBehavior;
    }
  } else if (multiline) {
    if (props.blurOnSubmit === true) {
      submitBehavior = 'blurAndSubmit';
    } else {
      submitBehavior = 'newline';
    }
  } else {
    if (props.blurOnSubmit !== false) {
      submitBehavior = 'blurAndSubmit';
    } else {
      submitBehavior = 'submit';
    }
  }
  var accessible = props.accessible !== false;
  var focusable = props.focusable !== false;
  var editable = props.editable,
    hitSlop = props.hitSlop,
    _onPress = props.onPress,
    onPressIn = props.onPressIn,
    onPressOut = props.onPressOut,
    rejectResponderTermination = props.rejectResponderTermination;
  var config = (0, _react.useMemo)(function () {
    return {
      hitSlop: hitSlop,
      onPress: function onPress(event) {
        _onPress == null || _onPress(event);
        if (editable !== false) {
          if (inputRef.current != null) {
            inputRef.current.focus();
          }
        }
      },
      onPressIn: onPressIn,
      onPressOut: onPressOut,
      cancelable: _Platform.default.OS === 'ios' ? !rejectResponderTermination : null
    };
  }, [editable, hitSlop, _onPress, onPressIn, onPressOut, rejectResponderTermination]);
  var caretHidden = props.caretHidden;
  if (_Platform.default.isTesting) {
    caretHidden = true;
  }
  var _usePressability = (0, _usePressability2.default)(config),
    onBlur = _usePressability.onBlur,
    onFocus = _usePressability.onFocus,
    eventHandlers = (0, _objectWithoutProperties2.default)(_usePressability, _excluded2);
  var _accessibilityLabel = (_props$ariaLabel = props == null ? void 0 : props['aria-label']) != null ? _props$ariaLabel : props == null ? void 0 : props.accessibilityLabel;
  var _accessibilityState;
  if (accessibilityState != null || ariaBusy != null || ariaChecked != null || ariaDisabled != null || ariaExpanded != null || ariaSelected != null) {
    _accessibilityState = {
      busy: ariaBusy != null ? ariaBusy : accessibilityState == null ? void 0 : accessibilityState.busy,
      checked: ariaChecked != null ? ariaChecked : accessibilityState == null ? void 0 : accessibilityState.checked,
      disabled: ariaDisabled != null ? ariaDisabled : accessibilityState == null ? void 0 : accessibilityState.disabled,
      expanded: ariaExpanded != null ? ariaExpanded : accessibilityState == null ? void 0 : accessibilityState.expanded,
      selected: ariaSelected != null ? ariaSelected : accessibilityState == null ? void 0 : accessibilityState.selected
    };
  }
  var _style = props.style;
  var flattenedStyle = (0, _flattenStyle.default)(props.style);
  if (flattenedStyle != null) {
    var overrides = null;
    if (typeof (flattenedStyle == null ? void 0 : flattenedStyle.fontWeight) === 'number') {
      overrides = overrides || {};
      overrides.fontWeight = flattenedStyle.fontWeight.toString();
    }
    if (flattenedStyle.verticalAlign != null) {
      overrides = overrides || {};
      overrides.textAlignVertical = verticalAlignToTextAlignVerticalMap[flattenedStyle.verticalAlign];
      overrides.verticalAlign = undefined;
    }
    if (overrides != null) {
      _style = [_style, overrides];
    }
  }
  if (_Platform.default.OS === 'ios') {
    var _props$rows;
    var RCTTextInputView = props.multiline === true ? RCTMultilineTextInputView : RCTSinglelineTextInputView;
    var useMultilineDefaultStyle = props.multiline === true && (flattenedStyle == null || flattenedStyle.padding == null && flattenedStyle.paddingVertical == null && flattenedStyle.paddingTop == null);
    textInput = (0, _jsxRuntime.jsx)(RCTTextInputView, Object.assign({
      ref: ref
    }, otherProps, eventHandlers, {
      acceptDragAndDropTypes: props.experimental_acceptDragAndDropTypes,
      accessibilityLabel: _accessibilityLabel,
      accessibilityState: _accessibilityState,
      accessible: accessible,
      submitBehavior: submitBehavior,
      caretHidden: caretHidden,
      dataDetectorTypes: props.dataDetectorTypes,
      focusable: tabIndex !== undefined ? !tabIndex : focusable,
      mostRecentEventCount: mostRecentEventCount,
      nativeID: id != null ? id : props.nativeID,
      numberOfLines: (_props$rows = props.rows) != null ? _props$rows : props.numberOfLines,
      onBlur: _onBlur,
      onChange: _onChange,
      onContentSizeChange: props.onContentSizeChange,
      onFocus: _onFocus,
      onScroll: _onScroll,
      onSelectionChange: _onSelectionChange,
      onSelectionChangeShouldSetResponder: emptyFunctionThatReturnsTrue,
      selection: selection,
      selectionColor: selectionColor,
      style: _StyleSheet.default.compose(useMultilineDefaultStyle ? styles.multilineDefault : null, _style),
      text: text
    }));
  } else if (_Platform.default.OS === 'android') {
    var _props$ariaLabelledb, _props$placeholder, _props$rows2;
    var autoCapitalize = props.autoCapitalize || 'sentences';
    var _accessibilityLabelledBy = (_props$ariaLabelledb = props == null ? void 0 : props['aria-labelledby']) != null ? _props$ariaLabelledb : props == null ? void 0 : props.accessibilityLabelledBy;
    var placeholder = (_props$placeholder = props.placeholder) != null ? _props$placeholder : '';
    var children = props.children;
    var childCount = React.Children.count(children);
    (0, _invariant.default)(!(props.value != null && childCount), 'Cannot specify both value and children.');
    if (childCount > 1) {
      children = (0, _jsxRuntime.jsx)(_Text.default, {
        children: children
      });
    }
    var colorProps = {
      selectionColor: selectionColor,
      selectionHandleColor: selectionHandleColor === undefined ? selectionColor : selectionHandleColor,
      cursorColor: cursorColor === undefined ? selectionColor : cursorColor
    };
    textInput = (0, _jsxRuntime.jsx)(AndroidTextInput, Object.assign({
      ref: ref
    }, otherProps, colorProps, eventHandlers, {
      accessibilityLabel: _accessibilityLabel,
      accessibilityLabelledBy: _accessibilityLabelledBy,
      accessibilityState: _accessibilityState,
      accessible: accessible,
      acceptDragAndDropTypes: props.experimental_acceptDragAndDropTypes,
      autoCapitalize: autoCapitalize,
      submitBehavior: submitBehavior,
      caretHidden: caretHidden,
      children: children,
      disableFullscreenUI: props.disableFullscreenUI,
      focusable: tabIndex !== undefined ? !tabIndex : focusable,
      mostRecentEventCount: mostRecentEventCount,
      nativeID: id != null ? id : props.nativeID,
      numberOfLines: (_props$rows2 = props.rows) != null ? _props$rows2 : props.numberOfLines,
      onBlur: _onBlur,
      onChange: _onChange,
      onFocus: _onFocus,
      onScroll: _onScroll,
      onSelectionChange: _onSelectionChange,
      placeholder: placeholder,
      style: _style,
      text: text,
      textBreakStrategy: props.textBreakStrategy
    }));
  }
  return (0, _jsxRuntime.jsx)(_TextAncestorContext.default, {
    value: true,
    children: textInput
  });
}
var enterKeyHintToReturnTypeMap = {
  enter: 'default',
  done: 'done',
  go: 'go',
  next: 'next',
  previous: 'previous',
  search: 'search',
  send: 'send'
};
var inputModeToKeyboardTypeMap = {
  none: 'default',
  text: 'default',
  decimal: 'decimal-pad',
  numeric: 'number-pad',
  tel: 'phone-pad',
  search: _Platform.default.OS === 'ios' ? 'web-search' : 'default',
  email: 'email-address',
  url: 'url'
};
var autoCompleteWebToAutoCompleteAndroidMap = {
  'address-line1': 'postal-address-region',
  'address-line2': 'postal-address-locality',
  bday: 'birthdate-full',
  'bday-day': 'birthdate-day',
  'bday-month': 'birthdate-month',
  'bday-year': 'birthdate-year',
  'cc-csc': 'cc-csc',
  'cc-exp': 'cc-exp',
  'cc-exp-month': 'cc-exp-month',
  'cc-exp-year': 'cc-exp-year',
  'cc-number': 'cc-number',
  country: 'postal-address-country',
  'current-password': 'password',
  email: 'email',
  'honorific-prefix': 'name-prefix',
  'honorific-suffix': 'name-suffix',
  name: 'name',
  'additional-name': 'name-middle',
  'family-name': 'name-family',
  'given-name': 'name-given',
  'new-password': 'password-new',
  off: 'off',
  'one-time-code': 'sms-otp',
  'postal-code': 'postal-code',
  sex: 'gender',
  'street-address': 'street-address',
  tel: 'tel',
  'tel-country-code': 'tel-country-code',
  'tel-national': 'tel-national',
  username: 'username'
};
var autoCompleteWebToTextContentTypeMap = {
  'address-line1': 'streetAddressLine1',
  'address-line2': 'streetAddressLine2',
  bday: 'birthdate',
  'bday-day': 'birthdateDay',
  'bday-month': 'birthdateMonth',
  'bday-year': 'birthdateYear',
  'cc-csc': 'creditCardSecurityCode',
  'cc-exp-month': 'creditCardExpirationMonth',
  'cc-exp-year': 'creditCardExpirationYear',
  'cc-exp': 'creditCardExpiration',
  'cc-given-name': 'creditCardGivenName',
  'cc-additional-name': 'creditCardMiddleName',
  'cc-family-name': 'creditCardFamilyName',
  'cc-name': 'creditCardName',
  'cc-number': 'creditCardNumber',
  'cc-type': 'creditCardType',
  'current-password': 'password',
  country: 'countryName',
  email: 'emailAddress',
  name: 'name',
  'additional-name': 'middleName',
  'family-name': 'familyName',
  'given-name': 'givenName',
  nickname: 'nickname',
  'honorific-prefix': 'namePrefix',
  'honorific-suffix': 'nameSuffix',
  'new-password': 'newPassword',
  off: 'none',
  'one-time-code': 'oneTimeCode',
  organization: 'organizationName',
  'organization-title': 'jobTitle',
  'postal-code': 'postalCode',
  'street-address': 'fullStreetAddress',
  tel: 'telephoneNumber',
  url: 'URL',
  username: 'username'
};
var TextInput = function TextInput(_ref2) {
  var _autoCompleteWebToAut;
  var forwardedRef = _ref2.ref,
    _ref2$allowFontScalin = _ref2.allowFontScaling,
    allowFontScaling = _ref2$allowFontScalin === void 0 ? true : _ref2$allowFontScalin,
    _ref2$rejectResponder = _ref2.rejectResponderTermination,
    rejectResponderTermination = _ref2$rejectResponder === void 0 ? true : _ref2$rejectResponder,
    _ref2$underlineColorA = _ref2.underlineColorAndroid,
    underlineColorAndroid = _ref2$underlineColorA === void 0 ? 'transparent' : _ref2$underlineColorA,
    autoComplete = _ref2.autoComplete,
    textContentType = _ref2.textContentType,
    readOnly = _ref2.readOnly,
    editable = _ref2.editable,
    enterKeyHint = _ref2.enterKeyHint,
    returnKeyType = _ref2.returnKeyType,
    inputMode = _ref2.inputMode,
    showSoftInputOnFocus = _ref2.showSoftInputOnFocus,
    keyboardType = _ref2.keyboardType,
    restProps = (0, _objectWithoutProperties2.default)(_ref2, _excluded3);
  return (0, _jsxRuntime.jsx)(InternalTextInput, Object.assign({
    allowFontScaling: allowFontScaling,
    rejectResponderTermination: rejectResponderTermination,
    underlineColorAndroid: underlineColorAndroid,
    editable: readOnly !== undefined ? !readOnly : editable,
    returnKeyType: enterKeyHint ? enterKeyHintToReturnTypeMap[enterKeyHint] : returnKeyType,
    keyboardType: inputMode ? inputModeToKeyboardTypeMap[inputMode] : keyboardType,
    showSoftInputOnFocus: inputMode == null ? showSoftInputOnFocus : inputMode !== 'none',
    autoComplete: _Platform.default.OS === 'android' ? (_autoCompleteWebToAut = autoCompleteWebToAutoCompleteAndroidMap[autoComplete]) != null ? _autoCompleteWebToAut : autoComplete : undefined,
    textContentType: textContentType != null ? textContentType : _Platform.default.OS === 'ios' && autoComplete && autoComplete in autoCompleteWebToTextContentTypeMap ? autoCompleteWebToTextContentTypeMap[autoComplete] : textContentType
  }, restProps, {
    forwardedRef: forwardedRef
  }));
};
TextInput.displayName = 'TextInput';
TextInput.State = {
  currentlyFocusedInput: _TextInputState.default.currentlyFocusedInput,
  currentlyFocusedField: _TextInputState.default.currentlyFocusedField,
  focusTextInput: _TextInputState.default.focusTextInput,
  blurTextInput: _TextInputState.default.blurTextInput
};
var styles = _StyleSheet.default.create({
  multilineDefault: {
    paddingTop: 5
  }
});
var verticalAlignToTextAlignVerticalMap = {
  auto: 'auto',
  top: 'top',
  bottom: 'bottom',
  middle: 'center'
};
var _default = exports.default = TextInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,