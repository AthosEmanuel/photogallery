ad92d68e060d223ae58d0b06a8b57219
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFabricUIManager = getFabricUIManager;
var _defineLazyObjectProperty = _interopRequireDefault(require("../Utilities/defineLazyObjectProperty"));
var nativeFabricUIManagerProxy;
var CACHED_PROPERTIES = ['createNode', 'cloneNode', 'cloneNodeWithNewChildren', 'cloneNodeWithNewProps', 'cloneNodeWithNewChildrenAndProps', 'createChildSet', 'appendChild', 'appendChildToSet', 'completeRoot', 'measure', 'measureInWindow', 'measureLayout', 'configureNextLayoutAnimation', 'sendAccessibilityEvent', 'findShadowNodeByTag_DEPRECATED', 'setNativeProps', 'dispatchCommand', 'compareDocumentPosition', 'getBoundingClientRect', 'unstable_DefaultEventPriority', 'unstable_DiscreteEventPriority', 'unstable_ContinuousEventPriority', 'unstable_IdleEventPriority', 'unstable_getCurrentEventPriority'];
function getFabricUIManager() {
  if (nativeFabricUIManagerProxy == null && global.nativeFabricUIManager != null) {
    nativeFabricUIManagerProxy = createProxyWithCachedProperties(global.nativeFabricUIManager, CACHED_PROPERTIES);
  }
  return nativeFabricUIManagerProxy;
}
function createProxyWithCachedProperties(implementation, propertiesToCache) {
  var proxy = Object.create(implementation);
  var _loop = function _loop(propertyName) {
    (0, _defineLazyObjectProperty.default)(proxy, propertyName, {
      get: function get() {
        return implementation[propertyName];
      }
    });
  };
  for (var propertyName of propertiesToCache) {
    _loop(propertyName);
  }
  return proxy;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,