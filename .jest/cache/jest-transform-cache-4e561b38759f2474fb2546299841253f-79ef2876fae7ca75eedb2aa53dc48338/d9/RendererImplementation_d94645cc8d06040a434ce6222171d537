377f0ba21eada5679e12d24db77ff6bc
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchCommand = dispatchCommand;
exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;
exports.findNodeHandle = findNodeHandle;
exports.getNodeFromInternalInstanceHandle = getNodeFromInternalInstanceHandle;
exports.getPublicInstanceFromInternalInstanceHandle = getPublicInstanceFromInternalInstanceHandle;
exports.getPublicInstanceFromRootTag = getPublicInstanceFromRootTag;
exports.isChildPublicInstance = isChildPublicInstance;
exports.isProfilingRenderer = isProfilingRenderer;
exports.renderElement = renderElement;
exports.sendAccessibilityEvent = sendAccessibilityEvent;
exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;
exports.unstable_batchedUpdates = unstable_batchedUpdates;
var _ErrorHandlers = require("../../src/private/renderer/errorhandling/ErrorHandlers");
var React = _interopRequireWildcard(require("react"));
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function renderElement(_ref) {
  var element = _ref.element,
    rootTag = _ref.rootTag,
    useFabric = _ref.useFabric,
    useConcurrentRoot = _ref.useConcurrentRoot;
  if (useFabric) {
    require('../Renderer/shims/ReactFabric').default.render(element, rootTag, null, useConcurrentRoot, {
      onCaughtError: _ErrorHandlers.onCaughtError,
      onUncaughtError: _ErrorHandlers.onUncaughtError,
      onRecoverableError: _ErrorHandlers.onRecoverableError
    });
  } else {
    require('../Renderer/shims/ReactNative').default.render(element, rootTag, undefined, {
      onCaughtError: _ErrorHandlers.onCaughtError,
      onUncaughtError: _ErrorHandlers.onUncaughtError,
      onRecoverableError: _ErrorHandlers.onRecoverableError
    });
  }
}
function findHostInstance_DEPRECATED(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').default.findHostInstance_DEPRECATED(componentOrHandle);
}
function findNodeHandle(componentOrHandle) {
  return require('../Renderer/shims/ReactNative').default.findNodeHandle(componentOrHandle);
}
function dispatchCommand(handle, command, args) {
  if (global.RN$Bridgeless === true) {
    return require('../Renderer/shims/ReactFabric').default.dispatchCommand(handle, command, args);
  } else {
    return require('../Renderer/shims/ReactNative').default.dispatchCommand(handle, command, args);
  }
}
function sendAccessibilityEvent(handle, eventType) {
  return require('../Renderer/shims/ReactNative').default.sendAccessibilityEvent(handle, eventType);
}
function unmountComponentAtNodeAndRemoveContainer(rootTag) {
  var rootTagAsNumber = rootTag;
  require('../Renderer/shims/ReactNative').default.unmountComponentAtNodeAndRemoveContainer(rootTagAsNumber);
}
function unstable_batchedUpdates(fn, bookkeeping) {
  return require('../Renderer/shims/ReactNative').default.unstable_batchedUpdates(fn, bookkeeping);
}
function isProfilingRenderer() {
  return Boolean(__DEV__);
}
function isChildPublicInstance(parentInstance, childInstance) {
  return require('../Renderer/shims/ReactNative').default.isChildPublicInstance(parentInstance, childInstance);
}
function getNodeFromInternalInstanceHandle(internalInstanceHandle) {
  return require('../Renderer/shims/ReactFabric').default.getNodeFromInternalInstanceHandle(internalInstanceHandle);
}
function getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle) {
  return require('../Renderer/shims/ReactFabric').default.getPublicInstanceFromInternalInstanceHandle(internalInstanceHandle);
}
function getPublicInstanceFromRootTag(rootTag) {
  return require('../Renderer/shims/ReactFabric').default.getPublicInstanceFromRootTag(rootTag);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,