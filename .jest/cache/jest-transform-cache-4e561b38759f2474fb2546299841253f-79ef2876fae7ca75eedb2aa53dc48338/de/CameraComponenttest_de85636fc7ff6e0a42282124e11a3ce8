647454c8bbdfd720ba6abe034f7b7d99
_getJestObj().mock('react-native-image-picker', function () {
  return {
    launchCamera: jest.fn()
  };
});
_getJestObj().mock('@react-native-community/geolocation', function () {
  return {
    getCurrentPosition: jest.fn(function (success) {
      return success({
        coords: {
          latitude: 1,
          longitude: 2
        }
      });
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _react = _interopRequireDefault(require("react"));
var _camera = _interopRequireDefault(require("../src/components/camera"));
var _reactNativeImagePicker = require("react-native-image-picker");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.PermissionsAndroid, 'request').mockResolvedValue(_reactNative2.PermissionsAndroid.RESULTS.GRANTED);
jest.spyOn(_reactNative2.Alert, 'alert').mockImplementation(function () {});
describe('CameraComponent', function () {
  it('chama onPhotoTaken e onClose corretamente', (0, _asyncToGenerator2.default)(function* () {
    var onPhotoTakenMock = jest.fn();
    var onCloseMock = jest.fn();
    _reactNativeImagePicker.launchCamera.mockImplementation(function (_options, callback) {
      callback({
        assets: [{
          uri: 'file://photo.jpg'
        }]
      });
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_camera.default, {
      onPhotoTaken: onPhotoTakenMock,
      onClose: onCloseMock
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(onPhotoTakenMock).toHaveBeenCalledWith('file://photo.jpg', {
        latitude: 1,
        longitude: 2
      });
      expect(onCloseMock).toHaveBeenCalled();
    });
  }));
  it('fecha a câmera se permissão negada', (0, _asyncToGenerator2.default)(function* () {
    _reactNative2.PermissionsAndroid.request.mockResolvedValueOnce(_reactNative2.PermissionsAndroid.RESULTS.DENIED);
    var onCloseMock = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_camera.default, {
      onClose: onCloseMock
    }));
    yield (0, _reactNative.waitFor)(function () {
      expect(onCloseMock).toHaveBeenCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJsYXVuY2hDYW1lcmEiLCJqZXN0IiwiZm4iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJzdWNjZXNzIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdE5hdGl2ZSIsIl9yZWFjdE5hdGl2ZTIiLCJfcmVhY3QiLCJfY2FtZXJhIiwiX3JlYWN0TmF0aXZlSW1hZ2VQaWNrZXIiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwic3B5T24iLCJQZXJtaXNzaW9uc0FuZHJvaWQiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIlJFU1VMVFMiLCJHUkFOVEVEIiwiQWxlcnQiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJkZXNjcmliZSIsIml0IiwiZGVmYXVsdCIsIm9uUGhvdG9UYWtlbk1vY2siLCJvbkNsb3NlTW9jayIsIl9vcHRpb25zIiwiY2FsbGJhY2siLCJhc3NldHMiLCJ1cmkiLCJyZW5kZXIiLCJqc3giLCJvblBob3RvVGFrZW4iLCJvbkNsb3NlIiwid2FpdEZvciIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwidG9IYXZlQmVlbkNhbGxlZCIsInJlcXVlc3QiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJERU5JRUQiXSwic291cmNlcyI6WyJDYW1lcmFDb21wb25lbnQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCB3YWl0Rm9yIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgQWxlcnQsIFBlcm1pc3Npb25zQW5kcm9pZCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQ2FtZXJhQ29tcG9uZW50IGZyb20gJy4uL3NyYy9jb21wb25lbnRzL2NhbWVyYSc7IC8vIGFqdXN0ZSBvIGNhbWluaG8gY29uZm9ybWUgc2V1IHByb2pldG9cbi8vIE1vY2tzXG5pbXBvcnQgeyBsYXVuY2hDYW1lcmEgfSBmcm9tICdyZWFjdC1uYXRpdmUtaW1hZ2UtcGlja2VyJztcblxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUtaW1hZ2UtcGlja2VyJywgKCkgPT4gKHtcbiAgbGF1bmNoQ2FtZXJhOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvZ2VvbG9jYXRpb24nLCAoKSA9PiAoe1xuICBnZXRDdXJyZW50UG9zaXRpb246IGplc3QuZm4oc3VjY2VzcyA9PlxuICAgIHN1Y2Nlc3MoeyBjb29yZHM6IHsgbGF0aXR1ZGU6IDEsIGxvbmdpdHVkZTogMiB9IH0pLFxuICApLFxufSkpO1xuXG5qZXN0XG4gIC5zcHlPbihQZXJtaXNzaW9uc0FuZHJvaWQsICdyZXF1ZXN0JylcbiAgLm1vY2tSZXNvbHZlZFZhbHVlKFBlcm1pc3Npb25zQW5kcm9pZC5SRVNVTFRTLkdSQU5URUQpO1xuamVzdC5zcHlPbihBbGVydCwgJ2FsZXJ0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHt9KTtcblxuZGVzY3JpYmUoJ0NhbWVyYUNvbXBvbmVudCcsICgpID0+IHtcbiAgaXQoJ2NoYW1hIG9uUGhvdG9UYWtlbiBlIG9uQ2xvc2UgY29ycmV0YW1lbnRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG9uUGhvdG9UYWtlbk1vY2sgPSBqZXN0LmZuKCk7XG4gICAgY29uc3Qgb25DbG9zZU1vY2sgPSBqZXN0LmZuKCk7XG5cbiAgICAvLyBNb2NrIGRvIGxhdW5jaENhbWVyYVxuICAgIChsYXVuY2hDYW1lcmEgYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKF9vcHRpb25zLCBjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soeyBhc3NldHM6IFt7IHVyaTogJ2ZpbGU6Ly9waG90by5qcGcnIH1dIH0pO1xuICAgIH0pO1xuXG4gICAgcmVuZGVyKFxuICAgICAgPENhbWVyYUNvbXBvbmVudCBvblBob3RvVGFrZW49e29uUGhvdG9UYWtlbk1vY2t9IG9uQ2xvc2U9e29uQ2xvc2VNb2NrfSAvPixcbiAgICApO1xuXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiB7XG4gICAgICBleHBlY3Qob25QaG90b1Rha2VuTW9jaykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2ZpbGU6Ly9waG90by5qcGcnLCB7XG4gICAgICAgIGxhdGl0dWRlOiAxLFxuICAgICAgICBsb25naXR1ZGU6IDIsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChvbkNsb3NlTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcblxuICBpdCgnZmVjaGEgYSBjw6JtZXJhIHNlIHBlcm1pc3PDo28gbmVnYWRhJywgYXN5bmMgKCkgPT4ge1xuICAgIChQZXJtaXNzaW9uc0FuZHJvaWQucmVxdWVzdCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZShcbiAgICAgIFBlcm1pc3Npb25zQW5kcm9pZC5SRVNVTFRTLkRFTklFRCxcbiAgICApO1xuICAgIGNvbnN0IG9uQ2xvc2VNb2NrID0gamVzdC5mbigpO1xuXG4gICAgcmVuZGVyKDxDYW1lcmFDb21wb25lbnQgb25DbG9zZT17b25DbG9zZU1vY2t9IC8+KTtcblxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgZXhwZWN0KG9uQ2xvc2VNb2NrKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQVFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywyQkFBMkIsRUFBRTtFQUFBLE9BQU87SUFDNUNDLFlBQVksRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDeEIsQ0FBQztBQUFBLENBQUMsQ0FBQztBQUVISixXQUFBLEdBQUtDLElBQUksQ0FBQyxxQ0FBcUMsRUFBRTtFQUFBLE9BQU87SUFDdERJLGtCQUFrQixFQUFFRixJQUFJLENBQUND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