b31ff7dd67d1c722726bb4cf81bef1ec
_getJestObj().mock('@react-native-community/geolocation', function () {
  return {
    getCurrentPosition: jest.fn()
  };
});
_getJestObj().mock('react-native-image-picker', function () {
  return {
    launchCamera: jest.fn()
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var ImagePicker = _interopRequireWildcard(require("react-native-image-picker"));
var _reactNative = require("@testing-library/react-native");
var _reactNative2 = require("react-native");
var _geolocation = _interopRequireDefault(require("@react-native-community/geolocation"));
var _react = _interopRequireDefault(require("react"));
var _components = require("../src/components/");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
jest.spyOn(_reactNative2.Alert, 'alert');
describe('CameraComponent', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should call onClose if camera permission is denied (Android)', (0, _asyncToGenerator2.default)(function* () {
    if (_reactNative2.Platform.OS === 'android') {
      jest.spyOn(_reactNative2.PermissionsAndroid, 'request').mockResolvedValue(_reactNative2.PermissionsAndroid.RESULTS.DENIED);
      var onCloseMock = jest.fn();
      (0, _reactNative.render)((0, _jsxRuntime.jsx)(_components.CameraComponent, {
        onClose: onCloseMock
      }));
      yield (0, _reactNative.waitFor)(function () {
        return expect(onCloseMock).toHaveBeenCalled();
      });
      expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('Permissão negada', 'Não será possível usar a câmera');
    }
  }));
  it('should call onPhotoTaken and onClose when photo is taken (Android/iOS)', (0, _asyncToGenerator2.default)(function* () {
    if (_reactNative2.Platform.OS === 'android') {
      jest.spyOn(_reactNative2.PermissionsAndroid, 'request').mockResolvedValue(_reactNative2.PermissionsAndroid.RESULTS.GRANTED);
    }
    _geolocation.default.getCurrentPosition.mockImplementation(function (success) {
      return success({
        coords: {
          latitude: 10,
          longitude: 20
        }
      });
    });
    ImagePicker.launchCamera.mockImplementation(function (_options, callback) {
      return callback({
        assets: [{
          uri: 'photo-uri'
        }]
      });
    });
    var onPhotoTakenMock = jest.fn();
    var onCloseMock = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_components.CameraComponent, {
      onPhotoTaken: onPhotoTakenMock,
      onClose: onCloseMock
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(onPhotoTakenMock).toHaveBeenCalledWith('photo-uri', {
        latitude: 10,
        longitude: 20
      });
    });
    yield (0, _reactNative.waitFor)(function () {
      return expect(onCloseMock).toHaveBeenCalled();
    });
  }));
  it('should call onClose if user cancels the camera', (0, _asyncToGenerator2.default)(function* () {
    if (_reactNative2.Platform.OS === 'android') {
      jest.spyOn(_reactNative2.PermissionsAndroid, 'request').mockResolvedValue(_reactNative2.PermissionsAndroid.RESULTS.GRANTED);
    }
    _geolocation.default.getCurrentPosition.mockImplementation(function (success) {
      return success({
        coords: {
          latitude: 0,
          longitude: 0
        }
      });
    });
    ImagePicker.launchCamera.mockImplementation(function (_options, callback) {
      return callback({
        didCancel: true
      });
    });
    var onCloseMock = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_components.CameraComponent, {
      onClose: onCloseMock
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(onCloseMock).toHaveBeenCalled();
    });
  }));
  it('should show alert if camera returns an error', (0, _asyncToGenerator2.default)(function* () {
    if (_reactNative2.Platform.OS === 'android') {
      jest.spyOn(_reactNative2.PermissionsAndroid, 'request').mockResolvedValue(_reactNative2.PermissionsAndroid.RESULTS.GRANTED);
    }
    _geolocation.default.getCurrentPosition.mockImplementation(function (success) {
      return success({
        coords: {
          latitude: 0,
          longitude: 0
        }
      });
    });
    ImagePicker.launchCamera.mockImplementation(function (_options, callback) {
      return callback({
        errorCode: 'ERROR',
        errorMessage: 'Camera error'
      });
    });
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_components.CameraComponent, {
      onClose: jest.fn()
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(_reactNative2.Alert.alert).toHaveBeenCalledWith('Erro', 'Camera error');
    });
  }));
  it('should handle geolocation error gracefully', (0, _asyncToGenerator2.default)(function* () {
    if (_reactNative2.Platform.OS === 'android') {
      jest.spyOn(_reactNative2.PermissionsAndroid, 'request').mockResolvedValue(_reactNative2.PermissionsAndroid.RESULTS.GRANTED);
    }
    _geolocation.default.getCurrentPosition.mockImplementation(function (_success, error) {
      return error({
        message: 'Location error'
      });
    });
    ImagePicker.launchCamera.mockImplementation(function (_options, callback) {
      return callback({
        assets: [{
          uri: 'photo-uri'
        }]
      });
    });
    var onPhotoTakenMock = jest.fn();
    (0, _reactNative.render)((0, _jsxRuntime.jsx)(_components.CameraComponent, {
      onPhotoTaken: onPhotoTakenMock
    }));
    yield (0, _reactNative.waitFor)(function () {
      return expect(onPhotoTakenMock).toHaveBeenCalledWith('photo-uri', undefined);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,