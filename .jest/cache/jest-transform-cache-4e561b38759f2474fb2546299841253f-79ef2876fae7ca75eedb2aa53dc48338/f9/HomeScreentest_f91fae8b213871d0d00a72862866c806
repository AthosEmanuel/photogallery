fa8045eba66753fcc50edb7279b5eb62
_getJestObj().mock('@react-native-async-storage/async-storage', function () {
  return {
    getItem: jest.fn(function () {
      return Promise.resolve(null);
    }),
    setItem: jest.fn(function () {
      return Promise.resolve();
    })
  };
});
_getJestObj().mock('../src/components/', function () {
  return {
    CameraComponent: function CameraComponent(_ref) {
      var onPhotoTaken = _ref.onPhotoTaken,
        onClose = _ref.onClose;
      setTimeout(function () {
        onPhotoTaken('fake-uri', {
          latitude: 10,
          longitude: 20
        });
        onClose && onClose();
      }, 0);
      return null;
    }
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _asyncStorage = _interopRequireDefault(require("@react-native-async-storage/async-storage"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _Home = _interopRequireDefault(require("../src/screen/Home"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
describe('HomeScreen', function () {
  beforeEach(function () {
    jest.clearAllMocks();
  });
  it('should render search input and camera button', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_Home.default, {})
      })),
      getByPlaceholderText = _render.getByPlaceholderText,
      getByTestId = _render.getByTestId;
    expect(getByPlaceholderText('Buscar por data...')).toBeTruthy();
    expect(getByTestId('camera-button')).toBeTruthy();
    expect(getByTestId('theme-button')).toBeTruthy();
  });
  it('should toggle dark mode', function () {
    var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_Home.default, {})
      })),
      getByTestId = _render2.getByTestId;
    var themeButton = getByTestId('theme-button');
    _reactNative.fireEvent.press(themeButton);
    _reactNative.fireEvent.press(themeButton);
  });
  it('should open camera and handle photo taken', (0, _asyncToGenerator2.default)(function* () {
    var _render3 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_Home.default, {})
      })),
      getByTestId = _render3.getByTestId;
    var cameraButton = getByTestId('camera-button');
    _reactNative.fireEvent.press(cameraButton);
    yield (0, _reactNative.waitFor)(function () {
      expect(_asyncStorage.default.setItem).toHaveBeenCalledTimes(1);
      expect(_asyncStorage.default.setItem).toHaveBeenCalledWith('@photos', expect.stringContaining('fake-uri'));
    });
  }));
  it('should filter photos based on search text', (0, _asyncToGenerator2.default)(function* () {
    var _render4 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_Home.default, {})
      })),
      getByPlaceholderText = _render4.getByPlaceholderText,
      queryAllByRole = _render4.queryAllByRole;
    var photos = [{
      uri: 'uri1',
      date: '01/01/2025 10:00:00'
    }, {
      uri: 'uri2',
      date: '02/01/2025 11:00:00'
    }];
    _asyncStorage.default.getItem = jest.fn(function () {
      return Promise.resolve(JSON.stringify(photos));
    });
    _reactNative.fireEvent.changeText(getByPlaceholderText('Buscar por data...'), '02/01/2025');
    var filtered = photos.filter(function (p) {
      return p.date.toLowerCase().includes('02/01/2025'.toLowerCase());
    });
    expect(filtered).toHaveLength(1);
    expect(filtered[0].uri).toBe('uri2');
  }));
  it('should delete a photo via onDelete callback', (0, _asyncToGenerator2.default)(function* () {
    var mockNavigate = jest.fn();
    var mockPhotos = [{
      uri: 'uri1',
      date: '01/01/2025 10:00:00'
    }, {
      uri: 'uri2',
      date: '02/01/2025 11:00:00'
    }];
    _asyncStorage.default.getItem = jest.fn(function () {
      return Promise.resolve(JSON.stringify(mockPhotos));
    });
    var _render5 = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_native.NavigationContainer, {
        children: (0, _jsxRuntime.jsx)(_Home.default, {})
      })),
      getByTestId = _render5.getByTestId;
    var updatedPhotos = mockPhotos.filter(function (p) {
      return p.uri !== 'uri1';
    });
    expect(updatedPhotos).toHaveLength(1);
    expect(updatedPhotos[0].uri).toBe('uri2');
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,