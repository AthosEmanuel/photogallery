d2335e6ba0ef32d837fd87724a299af6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _VirtualizedListContext = require("./VirtualizedListContext.js");
var _invariant = _interopRequireDefault(require("invariant"));
var _react = _interopRequireWildcard(require("react"));
var React = _react;
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) "default" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }
function _callSuper(t, o, e) { return o = (0, _getPrototypeOf2.default)(o), (0, _possibleConstructorReturn2.default)(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], (0, _getPrototypeOf2.default)(t).constructor) : o.apply(t, e)); }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
var CellRenderer = exports.default = function (_React$PureComponent) {
  function CellRenderer() {
    var _this;
    (0, _classCallCheck2.default)(this, CellRenderer);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _callSuper(this, CellRenderer, [].concat(args));
    _this.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this.props.item
      }
    };
    _this._separators = {
      highlight: function highlight() {
        var _this$props = _this.props,
          cellKey = _this$props.cellKey,
          prevCellKey = _this$props.prevCellKey;
        _this.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this$props2 = _this.props,
          cellKey = _this$props2.cellKey,
          prevCellKey = _this$props2.prevCellKey;
        _this.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this$props3 = _this.props,
          cellKey = _this$props3.cellKey,
          prevCellKey = _this$props3.prevCellKey;
        _this.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    };
    _this._onLayout = function (nativeEvent) {
      _this.props.onCellLayout == null || _this.props.onCellLayout(nativeEvent, _this.props.cellKey, _this.props.index);
    };
    _this._onCellFocusCapture = function (e) {
      _this.props.onCellFocusCapture == null || _this.props.onCellFocusCapture(_this.props.cellKey);
    };
    return _this;
  }
  (0, _inherits2.default)(CellRenderer, _React$PureComponent);
  return (0, _createClass2.default)(CellRenderer, [{
    key: "updateSeparatorProps",
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: Object.assign({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: "_renderElement",
    value: function _renderElement(renderItem, ListItemComponent, item, index) {
      if (renderItem && ListItemComponent) {
        console.warn('VirtualizedList: Both ListItemComponent and renderItem props are present. ListItemComponent will take' + ' precedence over renderItem.');
      }
      if (ListItemComponent) {
        return (0, _jsxRuntime.jsx)(ListItemComponent, {
          item: item,
          index: index,
          separators: this._separators
        });
      }
      if (renderItem) {
        return renderItem({
          item: item,
          index: index,
          separators: this._separators
        });
      }
      (0, _invariant.default)(false, 'VirtualizedList: Either ListItemComponent or renderItem props are required but none were found.');
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props4 = this.props,
        CellRendererComponent = _this$props4.CellRendererComponent,
        ItemSeparatorComponent = _this$props4.ItemSeparatorComponent,
        ListItemComponent = _this$props4.ListItemComponent,
        cellKey = _this$props4.cellKey,
        horizontal = _this$props4.horizontal,
        item = _this$props4.item,
        index = _this$props4.index,
        inversionStyle = _this$props4.inversionStyle,
        onCellLayout = _this$props4.onCellLayout,
        renderItem = _this$props4.renderItem;
      var element = this._renderElement(renderItem, ListItemComponent, item, index);
      var itemSeparator = (0, _react.isValidElement)(ItemSeparatorComponent) ? ItemSeparatorComponent : ItemSeparatorComponent && (0, _jsxRuntime.jsx)(ItemSeparatorComponent, Object.assign({}, this.state.separatorProps));
      var cellStyle = inversionStyle ? horizontal ? [styles.rowReverse, inversionStyle] : [styles.columnReverse, inversionStyle] : horizontal ? [styles.row, inversionStyle] : inversionStyle;
      var result = !CellRendererComponent ? (0, _jsxRuntime.jsxs)(_reactNative.View, Object.assign({
        style: cellStyle,
        onFocusCapture: this._onCellFocusCapture
      }, onCellLayout && {
        onLayout: this._onLayout
      }, {
        children: [element, itemSeparator]
      })) : (0, _jsxRuntime.jsxs)(CellRendererComponent, Object.assign({
        cellKey: cellKey,
        index: index,
        item: item,
        style: cellStyle,
        onFocusCapture: this._onCellFocusCapture
      }, onCellLayout && {
        onLayout: this._onLayout
      }, {
        children: [element, itemSeparator]
      }));
      return (0, _jsxRuntime.jsx)(_VirtualizedListContext.VirtualizedListCellContextProvider, {
        cellKey: this.props.cellKey,
        children: result
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, prevState) {
      if (props.item !== prevState.separatorProps.leadingItem) {
        return {
          separatorProps: Object.assign({}, prevState.separatorProps, {
            leadingItem: props.item
          })
        };
      }
      return null;
    }
  }]);
}(React.PureComponent);
var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row'
  },
  rowReverse: {
    flexDirection: 'row-reverse'
  },
  columnReverse: {
    flexDirection: 'column-reverse'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,